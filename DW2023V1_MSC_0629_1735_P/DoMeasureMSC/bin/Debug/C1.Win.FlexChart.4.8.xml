<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.FlexChart.4.8</name>
    </assembly>
    <members>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://www.grapecity.com/pricing/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoHowToActivate">
            <summary>
              Goto web site http://www.grapecity.com/componentone/docs/license/online-license/overview.html.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoLicenseRenewal">
            <summary>
              Goto web site https://www.grapecity.com/sales/componentone-faq/.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.WinFormLicenseProvider`1">
            <summary>
              Represents a license provider of a Windows Forms PowerTools component.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.Dock_SizeMode">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Normal">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Fit">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.FillToEnd">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsHeaderOnly">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsLineOnly">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.Full">
            <summary>
            Borders are shown for all cells.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.CheckBoxStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            C1MultiSelect\C1CheckList\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.System">
            <summary>
            Standard system view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Black">
            <summary>
            Like a MS Office 2007 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Blue">
            <summary>
            Like a MS Office 2007 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Silver">
            <summary>
            Like a MS Office 2007 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Black">
            <summary>
            Like a MS Office 2010 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Blue">
            <summary>
            Like a MS Office 2010 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Silver">
            <summary>
            Like a MS Office 2010 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2013">
            <summary>
            Like a MS Office 2013.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Windows10">
            <summary>
            Like a Windows 10.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Fill">
            <summary>
            The image is stretched and aspect ratio is saved.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016">
            <summary>
            Office 2016 palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016Dark">
            <summary>
            Office 2016 dark palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.GroupTabStyle">
            <summary>
            Used in:
            C1Schedule\GroupTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.FullWidth">
            <summary>
            Group headers of rectangular shape take the full width of the corresponding group.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2007">
            <summary>
            Group headers of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2016">
            <summary>
            Group headers of Office2016 appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.WeekTabStyle">
            <summary>
            Used in:
            C1Schedule\WeekTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2007">
            <summary>
            Week tabs of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2016">
            <summary>
            Week tabs of Office2016 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Flat">
            <summary>
            Flat image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.Frame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.HalfFrame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Colorful">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Black">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.None">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.None">
            <summary>
            No gradient filling.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Horizontal">
            <summary>
            From left (first color) to right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.HorizontalCenter">
            <summary>
            From center (first color) to left and right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Vertical">
            <summary>
            From top (first color) to bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.VerticalCenter">
            <summary>
            From center (first color) to top and bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Diagonal">
            <summary>
            From left-bottom (first color) to right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalCenter">
            <summary>
            From center (first color) to left-bottom and right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBack">
            <summary>
            From left-top (first color) to right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBackCenter">
            <summary>
            From center (first color) to left-top and right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Radial">
            <summary>
            From center (first color) to corners (second color) in radial direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.FromCenter">
            <summary>
            From center (first color) to corners (second color).
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.C1Themes.Shared.ThemeBrushBase,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.C1Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
            <param name="color">Theme solid brush color to set.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.C1Themes.Shared.C1ThemeProxy,System.String,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.EmptyIfTransparent(System.Drawing.Color)">
            <summary>
            Gets an empty color instead of a transparent color; otherwise, it returns the specified color.
            </summary>
            <param name="color">The specified color.</param>
            <returns>Empty color if transparent color was set.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.C1Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorToString(System.Drawing.Color)">
            <summary>
            Converts color value to string.
            </summary>
            <param name="value">The color to be converted.</param>
            <returns>The string represents the color.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorFromString(System.String)">
            <summary>
            Converts string value to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <returns>The color value.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryColorFromString(System.String,System.Drawing.Color@)">
            <summary>
            Converts string to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <param name="value">The color is the result of the conversion.</param>
            <returns>True if the string to color conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.BoolToString(System.Boolean)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="value">Boolean value.</param>
            <returns>"true" if value is true and "false" if value is false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryBoolFromString(System.String,System.Boolean@)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="s">String value to convert.</param>
            <param name="value">Boolean result.</param>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.BlendToString(System.Drawing.Drawing2D.Blend)">
            <summary>
            Converts blend pattern object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object to convert.</param>
            <returns>Converted blend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryBlendFromString(System.String,System.Drawing.Drawing2D.Blend@)">
            <summary>
            Converts string to blend pattern object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorBlendToString(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to convert.</param>
            <returns>Converted ColorBlend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryColorBlendFromString(System.String,System.Drawing.Drawing2D.ColorBlend@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value">Converted ColorBlend pattern as string if conversion was successful.</param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.PointToString(System.Drawing.Point)">
            <summary>
            Converts <see cref="T:System.Drawing.Point"/> object to string.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object to convert.</param>
            <returns>The string representing point.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryPointFromString(System.String,System.Drawing.Point@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Point"/> object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object.></param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
            <param name="data">The string of data to assign.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.GetData">
            <summary>
            Gets the data string.
            </summary>
            <returns>The data string.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.Add(System.String)">
            <summary>
            Appends a string to data.
            </summary>
            <param name="s">The string to add.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.Next">
            <summary>
            Finds characters to the end of the string.
            </summary>
            <returns>True if characters were found; otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.Utils.ValuesStore.Value">
            <summary>
            Gets the characters to the end of the string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_C1PrefixRemovedFormatVersion">
            <summary>
            Version of theme XML when C1 prefix was removed
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewInputFormatVersion">
            <summary>
            Version of theme XML when structure of C1Input theme was changed
            </summary>
        </member>
        <member name="T:C1.Win.Chart.FlexPieSlice">
            <summary>
            This class is used in design-time.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexPieSlice.#ctor">
            <summary>
            Creates an instance of <see cref="T:C1.Win.Chart.FlexPieSlice"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexPieSlice.#ctor(System.Double,System.String)">
            <summary>
            Creates an instance of <see cref="T:C1.Win.Chart.FlexPieSlice"/>.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="P:C1.Win.Chart.FlexPieSlice.Name">
            <summary>
            Gets or sets the value of Name property.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPieSlice.Value">
            <summary>
            Gets or sets the value of Value property.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexPieSlice.PropertyChanged">
            <summary>
            Fires when property has been changed.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.FlexPieSliceCollection">
            <summary>
            Provides access to an ordered, strongly typed collection of <see cref="T:C1.Win.Chart.FlexPieSlice"/> objects.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Annotation.AnnotationBase">
            <summary>
            Represents the base class of annotations for the <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/> 
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.Attachment">
            <summary>
            Gets or sets the attachment of the annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.Position">
            <summary>
            Gets or sets the position of annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.Location">
            <summary>
            Gets or sets the location of annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.PointIndex">
            <summary>
            Gets or sets the data point index of the annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.SeriesIndex">
            <summary>
            Gets or sets the data series index of the annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.TooltipText">
            <summary>
            Gets or sets the tooltip of the annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.ContentStyle">
            <summary>
            Gets or sets the shape style of annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.Style">
            <summary>
            Gets or sets the style of annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.AnnotationBase.#ctor">
            <summary>
            Create an instance of BaseAnnotation.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.Annotation.AnnotationBase.PropertyChanged">
            <summary>
            Notifies that a property of annotation value has changed.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.AnnotationBase.OnPropertyChanged(System.String)">
            <summary>
            Called when property value changes.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.AnnotationBase.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.Annotation.AnnotationBase.Distance(System.Double,System.Double)">
            <summary>
            Calculates distance from point(x,y) to the start point of line annotation.
            </summary>
            <param name="x">X coordinate of the point.</param>
            <param name="y">Y coordinate of the point.</param>
            <returns>The distance from point(x,y) to the start point of line annotation.</returns>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationBase.Bounds">
            <summary>
            Gets the bounding box.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.AnnotationBase.Convert(C1.Chart._Point)">
            <summary>
            Converts the specified point from data to pixel coordinates.
            </summary>
            <param name="pt">The point value to convert.</param>
            <returns>The point in control's pixel coordinates.</returns>
        </member>
        <member name="T:C1.Win.Chart.Annotation.AnnotationLayer">
            <summary>
            Represents an annotation layer for <see cref="T:C1.Win.Chart.FlexChart"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.AnnotationLayer.Annotations">
            <summary>
            Gets the collection of annotation elements in the <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.AnnotationLayer.#ctor(C1.Win.Chart.FlexChart)">
            <summary>
            Create an instance of AnnotationLayer.
            </summary>
            <param name="chart"></param>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Circle">
            <summary>
            Represents a circle annotation for <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Circle.Radius">
            <summary>
            Gets or sets the radius of circle annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Circle.#ctor">
            <summary>
            Create an instance of Circle.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Circle.#ctor(System.String)">
            <summary>
            Create an instance of Circle.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Circle.#ctor(System.String,System.Int32)">
            <summary>
            Create an instance of Circle.
            </summary>
            <param name="content"></param>
            <param name="radius"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Circle.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Ellipse">
            <summary>
            Represents an ellipse annotation for <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Ellipse.Width">
            <summary>
            Gets or sets the width of ellipse annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Ellipse.Height">
            <summary>
            Gets or sets the height of ellipse annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Ellipse.#ctor">
            <summary>
            Create an instance of Ellipse.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Ellipse.#ctor(System.String)">
            <summary>
            Create an instance of Ellipse.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Ellipse.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an instance of Ellipse.
            </summary>
            <param name="content"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Ellipse.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Image">
            <summary>
            Represents an image annotation for the <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Image.SourceImage">
            <summary>
            Gets or sets the source image of image annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Image.Width">
            <summary>
            Gets or sets the width of image annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Image.Height">
            <summary>
            Gets or sets the height of image annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Image.#ctor">
            <summary>
            Create an instance of Image.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Image.#ctor(System.Drawing.Image)">
            <summary>
            Create an instance of Image.
            </summary>
            <param name="sourceImage"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Image.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Create an instance of Image.
            </summary>
            <param name="sourceImage"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Image.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Line">
            <summary>
            Represents a line annotation for <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.Content">
            <summary>
            Gets or sets the element content.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.Start">
            <summary>
            Gets or sets the start point of line annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.End">
            <summary>
            Gets or sets the end point of line annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.StartX">
            <summary>
            Gets or sets the x-coordinate of starting point.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.StartY">
            <summary>
            Gets or sets the y-coordinate of starting point.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.EndX">
            <summary>
            Gets or sets the x-coordinate of ending point.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.EndY">
            <summary>
            Gets or sets the y-coordinate of ending point.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Line.#ctor">
            <summary>
            Create an instance of Line.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Line.#ctor(System.String)">
            <summary>
            Create an instance of Line.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Line.#ctor(System.String,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Create an instance of Line.
            </summary>
            <param name="content"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Line.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Line.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Line.Distance(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Polygon">
            <summary>
            Represents a polygon annotation for <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Polygon.Points">
            <summary>
            Gets the collection of points of the polygon annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Polygon.#ctor">
            <summary>
            Create an instance of Polygon.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Polygon.#ctor(System.String)">
            <summary>
            Create an instance of Polygon.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Polygon.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Polygon.ContentCenter">
            <summary>
            Gets or sets the center of annotation's content.
            If the property value is null (default value), the position of content is selected automatically.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Polygon.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Polygon.Distance(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Rectangle">
            <summary>
            Represents a rectangle annotation for <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Rectangle.Width">
            <summary>
            Gets or sets the width of rectangle annotation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Rectangle.Height">
            <summary>
            Gets or sets the height of rectangle annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Rectangle.#ctor">
            <summary>
            Create an instance of Rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Rectangle.#ctor(System.String)">
            <summary>
            Create an instance of Rectangle.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Rectangle.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an instance of Rectangle.
            </summary>
            <param name="content"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Rectangle.GetSize">
            <summary>
            Gets the element size
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Rectangle.Bounds">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Rectangle.Distance(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Shape">
            <summary>
            Represents a base class of shape annotations for the <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Shape.Content">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Shape.#ctor">
            <summary>
            Create an instance of Shape.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Shape.#ctor(System.String)">
            <summary>
            Create an instance of Shape.
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Square">
            <summary>
            Represents a square annotation for the <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Square.Length">
            <summary>
            Gets or sets the length of the square annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Square.#ctor">
            <summary>
            Create an instance of Square.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Square.#ctor(System.String)">
            <summary>
            Create an instance of Square.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Square.#ctor(System.String,System.Int32)">
            <summary>
            Create an instance of Square.
            </summary>
            <param name="content"></param>
            <param name="length"></param>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Square.GetSize">
            <summary>
            Gets the element size.
            </summary>
            <returns>Size of the element.</returns>
        </member>
        <member name="T:C1.Win.Chart.Annotation.Text">
            <summary>
            Represents a text annotation for the <see cref="T:C1.Win.Chart.Annotation.AnnotationLayer"/>
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Annotation.Text.Content">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Text.#ctor">
            <summary>
            Create an instance of Text.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Annotation.Text.#ctor(System.String)">
            <summary>
            Create an instance of Text.
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:C1.Win.Chart.Axis">
            <summary>
            Represents an axis in the chart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Axis.#ctor">
            <summary>
            Creates a new instance of an Axis object.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Axis.Convert(System.Double)">
            <summary>
            Converts the specified value from data to pixel coordinates.
            </summary>
            <param name="val">The data value to convert.</param>
            <returns>The value in control's pixel coordinates.</returns>
        </member>
        <member name="M:C1.Win.Chart.Axis.ConvertBack(System.Double)">
            <summary>
            Converts the specified value from pixel to data coordinates.
            </summary>
            <param name="val">The pixel coordinate to convert back.</param>
            <returns>The value in data coordinates.</returns>
        </member>
        <member name="P:C1.Win.Chart.Axis.Position">
            <summary>
            Gets or sets the axis position.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.AxisType">
            <summary>
            Gets or sets the axis type.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.Origin">
            <summary>
            Gets or sets the value at which an axis crosses the perpendicular axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.Reversed">
            <summary>
            Gets or sets a value indicating whether the axis is reversed (top to bottom or right to left).
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.Labels">
            <summary>
            Gets or sets a value indicating whether the axis labels are visible.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.LabelAngle">
            <summary>
            Gets or sets the rotation angle of the axis labels.
            </summary>
            <remarks>The angle is measured in degrees with valid values ranging from -90 to 90.</remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.LabelMin">
            <summary>
            Gets or sets whether the minimum axis value is always labeled.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.LabelMax">
            <summary>
            Gets or sets whether the maximum axis value is always labeled.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.Format">
            <summary>
            Gets or sets the format string used for the axis labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.Title">
            <summary>
            Gets or sets the title text shown next to the axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.TickLength">
            <summary>
            Gets or sets the tick length.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.TitleStyle">
            <summary>
            Gets the axis title style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MajorTickMarks">
            <summary>
            Gets or sets the location of the axis tick marks.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MajorGrid">
            <summary>
            Gets or sets a value indicating whether the axis includes grid lines.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MajorGridStyle">
            <summary>
            Gets the major grid style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MajorUnit">
            <summary>
            Gets or sets the number of units between axis labels.
            </summary>
            <remarks>If the axis contains date values, then the units are expressed in days.</remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.MinorTickMarks">
            <summary>
            Gets or sets the location of the axis minor tick marks.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MinorGrid">
            <summary>
            Gets or sets a value indicating whether the axis includes minor grid lines.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MinorGridStyle">
            <summary>
            Gets the minor grid style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.MinorUnit">
            <summary>
            Gets or sets the number of units between minor ticks and grid lines.
            </summary>
            <remarks>If the axis contains date values, then the units are expressed in days.</remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.TimeUnit">
            <summary>
            Gets or sets the units for a time based axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.LogBase">
            <summary>
            Gets or sets the logarithmic base of the axis.
            </summary>
            <remarks>If the base is equal to NaN(default value) the axis uses a linear scale.</remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.AxisLine">
            <summary>
            Gets or sets a value indicating whether the axis line is visible.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.LabelAlignment">
            <summary>
            Gets or sets the alignment of axis labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.Min">
            <summary>
            Gets or sets the minimum value shown on the axis.
            </summary>
            <remarks>
            If the minimum is equal to NaN(default value) the minimum is calculated automatically.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.Max">
            <summary>
            Gets or sets the maximum value shown on the axis.
            </summary>
            <remarks>
            If the maximum is equal to NaN(default value) the maximum is calculated automatically.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.StaggeredLines">
            <summary>
            Gets or sets the number of staggered lines for axis labels.
            </summary>
            <remarks>
            The default value is 1 and all axis labels are drawn on the same level.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.Style">
            <summary>
            Gets the axis style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupStyle">
            <summary>
            Gets the axis group style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.ActualMin">
            <summary>
            Gets the current axis minimum.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.ActualMax">
            <summary>
            Gets the current axis maximum.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.OverlappingLabels">
            <summary>
            Gets or sets a value indicating how to handle the overlapping axis labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.DataSource">
            <summary>
            Gets or sets the items source for the axis labels.
            </summary>
            <remarks>
            Names of the properties are specified by the Binding property.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.Binding">
            <summary>
            Gets or sets the comma-separated property names for the DataSource property to use in axis labels.
            </summary>
            <remarks>
            The first name specifies the value on the axis, the second represents the corresponding
            axis label.The default value is "Value,Text".
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.PlotAreaName">
            <summary>
            Gets or sets the name of plot area for the axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.RoundLimits">
            <summary>
            Gets or sets whether the automatic axis limits should be rounded.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.TitleAngle">
            <summary>
            Gets or sets the rotation angle of the axis title.
            </summary>
            <remarks>The angle is measured in degrees.</remarks>
        </member>
        <member name="P:C1.Win.Chart.Axis.Formatter">
            <summary>
            Gets or sets the custom formatter for axis labels.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Axis.GetHeight(C1.Chart.IRenderEngine,System.Double)">
            <summary>
            Gets the axis height.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="maxWidth">The maximum width.</param>
            <returns>The axis height.</returns>
        </member>
        <member name="P:C1.Win.Chart.Axis.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupNames">
            <summary>
            Gets or sets the group names.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupItemsPath">
            <summary>
            Gets or sets the items path.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Axis.SetChartType(System.Nullable{C1.Chart.ChartType})">
            <summary>
            Sets the chart type.
            </summary>
            <param name="type">The <see cref="P:C1.Win.Chart.Axis.ChartType"/> to assign.</param>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupSeparator">
            <summary>
            Gets or sets the group separators.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupProvider">
            <summary>
            Gets or sets the group provider.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupTitleAlignment">
            <summary>
            Gets or sets the group title alignment.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Axis.GroupVisibilityLevel">
            <summary>
            Gets or sets the limiting level of visible collapsible groups.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.BoxWhisker">
            <summary>
            Represents a Box-whisker series of FlexChart.
            </summary>
            <remarks>
            The <see cref="T:C1.Win.Chart.BoxWhisker"/> series is normally used to compare distributions between different sets of numerical data.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.ShowMeanLine">
            <summary>
            Gets or sets a value that determines whether to show the mean line for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.QuartileCalculation">
            <summary>
            Gets or sets a value that specifies the quartile calculation for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.ShowOutliers">
            <summary>
            Gets or sets a value that determines whether to show the outliers for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.GapWidth">
            <summary>
            Gets or sets a value that determines the gap width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.1. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.GroupWidth">
            <summary>
            Gets or sets a value that determines the group width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.8. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.ShowMeanMarks">
            <summary>
            Gets or sets a value that determines whether to show the mean marker for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BoxWhisker.ShowInnerPoints">
            <summary>
            Gets or sets a value that determines whether to show the inner points for the Box-whisker series.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.BoxWhisker.GetValues(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.BreakEven">
            <summary>
            Represents a BreakEven series for FlexChart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.BreakEven.#ctor">
            <summary>
            Creates an instance of BreakEven series class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.FixedCost">
            <summary>
            Gets or sets the fixed cost value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.VariableCost">
            <summary>
            Gets or sets the variable cost value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.SalesPrice">
            <summary>
            Gets or sets the sales price value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.SafetyMarginStyle">
            <summary>
            Gets the safety margin style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.SalesRevenueStyle">
            <summary>
            Gets the sales revenue style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.TotalCostStyle">
            <summary>
            Gets the total cost style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.FixedCostStyle">
            <summary>
            Gets the fixed cost style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.VariableCostStyle">
            <summary>
            Gets the variable cost style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.MarginalProfitStyle">
            <summary>
            Gets the marginal profit style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.BreakEven.BreakEvenStyle">
            <summary>
            Gets tje break-even style.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.BreakEven.GetValues(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.BreakEven.OnRendered(C1.Chart.IRenderEngine)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.BreakEven.GetChartType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.BreakEven.GetStyle(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.ChartOptions">
            <summary>
            Specifies chart options.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.ChartOptions.#ctor">
            <summary>
            Creates an instance of ChartOptions class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.InterpolateNulls">
            <summary>
            Gets or sets a value indicating how to interpret missing values.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.ClusterSize">
            <summary>
            Gets or sets the cluster size for column and bar charts.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.BubbleMinSize">
            <summary>
            Gets or sets the minimal symbol size for bubble chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.BubbleMaxSize">
            <summary>
            Gets or sets the maximum symbol size for bubble chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.FunnelNeckWidth">
            <summary>
            Gets or sets the neck width for funnel chart.
            </summary>
            <remarks>NeckWidth doesn't work if <see cref="P:C1.Win.Chart.ChartOptions.FunnelType"/> is set to <see cref="F:C1.Chart.FunnelChartType.Rectangle"/> </remarks>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.FunnelNeckHeight">
            <summary>
            Gets or sets the neck height for funnel chart.
            </summary>
            <remarks>NeckHeight doesn't work if <see cref="P:C1.Win.Chart.ChartOptions.FunnelType"/> is set to <see cref="F:C1.Chart.FunnelChartType.Rectangle"/> </remarks>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.FunnelType">
            <summary>
            Gets or sets the type of funnel chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.HistogramCumulativeMode">
            <summary>
            Gets or sets the histogram cumulative mode.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.HistogramBinWidth">
            <summary>
            Gets or sets the histogram bin width.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.HistogramNormalCurve">
            <summary>
            Gets or sets the value indicating whather to show histogram norma curve.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartOptions.HistogramAppearance">
            <summary>
            Gets or sets the histogram appearance.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.ChartOptions.Invalidate">
            <summary>
            Invalidates the chart.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.ChartStyle">
            <summary>
            Specifies visual style for chart elements.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.ChartStyle.#ctor">
            <summary>
            Creates an instance of ChartStyle class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.Stroke">
            <summary>
            Gets or sets the stroke brush of element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.Fill">
            <summary>
            Gets or sets the fill brush of element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.FillColor">
            <summary>
            Gets or sets the fill color.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.StrokeWidth">
            <summary>
            Gets or sets the stroke width.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.VerticalText">
            <summary>
            Gets or sets a value indicating whether the text should be rendered vertically.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.StrokeDashPattern">
            <summary>
            Gets or sets the stroke dash pattern.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.LinePattern">
            <summary>
            Gets or sets the Line Pattern.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartStyle.Font">
            <summary>
            Gets or sets the font of the chart element.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.ChartStyle.PropertyChanged">
            <summary>
            Fires when property value has changed.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.ChartStyleConverter">
            <summary>
            ChartStyle type converter.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.ChartStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.DataLabelBase">
            <summary>
            Base class for data label.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabelBase.Content">
            <summary>
            Gets or sets the content of data labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabelBase.Border">
            <summary>
            Gets or sets a value indicating whether the label has border.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabelBase.ConnectingLine">
            <summary>
            Gets or sets a value indicating whether the data labels have a line connecting them with corresponding data point. 
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabelBase.Offset">
            <summary>
            Gets or sets the offset of data label from corresponding data point.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabelBase.Style">
            <summary>
            Gets the style of data labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabelBase.BorderStyle">
            <summary>
            Gets the border style of data labels.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.DataLabelBase.Invalidate">
            <summary>
            Invalidates the chart.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.DataLabel">
            <summary>
            Represents a label associated with data point.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.DataLabel.#ctor">
            <summary>
            Creates an instance of DataLabel class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.Position">
            <summary>
            Gets or sets the position of data labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.Overlapping">
            <summary>
            Gets or sets the value which indicates how to handle overlapped data labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.OverlappingOptions">
            <summary>
            Gets or sets the label overlapping options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.ContentOptions">
            <summary>
            Gets or sets the data label content options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.Angle">
            <summary>
            Gets or sets the label rotation angle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.MaxWidth">
            <summary>
            Gets or sets the maximum width of data label.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.MaxLines">
            <summary>
            Gets or sets the maximum number of lines in data label.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.DataLabel.MaxAutoLabels">
            <summary>
            Gets or sets the maximum number of labels for automatic positioning.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.PieDataLabel">
            <summary>
            Represents a data label for FlexPie.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PieDataLabel.Position">
            <summary>
            Gets or sets the position of data labels.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PieDataLabel.Overlapping">
            <summary>
            Gets or sets the overlapping mode for data labels.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.ImageFormat">
            <summary>
            Specifies image format.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.ImageFormat.Png">
            <summary>
            Png image.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.ImageFormat.Jpg">
            <summary>
            Jpeg image
            </summary>
        </member>
        <member name="F:C1.Win.Chart.ImageFormat.Svg">
            <summary>
            SVG image.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.RenderMode">
            <summary>
            Specifies chart render mode.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.RenderMode.Default">
            <summary>
            Default render mode.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.RenderMode.DirectX">
            <summary>
            High performance DirectX rendering.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.ChartSmoothingMode">
            <summary>
            Specifies smoothing modes.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.ChartSmoothingMode.Auto">
            <summary>
            Automatic selection.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.ChartSmoothingMode.HighQuality">
            <summary>
            Anti-aliasing is enabled.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.ChartSmoothingMode.HighSpeed">
            <summary>
            Anti-aliasing is disabled.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.ErrorBar">
            <summary>
            Represents an ErrorBar series of <see cref="T:C1.Win.Chart.FlexChart" />
            </summary>
            <remarks>
            The <see cref="T:C1.Win.Chart.ErrorBar" /> series helps you see margins of error and standard deviations at a glance.
            They can be shown as a standard error amount, a percentage, or a standard deviation.
            You can also set your own values to display the exact error amounts you want.
            </remarks>
        </member>
        <member name="M:C1.Win.Chart.ErrorBar.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Chart.ErrorBar"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.Direction">
            <summary>
            Gets or sets a value that specifies the direction of the error.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.EndStyle">
            <summary>
            Gets or sets a value that specifies the end style of the series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.ErrorAmount">
            <summary>
            Gets or sets a value that specifies the error amount of the series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.CustomPlusErrorValue">
            <summary>
            Gets or sets a value that specifies the custom plus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.CustomMinusErrorValue">
            <summary>
            Gets or sets a value that specifies the cumstom minus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.ErrorValue">
            <summary>
            Gets or sets a value that specifies the error value of the series.
            </summary>
            <remarks>
            This property should be work with errorAmount property.
            If errorAmount is ErrorAmount.FixedValue, the value property is a fixed number value.
            If errorAmount is ErrorAmount.Percentage, the value property is a percentage number value between 0 and 1.
            If errorAmount is ErrorAmount.StandardDeviation, the value property is a percentage number of calculated standard deviation value.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.ErrorBarStyle">
            <summary>
            Gets the style of the error bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ErrorBar.HasCustomSymbol">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.ErrorBar.GetDataRect(C1.Chart._Rect)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.ErrorBar.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.ErrorBar.SetStyle(C1.Chart._Style,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.ErrorBar.GetStyle(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.Palettes.ExtendedPalette">
            <summary>
            Base class for extended palettes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Palettes.ExtendedPalette.CreateBrushes(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates the brushes list for extended palettes.
            </summary>
            <param name="clrs">The <see cref="T:System.Collections.Generic.IList`1"/> of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> of created <see cref="T:System.Drawing.SolidBrush"/> elements.</returns>
        </member>
        <member name="M:C1.Win.Chart.Palettes.ExtendedPalette.GetBrushes(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IList{System.Int32}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IList{System.Drawing.Brush}},System.String)">
            <summary>
            Creates the <see cref="T:System.Collections.Generic.IList`1"/> of brushes.
            </summary>
            <param name="clrs">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</param>
            <param name="brushes">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of the brushes.</param>
            <param name="key">The key of the value to set.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of created brushes.</returns>
        </member>
        <member name="T:C1.Win.Chart.Palettes.Qualitative">
            <summary>
            Qualitative palettes from ColorBrewer https://colorbrewer2.org .
            </summary>
            <remarks>
            Qualitative (or categorical) palettes are usually used for plotting independent data categories
            which don't have any specific order. For example, the series that represents shipping methods
            or product types.The colors in these palettes are selected to be distinctive and clearly indicate
            difference between data series.                                                                 
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Brushes">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Accent">
            <summary>
            Gets the Accent palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Dark2">
            <summary>
            Gets the Dark2 palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Paired">
            <summary>
            Gets the Paired palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Pastel1">
            <summary>
            Gets the Pastel1 palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Pastel2">
            <summary>
            Gets the Pastel2 palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Set1">
            <summary>
            Gets the Set1 palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Set2">
            <summary>
            Gets the Set2 palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Qualitative.Set3">
            <summary>
            Gets the Set3 palette.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Palettes.Diverging">
            <summary>
            Diverging palettes from ColorBrewer https://colorbrewer2.org .
            </summary>
            <remarks>
            Qualitative (or categorical) palettes are usually used for plotting independent data categories
            which don't have any specific order. For example, the series that represents shipping methods or
            product types.The colors in these palettes are selected to be distinctive and clearly indicate
            difference between data series.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.Brushes">
            <summary>
            Gets the brushes dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.BrBG">
            <summary>
            Gets the BrBG (Brown Blue-Green) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.PiYG">
            <summary>
            Gets the PiYG (Pink Yellow-Green) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.PRGn">
            <summary>
            Gets the PRGn palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.PuOr">
            <summary>
            Gets the PuOr (Purple Orange) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.RdBu">
            <summary>
            Gets the RdBu palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.RdGy">
            <summary>
            Gets the RdGy palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.RdYlBu">
            <summary>
            Gets the RdYlBu palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.RdYlGn">
            <summary>
            Gets the RdYlGn palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.Diverging.Spectral">
            <summary>
            Gets the Spectral palette.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Palettes.SequentialSingle">
            <summary>
            Sequential single-hue palettes from ColorBrewer https://colorbrewer2.org .
            </summary>
            <remarks>
            Sequential palettes are used for data that have ordered, quantitative nature, for example precipitation amount
            or number of road incidents for some region.These color schemes are shade variations of a single base color,
            usually from light to dark.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Brushes">
            <summary>
            Gets the brushes dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Blues">
            <summary>
            Gets the Blues palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Greens">
            <summary>
            Gets the Greens palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Greys">
            <summary>
            Gets the Greys palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Oranges">
            <summary>
            Gets the Oranges palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Purples">
            <summary>
            Gets the Purples palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialSingle.Reds">
            <summary>
            Gets the Reds palette.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Palettes.SequentialMulti">
            <summary>
            Sequential multi-hue palettes from ColorBrewer https://colorbrewer2.org .
            </summary>
            <remarks>
            Sequential palettes are used for data that have ordered, quantitative nature, for example precipitation amount
            or number of road incidents for some region.In addition to lightness variation, these color schemes also
            use several hues to improve perception.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.Brushes">
            <summary>
            Gets the brushes dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.BuGn">
            <summary>
            Gets the BuGn (Blue-Green) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.BuPu">
            <summary>
            Gets the BuPu (Blue-Purple) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.GnBu">
            <summary>
            Gets the GnBu (Green-Blue) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.OrRd">
            <summary>
            Gets the OrRd (Orange-Red) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.PuBu">
            <summary>
            Gets the PuBu (Purple-Blue) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.PuBuGn">
            <summary>
            Gets the PuBuGn (Purple-Blue-Green) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.PuRd">
            <summary>
            Gets the PuRd (Purple-Red) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.RdPu">
            <summary>
            Gets the RdPu (Red-Purple) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.YlGn">
            <summary>
            Gets the YlGn (Yellow-Green) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.YlGnBu">
            <summary>
            Gets the YlGnBu (Yellow-Green-Blue) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.YlOrBr">
            <summary>
            Gets the YlOrBr (Yellow-Orange-Brown) palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Palettes.SequentialMulti.YlOrRd">
            <summary>
            Gets the YlOrRd (Yellow-Orange-Red) palette.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.FlexChart">
            <summary>
            Represents a charting control that provides a powerful and flexible way to visualize data. 
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.#ctor">
            <summary>
            Creates an instance of FlexChart control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.Binding">
            <summary>
            Gets or sets the name of the property that contains Y values for the series.
            </summary>
            <remarks>
            For complex chart types it may contain several names separated by commas.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.BindingX">
            <summary>
            Gets or sets the name of the property that contains X values for the series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.DataMember">
            <summary>
            Gets or sets the name of the DataMember, if any, for the DataSource.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.DataSource">
            <summary>
            Gets or sets the collection of objects that contains the series data.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.BindingMode">
            <summary>
            Gets or sets the binding mode.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.Rebind">
            <summary>
            Performs data binding.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.AxisX">
            <summary>
            Gets the main chart x-axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.AxisY">
            <summary>
            Gets the main chart y-axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.Series">
            <summary>
            Gets the list of the series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.Stacking">
            <summary>
            Gets or sets the data stacking.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.RenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.Rotated">
            <summary>
            Gets or sets a value indicating whether to flip the axes so that
            X is vertical and Y is horizontal.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.LegendToggle">
            <summary>
            Gets or sets a value indicating whether clicking legend items toggles
            the series visibility in the chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.AxesOnTop">
            <summary>
            Gets or sets a value indicating whether the chart axes are drawing on the top of data.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.DataLabel">
            <summary>
            Gets the chart data label.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.Options">
            <summary>
            Gets various chart options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.PlotMargin">
            <summary>
            Gets or sets the plot area margin.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.PlotRect">
            <summary>
            Returns plot area rectangle (rectangle inside chart axes).
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.SelectedSeries">
            <summary>
            Gets or set the selected series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.PlotAreas">
            <summary>
            Gets the chart plot areas collection.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexChart.SeriesVisibilityChanged">
            <summary>
            Fires when chart series visibility was changed.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.HitTest(System.Drawing.Point)">
            <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <returns>A HitTestInfo object with information about the point.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.HitTest(System.Drawing.Point,System.Boolean)">
            <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <param name="testLines">Includes connecting line to hit testing.</param>
            <returns>A HitTestInfo object with information about the point.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.HitTest(System.Drawing.Point,C1.Chart.MeasureOption,System.Int32)">
            <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <param name="options">Measure options.</param>
            <param name="seriesIndex">Optional Series index. If index is specified the method returns 
            information about the closest data point of the specified series.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.PointToData(System.Drawing.PointF)">
            <summary>
            Converts a Point from control coordinates to chart data coordinates.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <returns>The point in chart data coordinates.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.DataToPoint(System.Drawing.PointF)">
            <summary>
            Converts a Point from data coordinates to control coordinates.
            </summary>
            <param name="pt">Point in data coordinates.</param>
            <returns>Point in control coordinates.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.GetDataRange">
            <summary>
            Gets the data range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.DrawChart(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Size)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.Render(C1.Chart.IRenderEngine,System.Int32,System.Int32)">
            <summary>
            Renders the chart.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.Render(C1.Chart.IRenderEngine,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders the chart.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises Paint event.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnPaintChart(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the chart.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the SizeChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnBackgroundImageLayoutChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="E:C1.Win.Chart.FlexChart.LabelRendering">
            <summary>
            Fires before rendering label.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexChart.LabelRendered">
            <summary>
            Fires after rendering label.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.C1#Chart#IChart#OnLabelRendering(C1.Chart.IRenderEngine,System.String@,C1.Chart.ISeries,System.Int32,System.Double@,System.Double@)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="series">Chart series.</param>
            <param name="index">Series index.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.C1#Chart#IChart#OnLabelRendered(C1.Chart.IRenderEngine,System.String,C1.Chart.ISeries,System.Int32,System.Double,System.Double)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="series">Chart series.</param>
            <param name="index">Series index.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.Series_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            CollectionChanged event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.AnimationLoad">
            <summary>
            Gets the load animation options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.AnimationUpdate">
            <summary>
            Gets the update animation options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.AnimationSettings">
            <summary>
            Gets or sets the animation settings.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexChart.AnimationTransform">
            <summary>
            Fires during animation transformation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.GetContent(C1.Chart.HitTestInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Chart.FlexChart.CanShowTooltip">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Win.Chart.FlexChart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.RenderDataLabelEventArgs">
            <summary>
            Arguments for RenderDataLabel event.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderDataLabelEventArgs.Text">
            <summary>
            Data label text. It can be changed in event handler.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.RenderEventArgs">
            <summary>
            Render event arguments.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderEventArgs.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.RenderSymbolEventArgs">
            <summary>
            Render symbol event arguments.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSymbolEventArgs.Point">
            <summary>
            Gets the symbol point in control pixel coordinates.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSymbolEventArgs.Index">
            <summary>
            Gets the data point index.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSymbolEventArgs.Item">
            <summary>
            Gets the data item.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSymbolEventArgs.Series">
            <summary>
            Gets the data series.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.FlexChartBase">
            <summary>
            Base class for chart controls.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.FlexChartBase.HitTestThreshold">
            <summary>
            The mouse hit test threshold.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.FlexChartBase.updating">
            <summary>
            The control update counter.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.Legend">
            <summary>
            Gets the chart legend.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.Palette">
            <summary>
            Gets or sets the chart palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.Header">
            <summary>
            Gets the chart header.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.Footer">
            <summary>
            Gets the chart footer.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.ToolTip">
            <summary>
            Gets the chart tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.SelectionMode">
            <summary>
            Gets or sets the chart selection mode.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.SelectedIndex">
            <summary>
            Gets or sets the index of chart selected element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.SelectionStyle">
            <summary>
            Gets the style of selected element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.PlotStyle">
            <summary>
            Gets the style of plot area(area inside axes).
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.CustomPalette">
            <summary>
            Gets or sets the custom palette.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.SmoothingMode">
            <summary>
            Gets or sets chart smoothing mode.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.BeginUpdate">
            <summary>
            Suspends notifications until the next call to EndUpdate.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.EndUpdate">
            <summary>
            Resumes notifications suspended by calls to BeginUpdate.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.HitTest(System.Drawing.Point)">
            <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <returns>A HitTestInfo object with information about the point.</returns>
        </member>
        <member name="E:C1.Win.Chart.FlexChartBase.Rendering">
            <summary>
            Fires before chart starts rendering.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexChartBase.Rendered">
            <summary>
            Fires after chart finishes rendering.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexChartBase.SelectionChanged">
            <summary>
            Fires after selected element was changed.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.DrawChart(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Draws chart on the specified graphics with specified size.
            </summary>
            <param name="g">Graphics.</param>
            <param name="sz">Size of chart.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.DrawChart(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Draws chart on the specified graphics at the specified point with specified size.
            </summary>
            <param name="g">Graphics.</param>
            <param name="pt">Point.</param>
            <param name="sz">Size of chart.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.SaveImage(System.IO.Stream,C1.Win.Chart.ImageFormat,System.Int32,System.Int32)">
            <summary>
            Saves chart as image with to the specified stream.
            </summary>
            <param name="stream">Stream</param>
            <param name="fmt">Image format.</param>
            <param name="w">Width of image.</param>
            <param name="h">Height of image.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.SaveImage(System.Int32,System.Int32)">
            <summary>
            Saves chart as image with specified width and height to the clipboard.
            </summary>
            <param name="w">Width of image.</param>
            <param name="h">Height of image.</param>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.SaveImage">
            <summary>
            Saves chart as image to the clipboard.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.GetStyle(System.String)">
            <summary>
            Gets the style by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.CanShowTooltip">
            <summary>
            Specifies whether to show the tooltip.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises SelectionChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.DefaultSize">
            <summary>
            Gets the default control's size.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises MouseMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises OnMouseLeave event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.HideTooltip">
            <summary>
            Hides tooltip.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.GetContent(C1.Chart.HitTestInfo,System.String)">
            <summary>
            Gets the <see cref="T:C1.Chart.Keywords"/> content depending on mouse position <see cref="T:C1.Chart.HitTestInfo"/>.
            </summary>
            <param name="hti">The mouse position <see cref="T:C1.Chart.HitTestInfo"/>.</param>
            <param name="template">The string to search for a match.</param>
            <returns>The string of the <see cref="T:C1.Chart.Keywords"/> content.</returns>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.Font">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.BackColor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Chart.FlexChartBase.ForeColor">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.FlexChartBase.ThemeChanged(System.Object)">
            <summary>
            This method is called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.Chart.FlexPie">
            <summary>
            Represents a charting control that renders pie chart.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.FlexPie._dirty">
            <summary>
            Whether the data cache is dirty.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.#ctor">
            <summary>
            Creates an instance of FlexPie class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.DataSource">
            <summary>
            Gets or sets the collection of objects that contains the data for the pie chart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.ShouldSerializeDataSource">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.Chart.FlexPie.DataSource"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.Chart.FlexPie.DataSource"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.ResetDataSource">
            <summary>
            Restore the <see cref="P:C1.Win.Chart.FlexPie.DataSource"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.DataMember">
            <summary>
            Gets or sets the name of the DataMember, if any, for the DataSource.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.Binding">
            <summary>
            Gets or sets the name of the property that contains numeric values for the pie slices.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.BindingName">
            <summary>
            Gets or sets the name of the property that contains label for the pie slices and legend.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.StartAngle">
            <summary>
            Gets or sets the starting angle for the pie slices, in degrees.
            </summary>
            <remarks>
            Angles are measured clockwise, starting at the 9 o'clock position.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.InnerRadius">
            <summary>
            Gets or sets the size of the pie's inner radius.
            </summary>
            <remarks>
            The inner radius is measured as a fraction of the pie radius.
            The default value for this property is zero, which creates a pie. 
            Setting this property to values greater than zero creates pies
            with a hole in the middle, also known as doughnut charts.                                          
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.Offset">
            <summary>
            Gets or sets the offset of the slices from the pie center.
            </summary>
            <remarks>
            The offset is measured as a fraction of the pie radius.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.Reversed">
            <summary>
            Gets or sets a value that determines whether angles are reversed (counter-clockwise).                                            
            </summary>
            <remarks>
            The default value is false, which causes angles to be measured in the clockwise direction.                                         
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.SelectedItemPosition">
            <summary>
            Gets or sets the position of the selected slice.
            </summary>
            <remarks>
            Setting this property to a value other than 'None' causes the pie to rotate when an item is selected.               
            Note that in order to select slices by clicking the chart, you must set the SelectionMode property to "Point".  
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.SelectedItemOffset">
            <summary>
            Gets or sets the offset of the selected slice from the pie center.
            </summary>
            <remarks>
            Offsets are measured as a fraction of the pie radius.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.DataLabel">
            <summary>
            Gets the chart data label.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.Titles">
            <summary>
            Gets or sets the pie titles.
            </summary>
            <remarks>
            The titles are shown above each pie chart when multiple properties are specified in Binding.
            If the Titles is null (default value) the binding property names are used as pie titles.
            </remarks>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.HitTest(System.Drawing.Point)">
            <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <returns>A HitTestInfo object with information about the point.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the SizeChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseClicked event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.Chart.FlexPie.SliceRendering">
            <summary>
            Fires before rendering slice.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexPie.SliceRendered">
            <summary>
            Fires after rendering slice.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexPie.LabelRendering">
            <summary>
            Fires before rendering label.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.FlexPie.LabelRendered">
            <summary>
            Fires after rendering label.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.C1#Chart#IPieChart#OnLabelRendering(C1.Chart.IRenderEngine,System.String@,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called before rendering label. 
            </summary>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Chart.FlexPie.Bind">
            <summary>
            Performs data binding.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.AnimationLoad">
            <summary>
            Gets the load animation options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.AnimationUpdate">
            <summary>
            Gets the update animation options.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.AnimationSettings">
            <summary>
            Gets or sets the animation settings.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexPie.CanShowTooltip">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.RenderSliceEventArgs">
            <summary>
            Represents render event argument class
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.Index">
            <summary>
            Index of data point.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.CenterX">
            <summary>
            Pie center X coordinate.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.CenterY">
            <summary>
            Pie center Y coordinate.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.Radius">
            <summary>
            Pie radius.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.InnerRadius">
            <summary>
            Pie inner radius.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.Angle">
            <summary>
            Slice angle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderSliceEventArgs.Sweep">
            <summary>
            Slice sweep.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.RenderPieDataLabelEventArgs">
            <summary>
            Represents the rendering label event data.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderPieDataLabelEventArgs.Text">
            <summary>
            Data label text. It can be changed in event handler.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.FlexRadar">
            <summary>
            Represents a charting control that renders radar chart and polar chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexRadar.ChartType">
            <summary>
            Gets or sets chart type.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexRadar.StartAngle">
            <summary>
            Gets or set the starting angle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.FlexRadar.Reversed">
            <summary>
            Gets or sets a value indicating direction of plotting.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Histogram">
            <summary>
            Represents a histogram.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:C1.Win.Chart.Histogram.#ctor">
            <summary>
            Creates an instance of Histogram class.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Histogram.GetValues(System.Int32)">
            <summary>
            Gets the array of data values.
            </summary>
            <param name="dim">Dimension.</param>
            <returns>Array of data values.</returns>
        </member>
        <member name="M:C1.Win.Chart.Histogram.OnDataSourceChanged">
            <summary>
            Fires when data source was changed.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Histogram.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Chart.Histogram.HistogramAppearance">
            <summary>
            Gets or sets the Appearance Type.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Histogram.CumulativeMode">
            <summary>
            Gets or sets the cumulative mode state
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Histogram.BinWidth">
            <summary>
            Gets or sets a positive decimal number for the range of a bin.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Histogram.NormalCurve">
            <summary>
            Gets or sets the Normal Curve
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Histogram.FrequencyPolygonStyle">
            <summary>
            Gets or sets the FrequencyPolygonStyle property.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Histogram.GetStyle(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.NormalCurve">
            <summary>
            Specifies the Gaussian data distribution 
            </summary>
        </member>
        <member name="P:C1.Win.Chart.NormalCurve.Visible">
            <summary>
            Gets or sets the visible of Normal Curve
            </summary>
        </member>
        <member name="P:C1.Win.Chart.NormalCurve.LineStyle">
            <summary>
            Gets or sets the Curve line style.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.NormalCurve.PropertyChanged">
            <summary>
            Fires when <see cref = "T:C1.Win.Chart.Histogram"/> property is changed.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.AxisScrollbar">
            <summary>
            Represents an axis scrollbar for FlexChart control with additional visual styles.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.LowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.UpperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from
            the LowerValue or UpperValue properties when the lower
            value thumb or upper value thumb is moved a small distance.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.ScrollButtonsVisible">
            <summary>
            Gets or sets a value that indicates whether scroll buttons should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.AxisScrollbar.Orientation">
            <summary>
            Gets or sets a value indicating the horizontal or vertical orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.Interaction.AxisScrollbar.ValueChanged">
            <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.OnValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.AxisScrollbar.OrientationChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.Chart.Interaction.AxisScrollbar.Orientation"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.OnOrientationChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.OnVisibleChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.#ctor(C1.Win.Chart.Axis)">
            <summary>
            Creates an instance of AxisScrollbar class and attaches it to the specified axis.
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.Remove">
            <summary>
            Removes itself from parent control
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.AxisScrollbar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.AxisScrollbar.ThemeChanged(System.Object)">
            <summary>
            This method is called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.Chart.Interaction.C1RangeSlider">
            <summary>
            Represents a range slider control used in FlexChart's RangeSelector and AxisScrollbar.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.C1RangeSlider._isRangeSelector">
            <summary>
            Determines whether the control is a RangeSelector.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.#ctor">
            <summary>
            Initializes a new instance of the C1RangeSlider class.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1RangeSlider.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.LowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.UpperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the LowerValue or UpperValue properties when the lower value thumb or upper value thumb is moved a small distance.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.LargeChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the LowerValue or UpperValue properties when the lower value thumb or upper value thumb is moved a large distance.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.IsRangeBarVisible">
            <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.Orientation">
            <summary>
            Gets or sets a value indicating the horizontal or vertical orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.IsDirectionReversed">
            <summary>
            Gets or sets the direction of increasing value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.ScrollBehavior">
            <summary>
            Gets or sets how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.LowerThumbPath">
            <summary>
            Gets or sets custom thumb path for lower value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.UpperThumbPath">
            <summary>
            Gets or sets custom thumb path for upper value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.Styles">
            <summary>
            Gets or sets a collection of named Style objects.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection">
            <summary>
            Represents a collection of named Style objects.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection">
            <summary>
            Represents a collection of named Style objects for bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.BackColor">
            <summary>
            Gets or sets background color of bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.BorderColor">
            <summary>
            Gets or sets border color of bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.DisabledBackColor">
            <summary>
            Gets or sets background color of bar if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.DisabledBorderColor">
            <summary>
            Gets or sets border color of bar if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.SelectedAreaColor">
            <summary>
            Gets or sets color of selected area.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection">
            <summary>
            Represents a collection of named Style objects for thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.BackColor">
            <summary>
            Gets or sets background color of thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.BorderColor">
            <summary>
            Gets or sets border color of thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.HotBackColor">
            <summary>
            Gets or sets background color of thumb if mouse is over it.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.HotBorderColor">
            <summary>
            Gets or sets border color of thumb if mouse is over it.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.PressedBackColor">
            <summary>
            Gets or sets background color of thumb when user performs mouse click on it.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.PressedBorderColor">
            <summary>
            Gets or sets border color of thumb when user performs mouse click on it.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.DisabledBackColor">
            <summary>
            Gets or sets background color of thumb if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.DisabledBorderColor">
            <summary>
            Gets or sets border color of thumb if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.CornerRadius">
            <summary>
            Gets or sets corner radius of thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.Padding">
            <summary>
            Gets or sets padding within the thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.BarStyle">
            <summary>
            Gets or sets a collection of named Style objects for bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.C1RangeSlider.RangeSliderStyleCollection.ThumbStyle">
            <summary>
            Gets or sets a collection of named Style objects for thumb.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.Interaction.C1RangeSlider.LowerValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.Chart.Interaction.C1RangeSlider.LowerValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.C1RangeSlider.UpperValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.Chart.Interaction.C1RangeSlider.UpperValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.C1RangeSlider.ValueChanged">
            <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.OnValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.C1RangeSlider.OrientationChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.Chart.Interaction.C1RangeSlider.Orientation"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.OnOrientationChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.C1RangeSlider.DirectionChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.Chart.Interaction.C1RangeSlider.IsDirectionReversed"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.OnDirectionChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.ThemeChanged(System.Object)">
            <summary>
            This method is called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.IsLightColor(System.Drawing.Color)">
            <summary>
            Returns whether the specified color is light.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.Interaction.C1RangeSlider.ChangeColorBrightness(System.Drawing.Color,System.Single)">
            <summary>
            changes color brightness to specified value
            </summary>
            <param name="color">color to change</param>
            <param name="percOfDefault">percentage value to change the brightness (positive value to lighten, negative - darken)</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.Interaction.LineMarker">
            <summary>
            The <see cref="T:C1.Win.Chart.Interaction.LineMarker"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Interaction">
            <summary>
            Gets or sets the interaction mode of the LineMarker.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Lines">
            <summary>
            Gets or sets the visibility of the LineMarker lines.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Alignment">
            <summary>
            Gets or sets the alignment of the LineMarker content.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Content">
            <summary>
            Gets or sets the content function that allows you to customize the text content of the LineMarker.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.LineColor">
            <summary>
            Gets or sets color of lines.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.X">
            <summary>
            Gets the current x-value as chart data coordinates.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Y">
            <summary>
            Gets the current y-value as chart data coordinates.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.DragContent">
            <summary>
            Gets or sets a value indicating whether the content of the marker is draggable when the interaction mode is "Drag."
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.DragLines">
            <summary>
            Gets or sets a value indicating whether the lines are linked when the horizontal or vertical line is dragged when the interaction mode is "Drag."
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.DragThreshold">
            <summary>
            Gets or sets the maximum distance from the horizontal or vertical line that the marker can be dragged.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Visible">
            <summary>
            Gets or sets the visibility of the LineMarker.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.Font">
            <summary>
            Gets or sets font of content.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.BackColor">
            <summary>
            Gets or sets background color of content.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.ForeColor">
            <summary>
            Gets or sets font color of content.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.LineWidth">
            <summary>
            Gets or sets width of lines
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.VerticalPosition">
            <summary>
            Gets or sets line marker vertical position.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.LineMarker.HorizontalPosition">
            <summary>
            Gets or sets line marker horizontal position.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.LineMarker.PositionChangedEventHandler">
            <summary>
            Represents a method that handle a marker position changed event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.Chart.Interaction.PositionChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.LineMarker.PositionChanged">
            <summary>
            Fires when marker position was changed, allows to update content.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.LineMarker.OnPositionChanged(C1.Win.Chart.Interaction.PositionChangedEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.Chart.Interaction.LineMarker.PositionChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.Chart.Interaction.PositionChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.Chart.Interaction.LineMarker.Paint">
            <summary>
            Custom drawing.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.LineMarker.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.LineMarker.#ctor(C1.Win.Chart.FlexChart)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Chart.Interaction.LineMarker"/> class.
            </summary>
            <param name="chart">The parent <see cref="T:C1.Win.Chart.FlexChart"/> object.</param>
        </member>
        <member name="T:C1.Win.Chart.Interaction.LineMarker.WIN32Rect">
            <summary>
            A structure that is to receive the rectangle dimensions, in logical units.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarker.WIN32Rect.left">
            <summary>
            Specifies the X-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarker.WIN32Rect.top">
            <summary>
            Specifies the Y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarker.WIN32Rect.right">
            <summary>
            Specifies the X-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarker.WIN32Rect.bottom">
            <summary>
            Specifies the Y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.LineMarker.GetVisibleRect(System.Windows.Forms.Control)">
            <summary>
            Gets the viewable area of the control.
            </summary>
            <param name="control">The specified control.</param>
            <returns>The rectangle of viewable area of the control.</returns>
        </member>
        <member name="M:C1.Win.Chart.Interaction.LineMarker.Remove">
            <summary>
            Removes itself from parent control
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.LineMarkerInteraction">
            <summary>
            Specifies the interaction mode of the LineMarker.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerInteraction.None">
            <summary>
            No interaction.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerInteraction.Move">
            <summary>
            LineMarker moved by mouse.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerInteraction.Drag">
            <summary>
            LineMarker dragged by mouse.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.LineMarkerAlignment">
            <summary>
            Specifies the alignment mode of the LineMarker content.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.Auto">
            <summary>
            LineMarker content is centered on the rectangle. The default value.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.Right">
            <summary>
            LineMarker content is right aligned in a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.Left">
            <summary>
            LineMarker content is left aligned in a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.Bottom">
            <summary>
            LineMarker content is aligned to the bottom of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.Top">
            <summary>
            LineMarker content is aligned to the top of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.LeftBottom">
            <summary>
            LineMarker content is aligned to the left bottom of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerAlignment.LeftTop">
            <summary>
            LineMarker content is aligned to the left top of the rectangle.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.LineMarkerLines">
            <summary>
            Specifies the visibility of the LineMarker lines.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerLines.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerLines.Horizontal">
            <summary>
            Draw horizontal marker lines.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerLines.Vertical">
            <summary>
            Draw vertical marker lines.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.LineMarkerLines.Both">
            <summary>
            Draw horizontal and vertical marker lines.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.PositionChangedEventArgs">
            <summary>
            Provides data for <see cref="E:C1.Win.Chart.Interaction.LineMarker.PositionChanged"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.PositionChangedEventArgs.X">
            <summary>
            Gets or sets the X coordinate of the mouse position.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Interaction.PositionChangedEventArgs.Y">
            <summary>
            Gets or sets the Y coordinate of the mouse position.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.PositionChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Chart.Interaction.PositionChangedEventArgs"/> class.
            </summary>
            <param name="x">The X coordinate of the mouse position.</param>
            <param name="y">The Y coordinate of the mouse position.</param>
        </member>
        <member name="T:C1.Win.Chart.Interaction.RangeSelector">
            <summary>
            The RangeSelector control displays a range selector that allows the user to choose the range of data on the specified FlexChart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.RangeSelector.#ctor(C1.Win.Chart.FlexChart)">
            <summary>
            Creates an instance of RangeSlider class and attaches it to the specified chart.
            </summary>
            <param name="chart">Chart control.</param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.RangeSelector.OnValueChanged(System.EventArgs)">
            <summary>
            Called when values change.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.RangeSelector.Remove">
            <summary>
            Removes itself from parent control
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.RangeSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Interaction.RangeSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Chart.Interaction.RangeSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Interaction.RangeSliderScrollBehavior">
            <summary>
            Specifies how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.RangeSliderScrollBehavior.None">
            <summary>
            Both thumbs will not move.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.RangeSliderScrollBehavior.Thumb">
            <summary>
            Closest thumb will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.Interaction.RangeSliderScrollBehavior.Range">
            <summary>
            Both thumbs will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Legend">
            <summary>
            Represents chart legend.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.Position">
            <summary>
            Gets or sets the legend position.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.Style">
            <summary>
            Gets the legend style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.GroupHeaderStyle">
            <summary>
            Gets the legend group header style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.TitleStyle">
            <summary>
            Gets the legend title style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.BorderStyle">
            <summary>
            Gets the legend border style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.Title">
            <summary>
            Gets or sets the legend title.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.Orientation">
            <summary>
            Gets or sets the legend orientation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.Reversed">
            <summary>
            Gets or sets the legend reversed order.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.ItemMaxWidth">
            <summary>
            Gets or sets the max width of legend item.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.TextWrapping">
            <summary>
            Gets or sets legend text wrap mode.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Legend.ScrollBars">
            <summary>
            Gets or sets which scroll bars should appear in legend.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.   
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Localization.DesignStrings">
            <summary>
            Static class containing UI strings used in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Localization.DesignStrings.ResourceManager">
            <summary>
            The <see cref="P:C1.Win.Chart.Localization.DesignStrings.ResourceManager"/> object used for lookup resources.
            </summary>
            <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
        </member>
        <member name="P:C1.Win.Chart.Localization.DesignStrings.UICulture">
            <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo"/> object used as fallback culture.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Localization.Strings">
            <summary>
            Static class containing UI strings used in run-time.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.PlotArea">
            <summary>
            Represents plot area in FlexChart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PlotArea.Column">
            <summary>
            Gets or sets the column index of plot area.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PlotArea.Row">
            <summary>
            Gets or sets the row index of plot area.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PlotArea.Name">
            <summary>
            Gets or sets the name of the plot area.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PlotArea.Width">
            <summary>
            Gets or sets the width of plot area.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.PlotArea.Height">
            <summary>
            Gets or sets the height of plot area.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.RadarSeries">
            <summary>
            Represents series in FlexRadar control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RadarSeries.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.RadarSeries.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.RadarSeries.getDefaultData(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Chart.RangedHistogram">
            <summary>
            Represents a histogram.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:C1.Win.Chart.RangedHistogram.#ctor">
            <summary>
            Creates an instance of Histogram class.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.RangedHistogram.GetValues(System.Int32)">
            <summary>
            Gets the array of data values.
            </summary>
            <param name="dim">Dimension.</param>
            <returns>Array of data values.</returns>
        </member>
        <member name="M:C1.Win.Chart.RangedHistogram.OnDataSourceChanged">
            <summary>
            Fires when data source was changed.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.RangedHistogram.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.RangedHistogram.GetXLabels">
            <summary>
            Gets the X axis labels.
            </summary>
            <returns>The array of X axis label strings.</returns>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.BinMode">
            <summary>
            Gets or sets the _mode of histogram bin.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.BinWidth">
            <summary>
            Gets or sets a positive decimal number for the range of a bin.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.OverflowBin">
            <summary>
            Gets or sets a value to create a bin for all values above it.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.UnderflowBin">
            <summary>
            Gets or sets a value to create a bin for all values below or equal to it.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.NumberOfBins">
            <summary>
            Gets or sets the number of bins for the histogram, including the overflow and underflow bins.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.ShowOverflowBin">
            <summary>
            Gets or sets whether the histogram shows the overflow bin.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.ShowUnderflowBin">
            <summary>
            Gets or sets whether the histogram shows the underflow bin.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RangedHistogram.SortDescending">
            <summary>
            Gets or sets whether the ranged histogram sort descending.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.SeriesCollection">
            <summary>
            The SeriesCollection class.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.SeriesCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.SeriesCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Chart.SeriesCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Chart.SeriesCollection.List">
            <summary>
            The series collection <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.BindingMode">
            <summary>
            Specifies binding mode.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.BindingMode.NotSet">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.BindingMode.CurrencyManager">
            <summary>
            Uses currency manager.
            </summary>
        </member>
        <member name="F:C1.Win.Chart.BindingMode.Direct">
            <summary>
            Direct binding.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Series">
            <summary>
            Represents a series of data points to display in the chart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.#ctor">
            <summary>
            Creates an instance of series class.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.Finalize">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:C1.Win.Chart.Series.Binding">
            <summary>
            Gets or sets the name of the property that contains Y values for the series.
            </summary>
            <remarks>
            For complex chart types it may contain several names separated by commas.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.Series.BindingX">
            <summary>
            Gets or sets the name of the property that contains X values for the series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.DataMember">
            <summary>
            Gets or sets the name of the DataMember, if any, for the DataSource.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.DataSource">
            <summary>
            Gets or sets the collection of objects that contains the series data.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.DataLabel">
            <summary>
            Gets or sets the series data label.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.OnDataSourceChanged">
            <summary>
            Called when data source was changed.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.BindingMode">
            <summary>
            Gets or sets the binding mode.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.Style">
            <summary>
            Gets or sets the series style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.SymbolStyle">
            <summary>
            Gets or sets the series symbol style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.AltStyle">
            <summary>
            Gets or sets the series alternatve style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.AxisX">
            <summary>
            Gets or sets the series x-axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.AxisY">
            <summary>
            Gets or sets the series y-axis.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.Tooltip">
            <summary>
            Gets or sets the tooltip template for the series.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.Series.SymbolRendering">
            <summary>
            Fires before rendering symbol.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.Series.SymbolRendered">
            <summary>
            Fires after rendering symbol.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.GetStyle(System.String)">
            <summary>
            Gets the style by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.Series.SetStyle(C1.Chart._Style,System.String)">
            <summary>
            Sets the series style.
            </summary>
            <param name="style">Style</param>
            <param name="name">Name of the style.</param>
        </member>
        <member name="M:C1.Win.Chart.Series.Invalidate">
            <summary>
            Invalidates the series.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.ActualBinding">
            <summary>
            Gets actual binding.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.ActualBindingX">
            <summary>
            Gets actual x-binding.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.ActualDataMember">
            <summary>
            Gets actual data member.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.ActualItemsSource">
            <summary>
            Gets actual items source.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Series.Chart">
            <summary>
            Gets the parent chart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.GetDataType(System.Int32)">
            <summary>
            Gets the data type.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.Series.getDefaultData(System.Int32)">
            <summary>
            Manufacture some consistent data for design time display to allow series styling.
            </summary>
            <param name="dim">Specifies the dimension of data to retrieve (0=Y data, 1=X data, 2=Y1 data, ...).</param>
            <returns>The point data array for the specified coordinate dimension.</returns>
        </member>
        <member name="M:C1.Win.Chart.Series.GetValues(System.Int32)">
            <summary>
            Gets the point data array for the specified coordinate dimension.
            </summary>
            <param name="dim">Specifies the dimension of data to retrieve (0=Y data, 1=X data, 2=Y1 data, ...)</param>
            <returns>The point data array for the specified coordinate dimension</returns>
        </member>
        <member name="M:C1.Win.Chart.Series.GetCount">
            <summary>
            Gets the binding data count.
            </summary>
            <returns>The binding data count.</returns>
        </member>
        <member name="M:C1.Win.Chart.Series.LoadBoundData">
            <summary>
            Forces bound data to be loaded into internal chart arrays.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.Rebind">
            <summary>
            Forces all data in ItemsSource to be evaluated and redraw the chart.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.SetData(System.Double[],System.Double[][])">
            <summary>
            Sets the point data to be charted.
            </summary>
            <param name="XValues">Specifies the array of XValues.</param>
            <param name="YValues">Specifies the array(s) of YValues.</param>
        </member>
        <member name="M:C1.Win.Chart.Series.ClearData">
            <summary>
            Removes all point data from the series added with SetData.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.GetItem(System.Int32)">
            <summary>
            Gets the data item.
            </summary>
            <param name="i">Index of data point.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Chart.Series.HasCustomSymbol">
            <summary>
            Whether the custom symbol rendering is used.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.OnSymbolRendering(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called when symbol is rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>Whether to perform default symbol rendering.</returns>
        </member>
        <member name="M:C1.Win.Chart.Series.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called after symbol was rendered.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">The X coordinate in pixels.</param>
            <param name="y">The Y coordinate in pixels.</param>
        </member>
        <member name="M:C1.Win.Chart.Series.OnVisibilityChanged">
            <summary>
            Called when visibility changes.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Series.RebindCurrencyMananger">
            <summary>
            Rebind currency mananger data.
            </summary>
            <returns>True if the data was successfully re-binded, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.Chart.Series.GetValidPropertyDescriptors">
            <summary>
            Gets the valid <see cref="T:System.ComponentModel.PropertyDescriptor"/> of class.
            </summary>
            <returns>The array of the class <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects.</returns>
        </member>
        <member name="T:C1.Win.Chart.SeriesEventArgs">
            <summary>
            Provides arguments for series-related event.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.SeriesEventArgs.Series">
            <summary>
            Gets the chart series.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.Sunburst">
            <summary>
            Represents a Sunburst chart control.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Sunburst.Drilldown">
            <summary>
            Gets or sets whether to add or remove the mouse click event handler.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Sunburst.ChildItemsPath">
            <summary>
            Gets or sets the name of the property (or properties) used to generate child items in hierarchical data.
            Set this property to a string to specify the name of the property that contains an item's child items (e.g. <code>Items</code>).
            If items at different levels child items with different names, then set this property to an array containing the names of the properties.
            that contains child items at each level.
            (e.g. <code>"accounts,checks,earnings"</code>)
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Sunburst.Bind">
            <summary>
            Performs data binding.
            </summary>
        </member>
        <member name="T:C1.Win.Chart.ChartTitle">
            <summary>
            Represents chart title(header or footer).
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartTitle.Content">
            <summary>
            Gets or sets the title content.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartTitle.Border">
            <summary>
            Gets or sets a value indicating whether the title has border.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartTitle.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the title.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartTitle.Style">
            <summary>
            Gets the title style.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartTitle.BorderStyle">
            <summary>
            Gets the title border style.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.ChartTitle.GetRect">
            <summary>
            Gets the chart header rectangle area.
            </summary>
            <returns>The chart header rectangle area.</returns>
        </member>
        <member name="T:C1.Win.Chart.ChartToolTip">
            <summary>
            Represents chart tootip.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.ChartToolTip.Content">
            <summary>
            Gets or sets the content of chart tooltip. 
            </summary>
        </member>
        <member name="T:C1.Win.Chart.TreeMap">
            <summary>
            Represents a TreeMap chart control.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.TreeMap.#ctor">
            <summary>
            Creates an instance of TreeMap class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.Binding">
            <summary>
            Gets or sets the name of the property of the data item that contains the chart value.
            </summary>
            <remarks>
            The binding property is used to calculate the size of the node as compared to other node values.
            The property should contain numeric data.
            </remarks>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.BindingName">
            <summary>
            Gets or sets the name of the property that contains the name of the data item.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.ChildItemsPath">
            <summary>
            Gets or sets the name of the property of collection that contains child items.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.DataSource">
            <summary>
            Gets or sets the collection of objects that contains the data for tree map chart.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.DataLabel">
            <summary>
            Gets the data label for data items. 
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.SelectedItem">
            <summary>
            Gets or sets the selected data item.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TreeMap.MaxDepth">
            <summary>
            Gets or sets the maximum number of displayed node levels.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.TreeMap.NodeRendering">
            <summary>
            Fires before rendering node.
            </summary>
        </member>
        <member name="E:C1.Win.Chart.TreeMap.NodeRendered">
            <summary>
            Fires after rendering node.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.TreeMap.HitTest(System.Drawing.Point)">
            <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
            <param name="pt">Point in control coordinates.</param>
            <returns>A HitTestInfo object with information about the point.</returns>
        </member>
        <member name="M:C1.Win.Chart.TreeMap.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:C1.Win.Chart.TreeMap.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the SizeChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.TreeMap.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseClicked event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.Chart.TreeMap.GetContent(C1.Chart.HitTestInfo,System.String)">
            <summary>
            Gets the content by specified template.
            </summary>
            <param name="hti"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.RenderNodeEventArgs">
            <summary>
            Render node event arguments.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.X">
            <summary>
            Gets the top let x-coordinate of the node rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.Y">
            <summary>
            Gets the top let y-coordinate of the node rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.Width">
            <summary>
            Gets the width of the node rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.Height">
            <summary>
            Gets the height of the node rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.Item">
            <summary>
            Gets the data item of the node.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.Depth">
            <summary>
            Gets the depth of the node
            </summary>
        </member>
        <member name="P:C1.Win.Chart.RenderNodeEventArgs.IsTitle">
            <summary>
            Gets if the node is a Title node or not
            </summary>
        </member>
        <member name="T:C1.Win.Chart.TrendLine">
            <summary>
            Represents a trend line for FlexChart and FinancialChart.
            </summary>
            <remarks>
            A trendline is a line superimposed on a chart revealing the overall direction
            of data.
            You may define a different fit type for each @see:TrendLine object that you 
            add to the @see:FlexChart series collection by setting the fitType property.
            </remarks>
        </member>
        <member name="M:C1.Win.Chart.TrendLine.#ctor">
            <summary>
            Creates an instance of TrendLine class.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TrendLine.FitType">
            <summary>
            Gets or sets the fit type of trend line.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TrendLine.Order">
            <summary>
            Gets or sets the order of trend line. The order defines number of
            terms in polynom equation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TrendLine.SampleCount">
            <summary>
            Gets or sets the sample count for function calculation.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TrendLine.MinX">
            <summary>
            Gets or sets the minimal x-value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TrendLine.MaxX">
            <summary>
            Gets or sets the maximal x-value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.TrendLine.Coefficients">
            <summary>
            Gets the coefficients of equation.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.TrendLine.GetValues(System.Int32)">
            <summary>
            Gets the array of data values.
            </summary>
            <param name="dim">Dimension.</param>
            <returns>Array of data values.</returns>
        </member>
        <member name="M:C1.Win.Chart.TrendLine.OnDataSourceChanged">
            <summary>
            Fires when data source was changed.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.TrendLine.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Chart.Waterfall">
            <summary>
            Represents a Waterfall series for FlexChart.
            </summary>
            <remarks>
            The <see cref="T:C1.Win.Chart.Waterfall"/> series is normally used to demonstrate 
            how the starting position either increases or decreases through a series of changes.
            </remarks>
        </member>
        <member name="M:C1.Win.Chart.Waterfall.#ctor">
            <summary>
            Create an instance of Waterfall.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.ConnectorLines">
            <summary>
            Gets or sets a value that determines whether to show connector lines.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.IntermediateTotalLabels">
            <summary>
            Gets or sets the list of the text labels of the intermediate total bars.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.IntermediateTotalPositions">
            <summary>
            Gets or sets the list of the positions of the intermediate total bars.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.RelativeData">
            <summary>
            Gets or sets a value that determines whether the given data is relative.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.ShowIntermediateTotal">
            <summary>
            Gets or sets a value that determines whether to show the intermediate total bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.ShowTotal">
            <summary>
            Gets or sets a value that determines whether show total bar.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.Start">
            <summary>
            Gets or sets the starting data value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.StartLabel">
            <summary>
            Gets or sets the text label for starting data point.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.TotalLabel">
            <summary>
            Gets or sets the text label for data point representing total value.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.StartStyle">
            <summary>
            Gets the style for the data points representing starting values.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.TotalStyle">
            <summary>
            Gets the style for the data points representing total values.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.RisingStyle">
            <summary>
            Gets the style for the data points representing rising values.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.FallingStyle">
            <summary>
            Gets the style for the data points representing falling values.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.IntermediateTotalStyle">
            <summary>
            Gets the style for the data points representing intermediate total values.
            </summary>
        </member>
        <member name="P:C1.Win.Chart.Waterfall.ConnectorLineStyle">
            <summary>
            Gets the style of connector lines.
            </summary>
        </member>
        <member name="M:C1.Win.Chart.Waterfall.GetValues(System.Int32)">
            <summary>
            Gets the data values.
            </summary>
            <param name="dim">Specifies the dimension of data to retrieve (0=Y data, 1=X data, 2=Y1 data, ...).</param>
            <returns>The points data array for the specified coordinate dimension.</returns>
        </member>
        <member name="M:C1.Win.Chart.Waterfall.GetStyle(System.String)">
            <summary>
            Gets the style by specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Chart.Waterfall.SetStyle(C1.Chart._Style,System.String)">
            <summary>
            Sets the named style.
            </summary>
            <param name="style">Style.</param>
            <param name="name">The name of style.</param>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AllowedCallerAttribute">
            <summary>
            Attribute used to specify assemblies that can use this product without a license.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerAsmName">
            <summary>
            For .NET 4.0 version only, used for designer assembly names.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationTransformEventArgs">
            <summary>
            Specifies arguments for AnimationTransform event.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.State">
            <summary>
            Gets the animation state.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.AxisType">
            <summary>
            Gets the axis type.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.End">
            <summary>
            Gets the ending position.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Position">
            <summary>
            Gets the animation position (from 0.0 to 1.0).
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Series">
            <summary>
            Gets the current series.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.PointIndex">
            <summary>
            Get the current point index.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Start">
            <summary>
            Gets the startig position.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Cancel">
            <summary>
            Whether to cancel the default animation.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Value">
            <summary>
            Gets or sets the value in data coordinates.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationType">
            <summary>
            Specifies animation type.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationType.All">
            <summary>
            All series are animated at the same time.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationType.Series">
            <summary>
            Series by series animation.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationType.Points">
            <summary>
            Point by point animation.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationDirection">
            <summary>
            Specifies animation direction.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationDirection.X">
            <summary>
            X (horizontal) direction.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationDirection.Y">
            <summary>
            Y (vertical) direction.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationDirection.XY">
            <summary>
            Both (X and Y) directions. 
            </summary>
        </member>
        <member name="T:C1.Chart.SliceAttribute">
            <summary>
            Specifies slice attribute for FlexPie animation.
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.None">
            <summary>
            No attributes (animation is disabled).
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.Radius">
            <summary>
            Radius or pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.Sweep">
            <summary>
            Sweep of  pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.Angle">
            <summary>
            Angle of pie slice.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationState">
            <summary>
            Specifies animation state.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationState.Load">
            <summary>
            Animation when loading data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationState.Update">
            <summary>
            Animation when updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationState.Delete">
            <summary>
            Animation when deleting data series.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationSettings">
            <summary>
            Animation settings.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.None">
            <summary>
            Animation disabled.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.Load">
            <summary>
            Shows animation during loading data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.Update">
            <summary>
            Shows animation during updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.AxesLoad">
            <summary>
            Animate axes during loading data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.AxesUpdate">
            <summary>
            Animate axes during updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.Axes">
            <summary>
            Animate axes during loading or updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.All">
            <summary>
            Show all animations.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationOptions">
            <summary>
            Stores animation options.
            </summary>
        </member>
        <member name="E:C1.Chart.AnimationOptions.PropertyChanged">
            <summary>
            Fires when property value was changed.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.FPS">
            <summary>
            Gets or sets animation FPS (frame per second).
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Duration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Easing">
            <summary>
            Gets or sets the animation easing.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Type">
            <summary>
            Gets or sets the animation type.
            </summary>
        </member>
        <member name="M:C1.Chart.AnimationOptions.OnPropertyChanged(System.String)">
            <summary>
            Called when property was changed.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="T:C1.Chart.AnimationLoadOptions">
            <summary>
            Stores load animation option 
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationLoadOptions.Direction">
            <summary>
            Gets or sets the animation direction.
            </summary>
        </member>
        <member name="T:C1.Chart.PieAnimationOptions">
            <summary>
            Stores animation options for FlexPie control.
            </summary>
        </member>
        <member name="P:C1.Chart.PieAnimationOptions.Attributes">
            <summary>
            Gets or sets the slice attributes for animation.
            </summary>
        </member>
        <member name="T:C1.Chart.Easing">
            <summary>
            Specifies easing function. Sets the timing function for the animation.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.Linear">
            <summary>
            Same speed from start to finish.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.Swing">
            <summary>
            It provides move or cause to move back and forth or from side to side while suspended or on an axis to an element.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ExpIn">
            <summary>
            The animation starts slowly, accelerates towards the end using the formula f(t) = Math.Pow(2, 10 * t - 10).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ExpOut">
            <summary>
            The animation starts quickly and slows down towards the end using the formula f(t) = 1 - Math.Pow(2, -10 * t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ExpInOut">
            <summary>
            The animation starts and ends slowly by exponential function.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BackIn">
            <summary>
            The animation goes past the start and then accelerates as it reaches the end.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BackOut">
            <summary>
            The animation starts fast, then slows and goes past the end where s = 1.70158, using the formula f(t) = --t * t * ((s + 1) * t + s) + 1.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BackInOut">
            <summary>
            Starts the animation slowly as it overshoots in the start, then accelerates quickly before it slows and overshoots the end.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BounceIn">
            <summary>
            The bouncing animation, when it starts slowly, accelerates towards the end using the formula f(t) = 1 - BounceOut(1 - t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BounceOut">
            <summary>
            The bouncing animation, when it starts quickly and slows down towards the end.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BounceInOut">
            <summary>
            The bouncing animation, when it starts and ends slowly.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CircleIn">
            <summary>
            The animation uses an easing function that creates an animation that accelerates using the formula f(t) = 1 - Math.Sqrt(1 - t * t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CircleOut">
            <summary>
            The animation uses an easing function that creates an animation that decelerates using the formula f(t) = Math.Sqrt(1 - --t * t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CircleInOut">
            <summary>
            The animation uses an easing function, which creates a slow start and end for the animation.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CubicIn">
            <summary>
            Represents an easing function that creates an animation that accelerates using the formula f(t) = t * t * t.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CubicOut">
            <summary>
            Represents an easing function that creates an animation that decelerates using the formula f(t) = --t * t * t + 1.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CubicInOut">
            <summary>
            Represents an easing function that creates an animation that decelerates using the formula f(t) = ((t *= 2) &lt;= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ElasticIn">
            <summary>
            Represents an Ease function that creates an accelerating animation that resembles a spring that vibrates back and forth until it stops.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ElasticOut">
            <summary>
            Represents a ease function that creates a spring-like slowing animation that oscillates back and forth until it stops.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ElasticInOut">
            <summary>
            Represents a decelerate function that creates an animation that accelerates and decelerates, and resembles a spring that oscillates back and forth until it stops.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.AnnotationAttachment">
            <summary>
            Specifies the attachment of the annotation.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.DataIndex">
            <summary>
            Coordinates of the annotation point are defined by the data series index and 
            the data point index.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.DataCoordinate">
            <summary>
            Annotation point is specified in data coordinates.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.Relative">
            <summary>
            Annotation point is specified as a relative position inside the control where
            (0,0) is the top left corner and (1,1) is the bottom right corner.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.Absolute">
            <summary>
            The annotation point is specified in control's pixel coordinates.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.AnnotationPosition">
            <summary>
            Specifies the position of the annotation.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Center">
            <summary>
            The annotation appears at the Center of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Top">
            <summary>
            The annotation appears at the Top of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Bottom">
            <summary>
            The annotation appears at the Bottom of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Left">
            <summary>
            The annotation appears at the Left of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Right">
            <summary>
            The annotation appears at the Right of the target point.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IAnnotationBase">
            <summary>
            IBaseAnnotation interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Attachment">
            <summary>
            Gets or sets the attachment of the annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Position">
            <summary>
            Gets or sets the position of annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Location">
            <summary>
            Gets or sets the location of annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.PointIndex">
            <summary>
            Gets or sets the data point index of the annotation.
            Applies only when the <see cref="P:C1.Chart.Annotation.IAnnotationBase.Attachment"/> property is set to DataIndex.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.SeriesIndex">
            <summary>
            Gets or sets the data series index of the annotation.
            Applies only when the <see cref="P:C1.Chart.Annotation.IAnnotationBase.Attachment"/> is set to DataIndex.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.TooltipText">
            <summary>
            Gets or sets the tooltip of the annotation.
            </summary>
        </member>
        <member name="M:C1.Chart.Annotation.IAnnotationBase.GetSize">
            <summary>
            Gets the size of the annotation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Bounds">
            <summary>
            Gets the bounding box in pixel coordinates.
            </summary>
        </member>
        <member name="M:C1.Chart.Annotation.IAnnotationBase.Distance(System.Double,System.Double)">
            <summary>
            Returns distance from annotation to the specifies point.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>The distance from annotation to the specifies point.</returns>
        </member>
        <member name="T:C1.Chart.Annotation.IAnnotationLayer">
            <summary>
            Annotation layer interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationLayer.Annotations">
            <summary>
            Gets the annotation collection.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.ICircle">
            <summary>
            ICircle interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ICircle.Radius">
            <summary>
            Gets or sets the radius of circle annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IEllipse">
            <summary>
            IEllipse interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IEllipse.Width">
            <summary>
            Gets or sets the width of ellipse annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IEllipse.Height">
            <summary>
            Gets or sets the height of ellipse annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IImage">
            <summary>
            IImage interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IImage.SourceImage">
            <summary>
            Gets or sets the source of image annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IImage.Width">
            <summary>
            Gets or sets the width of image annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IImage.Height">
            <summary>
            Gets or sets the height of image annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.ILine">
            <summary>
            ILine interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ILine.Start">
            <summary>
            Gets or sets the start point of line annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ILine.End">
            <summary>
            Gets or sets the end point of line annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IPolygon">
            <summary>
            IPolygon interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IPolygon.Points">
            <summary>
            Gets the collection of points of the polygon annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IPolygon.ContentCenter">
            <summary>
            Gets or sets a location where the center of the content should be.
            If this is null as its default value, will automatically locate the content.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IRectangle">
            <summary>
            IRectangle interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IRectangle.Width">
            <summary>
            Gets or sets the width of rectangle annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IRectangle.Height">
            <summary>
            Gets or sets the height of rectangle annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IShape">
            <summary>
            IShape interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IShape.Content">
            <summary>
            Gets or sets the text of shape annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.ISquare">
            <summary>
            ISquare interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ISquare.Length">
            <summary>
            Gets or sets the length of the square annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IText">
            <summary>
            IText interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IText.Content">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.DateTimeGroupProvider">
            <summary>
            Provides basic groups for DateTime values that extend beyond one month.  Although
            default groups are provided, explicit selection of the groups and format are possible.
            </summary>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.#ctor">
            <summary>
            This contstructor allows automatic generation of groups based upon the axis range.
            </summary>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.#ctor(C1.Chart.IAxis)">
            <summary>
            This constructor allows automatic generation of groups based upon the axis range
            and the axis MajorUnit value.
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.GetLevels(C1.Chart.IRange)">
            <summary>
            As the first method called by FlexChart, this method provides the number of group
            levels provided by the class.
            </summary>
            <param name="range">
            Specifies the full range of the axis data.
            </param>
            <returns>Specifies number of group levels.</returns>
        </member>
        <member name="P:C1.Chart.DateTimeGroupProvider.GroupTypes">
            <summary>
            Gets the collection of group specifiers using the TimeUnits enumeration.  The index of each
            specifier indicates (level-1).  Specifiers modified using the collection Add, Insert and Remove
            methods of the collection.  If no values are specified, values are automatically selected
            based on the range.
            </summary>
        </member>
        <member name="P:C1.Chart.DateTimeGroupProvider.GroupFormats">
            <summary>
            Get a dictionary of formats keyed by the TimeUnits enum of each group.  Each value specifies
            the string.Format() of the numeric value followed by the year, with the exception of TimeUnits.Month
            for which the format specifies either all "M" characters (for the month name) or the numeric
            value of the month and year. Note if {1} is not included in the format, the year is not included.
            
            Default formats are Day="{0}", Week="Week {0}, Month="MMM", Quarter="Q{0}", "Year="{0}".
            </summary>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.GetRanges(C1.Chart.IRange,System.Int32)">
            <summary>
            Returns a list of IRange values for the level specified the by the appropriate
            entry in the GroupTypes collection.
            </summary>
            <param name="range">
            Specifies the full range of the axis.
            </param>
            <param name="level">
            Specifies the level of IRange values for the level specified by the appropriate
            entry in the GroupTypes collection.
            </param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.BaseRenderEventArgs">
            <summary>
            Base render event arguments.
            </summary>
        </member>
        <member name="P:C1.Chart.BaseRenderEventArgs.Engine">
            <summary>
            Gets the rendering engine.
            </summary>
        </member>
        <member name="T:C1.Chart.IDataLabel">
            <summary>
            IDataLabel interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Content">
            <summary>
            Gets or sets the label content.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Position">
            <summary>
            Gets or sets the label position.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Border">
            <summary>
            Gets or sets a value indicating whether data labels have border.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.ConnectingLine">
            <summary>
            Gets or sets a value indicating whether data labels have connecting lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Offset">
            <summary>
            Gets or sets the offset of data label.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Overlapping">
            <summary>
            Gets or sets overlapping.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.OverlappingOptions">
            <summary>
            Gets or sets overlapping options.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.ContentOptions">
            <summary>
            Gets or sets content options.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Angle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.MaxWidth">
            <summary>
            Gets or sets the maximum width.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.MaxLines">
            <summary>
            Gets or sets the maximum number or lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.MaxAutoLabels">
            <summary>
            Gets or sets the maximum number of automatic labels.
            </summary>
        </member>
        <member name="T:C1.Chart.IPieDataLabel">
            <summary>
            IPieDataLabel interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Content">
            <summary>
            Gets or sets the label content.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Position">
            <summary>
            Gets or sets the label position.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Border">
            <summary>
            Gets or sets a value indicating whether data labels have border.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.ConnectingLine">
            <summary>
            Gets or sets a value indicating whether data labels have connecting lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Offset">
            <summary>
            Gets or sets the offset of data label.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Overlapping">
            <summary>
            Gets or sets the overlapping.
            </summary>
        </member>
        <member name="T:C1.Chart.SeriesBase">
            <summary>
            Base class for data series.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesBase._axisX">
            <summary>
            X-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesBase._axisY">
            <summary>
            Y-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesBase._binding">
            <summary>
            Binding property name.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesBase._bindingX">
            <summary>
            X-binding property name.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesBase._itemsSource">
            <summary>
            Items source.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.ChartType">
            <summary>
            Gets or sets the series chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.Visibility">
            <summary>
            Gets or sets the series visibility.
            </summary>
        </member>
        <member name="M:C1.Chart.SeriesBase.OnVisibilityChanged">
            <summary>
            Called when visibility changes.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.Name">
            <summary>
            Gets or sets the series display name.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.SymbolSize">
            <summary>
            Gets or sets the size(in pixels) of the symbols used to render this Series.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.SymbolMarker">
            <summary>
            Gets or sets the shape of marker to use for each data point in the series.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.StackingGroup">
            <summary>
            Gets or sets the group index for series, only effect in bar and column chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.SeriesBase.LegendGroup">
            <summary>
            Gets or sets the legend group title in which the series should be included.
            </summary>
        </member>
        <member name="M:C1.Chart.SeriesBase.GetStyle(System.String)">
            <summary>
            Gets the style by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.SeriesBase.GetItem(System.Int32)">
            <summary>
            Gets the data item.
            </summary>
            <param name="i">Index of data point.</param>
            <returns>The data item.</returns>
        </member>
        <member name="M:C1.Chart.SeriesBase.GetValues(System.Int32)">
            <summary>
            Gets the data values.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.SeriesBase.GetDataType(System.Int32)">
            <summary>
            Gets the data type.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.SeriesBase.HasCustomSymbol">
            <summary>
            Whether the custom symbol rendering is used.
            </summary>
        </member>
        <member name="M:C1.Chart.SeriesBase.OnSymbolRendering(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called when symbol is rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>Whether to perform default symbol rendering.</returns>
        </member>
        <member name="M:C1.Chart.SeriesBase.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called after symbol was rendered.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
        </member>
        <member name="M:C1.Chart.SeriesBase.OnRendering(C1.Chart.IRenderEngine)">
            <summary>
            Called when series is rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.SeriesBase.OnRendered(C1.Chart.IRenderEngine)">
            <summary>
            Called after series was rendered.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.SeriesBase.Invalidate">
            <summary>
            Invalidates series.
            </summary>
        </member>
        <member name="M:C1.Chart.SeriesBase.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.SeriesBase.SetStyle(C1.Chart._Style,System.String)">
            <summary>
            Sets the series style.
            </summary>
            <param name="style">Style</param>
            <param name="name">Name of the style.</param>
        </member>
        <member name="M:C1.Chart.SeriesBase.GetDataRect(C1.Chart._Rect)">
            <summary>
            Gets series bounding rectangle in data coordinates.
            </summary>
            <param name="currentRect">Current bounding rectangle.</param>
            <returns>Rectangle in data coordinates.</returns>
        </member>
        <member name="T:C1.Chart.ChartType">
            <summary>
            Specifies the chart type.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Column">
            <summary>
            Shows vertical bars.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Bar">
            <summary>
            Shows horizontal bars.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Line">
            <summary>
            Shows trends over a period of time or across categories.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Scatter">
            <summary>
            Shows patterns within the data using X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.LineSymbols">
            <summary>
            Shows line chart with a symbol on each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Area">
            <summary>
            Shows line chart with the area below the line filled with color.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Spline">
            <summary>
            Displays line chart that plots curves rather than angled lines through the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.SplineSymbols">
            <summary>
            Displays spline chart with symbols on each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.SplineArea">
            <summary>
            Displays spline chart with the area below the line filled with color.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Bubble">
            <summary>
            Shows Scatter chart with a third data value that determines the size of the symbol.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Candlestick">
            <summary>
            Presents items with high, low, open, and close values.
            The size of the wick line is determined by the High and Low values, 
            while the size of the bar is determined by the Open and Close values. 
            The bar is displayed using different colors, depending on 
            whether the close value is higher or lower than the open value.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.HighLowOpenClose">
            <summary>
            Displays the same information as a candlestick chart, except that opening 
            values are displayed using lines to the left, while lines to the right
            indicate closing values.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Funnel">
            <summary>
            Displays funnel chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Histogram">
            <summary>
            Displays histogram chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.RangedHistogram">
            <summary>
            Displays a ranged histogram chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Step">
            <summary>
            Step chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.StepSymbols">
            <summary>
            Step chart with symbols.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.StepArea">
            <summary>
            Step area chart.
            </summary>
        </member>
        <member name="T:C1.Chart.Stacking">
            <summary>
            Specifies whether and how to stack the chart's data values.
            </summary>
        </member>
        <member name="F:C1.Chart.Stacking.None">
            <summary>
            No stacking. Each series object is plotted independently.
            </summary>
        </member>
        <member name="F:C1.Chart.Stacking.Stacked">
            <summary>
            Stacked charts show how each value contributes to the total.
            </summary>
        </member>
        <member name="F:C1.Chart.Stacking.Stacked100pc">
            <summary>
            100% stacked charts show how each value contributes to the total with the relative size of
            each series representing its contribution to the total.
            </summary>
        </member>
        <member name="T:C1.Chart.SeriesVisibility">
            <summary>
            Specifies whether and where the Series is visible.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Visible">
            <summary>
            The series is visible on the plot and in the legend.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Plot">
            <summary>
            The series is visible only on the plot.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Legend">
            <summary>
            The series is visible only in the legend.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Hidden">
            <summary>
            The series is hidden.
            </summary>
        </member>
        <member name="T:C1.Chart.DataType">
            <summary>
            Specifies chart data type
            </summary>
        </member>
        <member name="F:C1.Chart.DataType.Number">
            <summary>
            Numeric data.
            </summary>
        </member>
        <member name="F:C1.Chart.DataType.Date">
            <summary>
            Date or time data.
            </summary>
        </member>
        <member name="T:C1.Chart.ChartElement">
            <summary>
            Specifies chart element that may be found by the HitTest method.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.PlotArea">
            <summary>
            The area within the axes.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.AxisX">
            <summary>
            X-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.AxisY">
            <summary>
            Y-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.ChartArea">
            <summary>
            The area within the control but outside the axes.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Legend">
            <summary>
            The chart legend.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Header">
            <summary>
            The chart header.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Footer">
            <summary>
            The chart footer.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Series">
            <summary>
            A chart series.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.SeriesSymbol">
            <summary>
            A chart series symbol.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.DataLabel">
            <summary>
            A data label.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.None">
            <summary>
            No chart element.
            </summary>
        </member>
        <member name="T:C1.Chart.LabelPosition">
            <summary>
            Specifies chart data label position.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.None">
            <summary>
            No data labels appear.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Left">
            <summary>
            The labels appear to the left of the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Top">
            <summary>
            The labels appear above the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Right">
            <summary>
            The labels appear to the right of the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Bottom">
            <summary>
            The labels appear below the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Center">
            <summary>
            The labels appear centered on the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Auto">
            <summary>
            Automatic label postion. 
            </summary>
        </member>
        <member name="T:C1.Chart.PieLabelPosition">
            <summary>
            Specifies the position of data labels on the pie chart.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.None">
            <summary>
            No data labels.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Inside">
            <summary>
            The label appears inside the pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Center">
            <summary>
            The item appears at the center of the pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Outside">
            <summary>
            The item appears outside the pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Radial">
            <summary>
            The item appears inside the pie slice and depends of its angle.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Circular">
            <summary>
            The item appears inside the pie slice and has circular direction.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Auto">
            <summary>
            Automatic label position.
            </summary>
        </member>
        <member name="T:C1.Chart.PieLabelOverlapping">
            <summary>
            Specifies how to handle pie data labels that are outside the corresponding pie segment.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelOverlapping.Default">
            <summary>
            Show overlapped labels. 
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelOverlapping.Trim">
            <summary>
            Trim label content if its width is larger than the corresponding pie segment.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelOverlapping.Hide">
            <summary>
            Hide label if its content is larger than the corresponding pie segment.
            </summary>
        </member>
        <member name="T:C1.Chart.LabelOverlapping">
            <summary>
            Specifies how to handle overlapped labels.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlapping.Hide">
            <summary>
            Hide overlapped labels.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlapping.Show">
            <summary>
            Show overlapped labels.
            </summary>
        </member>
        <member name="T:C1.Chart.ContentOptions">
            <summary>
            Specifies content options.
            </summary>
        </member>
        <member name="F:C1.Chart.ContentOptions.None">
            <summary>
            All content is shown.
            </summary>
        </member>
        <member name="F:C1.Chart.ContentOptions.Trim">
            <summary>
            Trim content if its width is large than MaxWidth property.
            </summary>
        </member>
        <member name="F:C1.Chart.ContentOptions.WordWrap">
            <summary>
            Wrap content if its width is large than MaxWidth property.
            </summary>
        </member>
        <member name="T:C1.Chart.LabelOverlappingOptions">
            <summary>
            Specifies label overlapping options.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlappingOptions.None">
            <summary>
            No overlapping allowed.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlappingOptions.OverlapDataPoints">
            <summary>
            Allow overlapping with data points
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlappingOptions.OutsidePlotArea">
            <summary>
            Allow labels outside plot area.
            </summary>
        </member>
        <member name="T:C1.Chart.ChartSelectionMode">
            <summary>
            Available selection modes.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartSelectionMode.None">
            <summary>
            Selection is disabled.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartSelectionMode.Series">
            <summary>
            Series selection.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartSelectionMode.Point">
            <summary>
            Point selection.
            </summary>
        </member>
        <member name="T:C1.Chart.ElementSizeType">
            <summary>
            Specifies the size type for ElementSize object.
            </summary>
        </member>
        <member name="F:C1.Chart.ElementSizeType.Percentage">
            <summary>
            Size specified in perecents from available space.
            </summary>
        </member>
        <member name="F:C1.Chart.ElementSizeType.Absolute">
            <summary>
            Size specified in pixels.
            </summary>
        </member>
        <member name="T:C1.Chart.SymbolMarker">
            <summary>
            Specifies the type of marker to use for the SymbolMarker property.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Dot">
            <summary>
            Uses a solid circle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Box">
            <summary>
            Uses a square to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Circle">
            <summary>
            Uses a circle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Cross">
            <summary>
            Uses a crossed horizontal and vertical to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.DiagCross">
            <summary>
            Uses a diagonal cross to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Diamond">
            <summary>
            Uses a solid diamond to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.HorizontalLine">
            <summary>
            Uses a short horizontal line to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.InvertedTri">
            <summary>
            Uses a solid inverted triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.OpenDiamond">
            <summary>
            Uses a outline of a diamond to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.OpenInvertedTri">
            <summary>
            Uses a outline of an inverted triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.OpenTri">
            <summary>
            Uses a outline of a triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Square">
            <summary>
            Uses a outline of a square to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Star">
            <summary>
            Uses a solid star to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Tri">
            <summary>
            Uses a solid triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.VerticalLine">
            <summary>
            Uses a short vertical line to mark each data point.
            </summary>
        </member>
        <member name="T:C1.Chart.ElementSize">
            <summary>
            Represents element size.
            </summary>
        </member>
        <member name="P:C1.Chart.ElementSize.SizeType">
            <summary>
            Gets or sets the size type.
            </summary>
        </member>
        <member name="P:C1.Chart.ElementSize.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:C1.Chart.ElementSize.op_Equality(C1.Chart.ElementSize,C1.Chart.ElementSize)">
            <summary>
            
            </summary>
            <param name="size1"></param>
            <param name="size2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ElementSize.op_Inequality(C1.Chart.ElementSize,C1.Chart.ElementSize)">
            <summary>
            
            </summary>
            <param name="size1"></param>
            <param name="size2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ElementSize.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ElementSize.GetHashCode">
            <summary>
            Returns hash code of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.OverlappingLabels">
            <summary>
            Specifies how to handle overlapping labels.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.Auto">
            <summary>
            Hide overlapping labels.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.Show">
            <summary>
            Show all labels, including overlapping ones.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.Trim">
            <summary>
            Trim label if it's larger than avalable width.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.WordWrap">
            <summary>
            Wrap label if it's larger than avalable width.
            </summary>
        </member>
        <member name="T:C1.Chart.MeasureOption">
            <summary>
            Specifies measuring direction.
            </summary>
        </member>
        <member name="F:C1.Chart.MeasureOption.X">
            <summary>
            By X-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.MeasureOption.Y">
            <summary>
            By Y-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.MeasureOption.XY">
            <summary>
            Both X- and Y- axes.
            </summary>
        </member>
        <member name="T:C1.Chart.FitType">
            <summary>
            Specifies fit type for trend line.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Linear">
            <summary>
            Regression fit to the equation Y(x) = C0 + C1*x.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Polynom">
            <summary>
            Regression fit to the equation Y(x) = C0 + C1*x + C2*x2 + : + Cn-1*xn-1, where n - number of terms.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Exponent">
            <summary>
            Regression fit to the equation Y(x) = C0 * exp( C1*x)
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Logarithmic">
            <summary>
            Regression fit to the equation Y(x) = C0 * ln(C1*x)
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Power">
            <summary>
            Regression fit to the equation Y(x) = C0 * pow(x, C1)
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Fourier">
            <summary>
            Regression fit to the equation Y(x) = C0 + C1 * cos(x) + C2 * sin(x) + C3 * cos(2*x) + C4 * sin(2*x) + ...
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MinX">
            <summary>
            Minimal X-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MinY">
            <summary>
            Minimal Y-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MaxX">
            <summary>
            Maximum X-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MaxY">
            <summary>
            Maximum Y-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.AverageX">
            <summary>
            Average X-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.AverageY">
            <summary>
            Average Y-value.
            </summary>
        </member>
        <member name="T:C1.Chart.MovingAverageType">
            <summary>
            Specifies the type of MovingAverage Series. 
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Simple">
            <summary>
            An average of the last n values.
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Weighted">
            <summary>
            Weighted average of the last n values, where the weightage decreases by 1 with each previous value.
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Exponential">
            <summary>
            Weighted average of the last n values, where the weightage decreases exponentially with each previous value.
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Triangular">
            <summary>
            Weighted average of the last n values, whose result is equivalent to a double smoothed simple moving average.
            </summary>
        </member>
        <member name="T:C1.Chart.Orientation">
            <summary>
            Specifies the orientation of chart element.
            </summary>
        </member>
        <member name="F:C1.Chart.Orientation.Auto">
            <summary>
            Orientation is selected automatically.
            </summary>
        </member>
        <member name="F:C1.Chart.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:C1.Chart.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:C1.Chart.RadarChartType">
            <summary>
            Specifies the chart type for FlexRadar control.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Line">
            <summary>
            Shows trends over a period of time or across categories.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Scatter">
            <summary>
            Shows patterns within the data using X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.LineSymbols">
            <summary>
            Shows line chart with a symbol on each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Area">
            <summary>
            Shows line chart with the area below the line filled with color.
            </summary>
        </member>
        <member name="T:C1.Chart.FunnelChartType">
            <summary>
            Specifies the type of Funnel Chart.
            </summary>
        </member>
        <member name="F:C1.Chart.FunnelChartType.Default">
            <summary>
            Shows trapezoid chart.
            </summary>
        </member>
        <member name="F:C1.Chart.FunnelChartType.Rectangle">
            <summary>
            Shows bar chart.
            </summary>
        </member>
        <member name="T:C1.Chart.HistogramBinning">
            <summary>
            Specifies the binning mode to define the bins of a Histogram.
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramBinning.Automatic">
            <summary>
            The bin width will be calculated automatically.
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramBinning.BinWidth">
            <summary>
            A positive decimal number for the range of a bin.
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramBinning.NumberOfBins">
            <summary>
            The number of bins for the histogram, including the overflow and underflow bins.
            </summary>
        </member>
        <member name="T:C1.Chart.TextWrapping">
            <summary>
            Text wrap mode of chart legend.
            </summary>
        </member>
        <member name="F:C1.Chart.TextWrapping.None">
            <summary>
            No text wrapping.
            </summary>
        </member>
        <member name="F:C1.Chart.TextWrapping.Wrap">
            <summary>
            Wraps text if its width is larger than available width.
            </summary>
        </member>
        <member name="F:C1.Chart.TextWrapping.Truncate">
            <summary>
            Truncates text if its width is larger than available width.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisGroupSeparator">
            <summary>
            Specifies appearance of axis group separated.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.None">
            <summary>
            No separator.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.Vertical">
            <summary>
            Vertical line.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.Horizontal">
            <summary>
            Horizontal line.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.Grid">
            <summary>
            Grid (vertical and horizontal lines).
            </summary>
        </member>
        <member name="T:C1.Chart.DatetimeAxisGroupType">
            <summary>
            Specifies group type for time axis.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.None">
            <summary>
            No grouping.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Year">
            <summary>
            Group by year.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Quarter">
            <summary>
            Group by quarter.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Month">
            <summary>
            Group by month.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Day">
            <summary>
            Group by day.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Hour">
            <summary>
            Group by hour.
            </summary>
        </member>
        <member name="T:C1.Chart.LinePatternEnum">
            <summary>
            Use the members of this enumeration to set the value of the LinePattern property in the ChartStyle class.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.Dash">
            <summary>
            A dashed line.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.DashDot">
            <summary>
            A line with alternating dashes and dots.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.DashDotDot">
            <summary>
            A line with series consisting of a dash followed by two dots.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.Dot">
            <summary>
            A dotted line.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.None">
            <summary>
            No line is drawn.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.Solid">
            <summary>
            A solid line.
            </summary>
        </member>
        <member name="T:C1.Chart.LegendScrollBars">
            <summary>
            Specifies which scroll bars wiil be visible in legend.
            </summary>
        </member>
        <member name="F:C1.Chart.LegendScrollBars.None">
            <summary>
            No scroll bars are shown.
            </summary>
        </member>
        <member name="F:C1.Chart.LegendScrollBars.Vertical">
            <summary>
            Show vertical scroll bar if available height is not enough to show all legend items.
            </summary>
        </member>
        <member name="T:C1.Chart.HitTestInfo">
            <summary>
            Contains information about a part of a FlexChart control at
            a specified coordinate.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Series">
            <summary>
             Gets the chart series at the specified coordinates.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.PointIndex">
            <summary>
            Gets the data point index at the specified coordinates.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.ChartElement">
            <summary>
            Gets the chart element at the specified coordinates.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Distance">
            <summary>
            Gets the distance from the closest data point.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Item">
            <summary>
            Gets the data object that corresponds to the closest data point.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.X">
            <summary>
            Gets the x-value of the closest data point.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Y">
            <summary>
            Gets the y-value of the closest data point.
            </summary>
        </member>
        <member name="M:C1.Chart.HitTestInfo.Format(System.String)">
            <summary>
            Formats the string.
            </summary>
            <param name="s">An input string.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Axis">
            <summary>
            Gets the axis instance at the specified coordinates when ChartElement = AxisX or AxisY.
            </summary>
        </member>
        <member name="T:C1.Chart.Position">
            <summary>
            Specifies the position of chart element on the chart.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Left">
            <summary>
            The element appears to the left.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Right">
            <summary>
            The element appears to the right.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Top">
            <summary>
            The item appears above.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Bottom">
            <summary>
            The item appears below.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Auto">
            <summary>
            The element is positioned automatically.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.None">
            <summary>
            The element is not visible.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisType">
            <summary>
            Specifies axis type. 
            </summary>
        </member>
        <member name="F:C1.Chart.AxisType.X">
            <summary>
            X-axis, horizontal.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisType.Y">
            <summary>
            Y-axis, vertical.
            </summary>
        </member>
        <member name="T:C1.Chart.TickMark">
            <summary>
            Specifies whether and where the axis tick marks appear.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.None">
            <summary>
            No tick marks appear.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.Outside">
            <summary>
            Tick marks appear outside the plot area.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.Inside">
            <summary>
            Tick marks appear inside the plot area.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.Cross">
            <summary>
            Tick marks cross the axis.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisLabelAlignment">
            <summary>
            Specifies axis label position.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Center">
            <summary>
            At the center.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Left">
            <summary>
            At the left.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Right">
            <summary>
            At the right.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Top">
            <summary>
            At the top.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Bottom">
            <summary>
            At the bottom.
            </summary>
        </member>
        <member name="T:C1.Chart.TimeUnits">
            <summary>
            Specifies time axis units.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Day">
            <summary>
            Time units measured in days.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Week">
            <summary>
            Time units measured in weeks starting at the first of the year.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Month">
            <summary>
            Time units measured in months with the first day of each month.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Quarter">
            <summary>
            Time units measured in quarters with the first day of each quarter.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Year">
            <summary>
            Time units measured in years, with the first day of each year.
            </summary>
        </member>
        <member name="T:C1.Chart.IAxis">
            <summary>
            IAxis interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.Convert(System.Double)">
            <summary>
            Converts from data to pixel coordinate.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.ConvertBack(System.Double)">
            <summary>
            Converts from pixel to data coordinate.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IAxis.Position">
            <summary>
            Gets the axis position.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.AxisType">
            <summary>
            Gets the axis type.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Origin">
            <summary>
            Gets the axis origin.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Reversed">
            <summary>
            Whether the axis is reversed.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Labels">
            <summary>
            Whether to draw labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MajorTickMarks">
            <summary>
            Gets the position of major tick marks.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MajorGrid">
            <summary>
            Whether to draw major grid.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MajorUnit">
            <summary>
            Gets the major unit.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MinorTickMarks">
            <summary>
            Gets the position of major tick marks.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MinorGrid">
            <summary>
            Whether to draw major grid.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MinorUnit">
            <summary>
            Gets the major unit.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LogBase">
            <summary>
            Gets the logarithmic base.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.AxisLine">
            <summary>
            Whether to draw axis line.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelAlignment">
            <summary>
            Gets the label alignment.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelAngle">
            <summary>
            Gets the label rotation angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Min">
            <summary>
            Gets the axis minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Max">
            <summary>
            Gets the axis maximum.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetMin">
            <summary>
            Gets the actual minimum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.GetMax">
            <summary>
            Gets the actual maximum.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IAxis.Format">
            <summary>
            Gets the format of axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Title">
            <summary>
            Gets the axis title. 
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.StaggeredLines">
            <summary>
            Gets the number of axis label levels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.OverlappingLabels">
            <summary>
            Gets or sets a value indicating how to handle the overlapping axis labels.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetHeight(C1.Chart.IRenderEngine,System.Double)">
            <summary>
            Gets the axis height.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="maxWidth">The maximum width.</param>
            <returns>The axis height.</returns>
        </member>
        <member name="P:C1.Chart.IAxis.AnnoSize">
            <summary>
            Gets or sets annotation label size.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.HasOrigin">
            <summary>
            Whether the origin is set.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.DesiredSize">
            <summary>
            Gets or sets the axis desired size.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Chart">
            <summary>
            Gets or sets the parent chart.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Rect">
            <summary>
            Gets the axis rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.Layout(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Perfomes axis layout.
            </summary>
            <param name="axisRect"></param>
            <param name="plotRect"></param>
        </member>
        <member name="M:C1.Chart.IAxis.Render(C1.Chart.IRenderEngine)">
            <summary>
            Renders the axis.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.IAxis.RenderPolar(C1.Chart.IRenderEngine,C1.Chart.IRadarChart)">
            <summary>
            Renders polar or radar axis.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="radarChart"></param>
        </member>
        <member name="M:C1.Chart.IAxis.UpdateActualLimits(System.Nullable{C1.Chart.DataType},System.Double,System.Double,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Double})">
            <summary>
            Updates axis limits.
            </summary>
            <param name="dataType"></param>
            <param name="dataMin"></param>
            <param name="dataMax"></param>
            <param name="labels"></param>
            <param name="values"></param>
        </member>
        <member name="M:C1.Chart.IAxis.FormatValue(System.Double)">
            <summary>
            Formats specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.SetCustomConversion(System.Func{System.Double,System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Set custom conversion.
            </summary>
            <param name="convert"></param>
            <param name="convertBack"></param>
        </member>
        <member name="P:C1.Chart.IAxis.CustomLabels">
            <summary>
            Gets or sets custom axis labels.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetValues">
            <summary>
            Gets label values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IAxis.ItemsSource">
            <summary>
            Gets the data source for axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Binding">
            <summary>
            Gets the binding (property name) for axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.PlotAreaName">
            <summary>
            Gets the plot area name.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.SetChartType(System.Nullable{C1.Chart.ChartType})">
            <summary>
            Sets the chart type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:C1.Chart.IAxis.GroupNames">
            <summary>
            Gets or sets the group names.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupItemsPath">
            <summary>
            Gets or sets the items path.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupSeparator">
            <summary>
            Gets the axis group separators
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupProvider">
            <summary>
            Gets the axis group provider
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupTitleAlignment">
            <summary>
            Gets the group title alignment.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetGroupStyle">
            <summary>
            Gets the group style by name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.SetGroupStyle(C1.Chart._Style)">
            <summary>
            Sets group style with specified name.
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:C1.Chart.IAxis.GroupVisibilityLevel">
            <summary>
            Gets the group visiblity level.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.TickLength">
            <summary>
            Gets or sets the tick length.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelMin">
            <summary>
            Gets or sets whether the minimum axis value is always labeled.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelMax">
            <summary>
            Gets or sets whether the maximum axis value is always labeled.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.TimeUnit">
            <summary>
            Gets or sets the units for a time based axis.
            </summary>
        </member>
        <member name="T:C1.Chart.IAxesProvider">
            <summary>
            Auxiliary axes, e.g. color axis.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxesProvider.GetAxes">
            <summary>
            Gets the list of axes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IAxis2">
            <summary>
            IAxis interface.
            </summary>
        </member>
        <member name="T:C1.Chart.IAxisGroupProvider">
            <summary>
            Axis grouping provider.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxisGroupProvider.GetLevels(C1.Chart.IRange)">
            <summary>
            Get number of levels for the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxisGroupProvider.GetRanges(C1.Chart.IRange,System.Int32)">
            <summary>
            Gets the list of ranges.
            </summary>
            <param name="range"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IRange">
            <summary>
            Data range.
            </summary>
        </member>
        <member name="P:C1.Chart.IRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:C1.Chart.IRange.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.IRange.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="T:C1.Chart.DoubleRange">
            <summary>
            Numeric data range.
            </summary>
        </member>
        <member name="M:C1.Chart.DoubleRange.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates an instance of DoubleRange.
            </summary>
            <param name="name"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:C1.Chart.DoubleRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:C1.Chart.DoubleRange.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.DoubleRange.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="T:C1.Chart.TimeRange">
            <summary>
            Time data range.
            </summary>
        </member>
        <member name="M:C1.Chart.TimeRange.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates an instance of the TimeRange class.
            </summary>
            <param name="name"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:C1.Chart.TimeRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.TimeMin">
            <summary>
            Gets or sets the minumum as DataTime value.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.TimeMax">
            <summary>
            Gets or sets the maximum as DataTime value.
            </summary>
        </member>
        <member name="T:C1.Chart.QuartileCalculation">
            <summary>
            Specifies the quartile calculation method of Box-whisker series.
            </summary>
        </member>
        <member name="F:C1.Chart.QuartileCalculation.InclusiveMedian">
            Include median value when calculate quartile. 
        </member>
        <member name="F:C1.Chart.QuartileCalculation.ExclusiveMedian">
            Exclude median value when calculate quartile. 
        </member>
        <member name="T:C1.Chart.IBoxWhisker">
            <summary>
            interface interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowMeanLine">
            <summary>
            Gets or sets a value that determines whether to show the mean line for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.QuartileCalculation">
            <summary>
            Gets or sets a value that specifies the quartile calculation for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.GapWidth">
            <summary>
            Gets or sets a value that determines the gap width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.1. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.GroupWidth">
            <summary>
            Gets or sets a value that determines the group width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.8. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowMeanMarks">
            <summary>
            Gets or sets a value that determines whether to show the mean marker for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowInnerPoints">
            <summary>
            Gets or sets a value that determines whether to show the inner points for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowOutliers">
            <summary>
            Gets or sets a value that determines whether to show the outliers for the Box-whisker series.
            </summary>
        </member>
        <member name="M:C1.Chart.IBoxWhisker.UpdateXItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Update the list of x axis items
            </summary>
            <param name="items">the items of x axis</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IBoxWhisker.GetXItemCount">
            <summary>
            Get the count of x axis items
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IBoxWhisker.GetBoxData">
            <summary>
            Get the data of box whisker
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IBreakEven">
            <summary>
            interface interface.
            </summary>
        </member>
        <member name="T:C1.Chart.IBrushConverter">
            <summary>
            Brush converter interface
            </summary>
        </member>
        <member name="M:C1.Chart.IBrushConverter.Convert(System.Object)">
            <summary>
            Converts brush to string.
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IBrushConverter.ConvertBack(System.String)">
            <summary>
            Converts string to brush.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IChartBase">
            <summary>
            IChartBase interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.Legend">
            <summary>
            Gets the chart legend.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.Header">
            <summary>
            Gets the chart header.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.Footer">
            <summary>
            Gets the chart footer,
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.SelectedIndex">
            <summary>
            Gets the selected index.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.SelectionMode">
            <summary>
            Gets the selection mode.
            </summary>
        </member>
        <member name="M:C1.Chart.IChartBase.OnRendering(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Invoked before chart starts rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.IChartBase.OnRendered(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Invoked after chart finishes rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.IChartBase.GetMargin">
            <summary>
            Gets the plot margin.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IChart">
            <summary>
            IChart interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.ChartType">
            <summary>
            Gets the chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.Stacking">
            <summary>
            Gets the chart stacking.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.AxisX">
            <summary>
            Gets the main x-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.AxisY">
            <summary>
            Gets the main y-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.DataLabel">
            <summary>
            Gets the chart data label.
            </summary>
        </member>
        <member name="M:C1.Chart.IChart.GetAxes">
            <summary>
            Gets the chart axes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IChart.Series">
            <summary>
            Gets the series list.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.SelectedSeries">
            <summary>
            Gets the selected series.
            </summary>
        </member>
        <member name="M:C1.Chart.IChart.GetPlotRect">
            <summary>
            Gets the plot rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetPlotMargin">
            <summary>
            Gets the plot margin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.IsRotated">
            <summary>
            Gets a value indicating whether the chart is rotated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetXItems">
            <summary>
            Gets the list of x-axis items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetOption(System.String)">
            <summary>
            Gets the chart option.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.OnRenderingData(C1.Chart.IRenderEngine)">
            <summary>
            Invoked before chart data starts rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.IChart.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,C1.Chart.ISeries,System.Int32,System.Double@,System.Double@)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="series">Chart series.</param>
            <param name="index">Series index.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Chart.IChart.OnLabelRendered(C1.Chart.IRenderEngine,System.String,C1.Chart.ISeries,System.Int32,System.Double,System.Double)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="series">Chart series.</param>
            <param name="index">Series index.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:C1.Chart.IChart.CreateSeries">
            <summary>
            Creates an instance of series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetPlotAreas">
            <summary>
            Gets the list of plot areas.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.ISupportCustomRenderEngine">
            <summary>
            Support of external render engines.
            </summary>
        </member>
        <member name="M:C1.Chart.ISupportCustomRenderEngine.Attach(C1.Chart.ICustomRenderEngine)">
            <summary>
            Attaches external render engine.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.ISupportCustomRenderEngine.Render(C1.Chart.IRenderEngine,System.Int32,System.Int32)">
            <summary>
            Render the chart to external render engine.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.ISupportCustomRenderEngine.Detach">
            <summary>
            Detaches external render engine.
            </summary>
        </member>
        <member name="T:C1.Chart.ICustomRenderEngine">
            <summary>
            External render engine interface.
            </summary>
        </member>
        <member name="M:C1.Chart.ICustomRenderEngine.Attach(C1.Chart.IChart)">
            <summary>
            Attach render engine to the chart.
            </summary>
            <param name="chart"></param>
        </member>
        <member name="M:C1.Chart.ICustomRenderEngine.Detach">
            <summary>
            Detach render engine from chart.
            </summary>
        </member>
        <member name="T:C1.Chart.IRadarChart">
            <summary>
            Radar chart interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="M:C1.Chart.IRadarChart.Convert(C1.Chart._Point)">
            <summary>
            Converts the point.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IRadarChart.ConvertAngle(System.Double)">
            <summary>
            Converts the angle.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IRadarChart.Radius">
            <summary>
            Gets the radius.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.StartAngle">
            <summary>
            Gets or sets the starting angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.Reversed">
            <summary>
            Whether the chart is reversed.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.IsPolar">
            <summary>
            Whether the chart is polar.
            </summary>
        </member>
        <member name="T:C1.Chart.IRenderer">
            <summary>
            Chart renderer.
            </summary>
        </member>
        <member name="M:C1.Chart.IRenderer.Render(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Render element.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:C1.Chart.IHitTester">
            <summary>
            His tester.
            </summary>
        </member>
        <member name="M:C1.Chart.IHitTester.Add(C1.Chart._Rect,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Add data rect.
            </summary>
            <param name="rect"></param>
            <param name="si"></param>
            <param name="pi"></param>
            <param name="datax"></param>
            <param name="datay"></param>
        </member>
        <member name="T:C1.Chart.ICustomRendering">
            <summary>
            Custom renering.
            </summary>
        </member>
        <member name="M:C1.Chart.ICustomRendering.OnRendering(C1.Chart.IRenderEngine)">
            <summary>
            Called before rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ICustomRendering.OnRendered(C1.Chart.IRenderEngine)">
            <summary>
            Called after rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="T:C1.Chart.IMetricProvider">
            <summary>
            Metric provider.
            </summary>
        </member>
        <member name="M:C1.Chart.IMetricProvider.GetMetric(System.String)">
            <summary>
            Gets metric.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IMetricProvider.SetMetric(System.String,System.Double)">
            <summary>
            Sets metric.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:C1.Chart.ErrorAmount">
            <summary>
            Specifies the error amount of the series, it can be a standard error amount, a percentage or a standard deviation.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.FixedValue">
            <summary>
            Indicates the error with a fixed value. 
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.Percentage">
            <summary>
            Indicates the error with a percentage value.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.StandardDeviation">
            <summary>
            Indicates the error with the standard deviation.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.StandardError">
            <summary>
            Indicates the error with the standard error.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.Custom">
            <summary>
            Indicates the error with the custom value.
            </summary>
        </member>
        <member name="T:C1.Chart.ErrorBarEndStyle">
            <summary>
            Specifies the end style of the error bar.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarEndStyle.Cap">
            <summary>
            Error bar with cap.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarEndStyle.NoCap">
             <summary>
            Error bar without cap. 
             </summary>
        </member>
        <member name="T:C1.Chart.ErrorBarDirection">
            <summary>
            Specifies the direction of the error bar.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarDirection.Both">
            <summary>
            Shows both direction.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarDirection.Minus">
            <summary>
            Only shows minus direction.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarDirection.Plus">
            <summary>
            Only shows plus direction.
            </summary>
        </member>
        <member name="T:C1.Chart.ErrorValueType">
            <summary>
            Specifies the type of error value.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorValueType.Minus">
            <summary>
            Minus error value.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorValueType.Plus">
            <summary>
            TPlus error value.
            </summary>
        </member>
        <member name="T:C1.Chart.IErrorBar">
            <summary>
            IErrorBar interface
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.Direction">
            <summary>
            Gets or sets a value that specifies the direction of the error.
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.EndStyle">
            <summary>
            Gets or sets a value that specifies the end style of the series.
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.ErrorAmount">
            <summary>
            Gets or sets a value that specifies the error amount of the series.
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.ErrorValue">
            <summary>
            Gets or sets a value that specifies the error value of the series.
            </summary>
            <remarks>
            This property should be work with errorAmount property.
            If ErrorAmount is ErrorAmount.FixedValue, the value property is a fixed number value.
            If ErrorAmount is ErrorAmount.Percentage, the value property is a percentage number value between 0 and 1.
            If ErrorAmount is ErrorAmount.StandardDeviation, the value property is a percentage number of calculated standard deviation value.
            </remarks>
        </member>
        <member name="P:C1.Chart.IErrorBar.CustomPlusErrorValue">
            <summary>
            Gets or sets a value that specifies the custom plus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="P:C1.Chart.IErrorBar.CustomMinusErrorValue">
            <summary>
            Gets or sets a value that specifies the cumstom minus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="T:C1.Chart.IDistributionSeries">
            <summary>
            General distribution series
            </summary>
        </member>
        <member name="P:C1.Chart.IDistributionSeries.BinWidth">
            <summary>
            Gets or sets the bin width
            </summary>       
        </member>
        <member name="T:C1.Chart.IHistogramSeries">
            <summary>
            Histogram series
            </summary>
        </member>
        <member name="P:C1.Chart.IHistogramSeries.NormalCurve">
            <summary>
            Gets or sets the normal curve
            </summary>       
        </member>
        <member name="P:C1.Chart.IHistogramSeries.HistogramAppearance">
            <summary>
            Gets the histogram appearance
            </summary>     
        </member>
        <member name="P:C1.Chart.IHistogramSeries.CumulativeMode">
            <summary>
            Gets sets the cumulative mode state
            </summary>     
        </member>
        <member name="T:C1.Chart.INormalCurve">
            <summary>
            Normal Curve <see href="http://helpcentral.componentone.com/nethelp/c1chart2d/frequencygraph.html"></see>
            </summary>
        </member>
        <member name="P:C1.Chart.INormalCurve.Visible">
            <summary>
            Gets or sets the visible of normal curve
            </summary>   
        </member>
        <member name="T:C1.Chart.HistogramAppearance">
            <summary>
            Histogram appearance enums. 
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramAppearance.Histogram">
            <summary>
            Histogram
            </summary>   
        </member>
        <member name="F:C1.Chart.HistogramAppearance.FrequencyPolygon">
            <summary>
            FrequencyPolygon
            </summary>   
        </member>
        <member name="F:C1.Chart.HistogramAppearance.HistogramAndFrequencyPolygon">
            <summary>
            Histogram and FrequencyPolygon
            </summary>   
        </member>
        <member name="T:C1.Chart.ILegend">
            <summary>
            ILegend interface.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.Position">
            <summary>
            Gets or sets the legend position.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.ItemMaxWidth">
            <summary>
            Gets or sets the legend max width.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.TextWrapping">
            <summary>
            Gets or sets the legend text wrap mode.
            </summary>
        </member>
        <member name="M:C1.Chart.ILegend.GetPosition(System.Double,System.Double)">
            <summary>
            Gets the automatic position.
            </summary>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
            <returns>The legend automatic position</returns>
        </member>
        <member name="M:C1.Chart.ILegend.GetDesiredSize(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Gets the desired legend size.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
            <returns>The desired legend size.</returns>
        </member>
        <member name="M:C1.Chart.ILegend.Render(C1.Chart.IRenderEngine,C1.Chart.Position,C1.Chart._Rect)">
            <summary>
            Render the legend.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="pos"></param>
            <param name="rect"></param>
        </member>
        <member name="M:C1.Chart.ILegend.HitTest(System.Double,System.Double)">
            <summary>
            Hit testing.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>Hit test result.</returns>
        </member>
        <member name="P:C1.Chart.ILegend.Title">
            <summary>
            Gets the legend title.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.Orientation">
            <summary>
            Gets the legend orientation.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.Reversed">
            <summary>
            Gets or sets the legend reversed order.
            </summary>
        </member>
        <member name="T:C1.Chart.IPieChart">
            <summary>
            Generic pie chart.
            </summary>
        </member>
        <member name="M:C1.Chart.IPieChart.GetValues">
            <summary>
            Gets the data values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IPieChart.GetNames">
            <summary>
            Gets the data names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IPieChart.GetItem(System.Int32)">
            <summary>
            Gets item by index.
            </summary>
            <param name="i">Index of data point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IPieChart.GetLegendLabels">
            <summary>
            Gets the legend labels.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IPieChart.StartAngle">
            <summary>
            Gets the starting angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.InnerRadius">
            <summary>
            Gets the inner radius.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.SelectedItemPosition">
            <summary>
            Gets the selected item position.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.SelectedItemOffset">
            <summary>
            Gets the selected item offset.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.Reversed">
            <summary>
            Gest whether the chart reversed.
            </summary>
        </member>
        <member name="M:C1.Chart.IPieChart.GetSum">
            <summary>
            Gets the sum of data values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IPieChart.DataLabel">
            <summary>
            Gets the data label.
            </summary>
        </member>
        <member name="M:C1.Chart.IPieChart.OnSliceRendering(C1.Chart.IRenderEngine,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called before rendering slice. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="index">Index of data point.</param>
            <param name="centerX">Pie center coordinate.</param>
            <param name="centerY">Pie center coordinate.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
            <returns>Whether to perform default symbol rendering.</returns>
        </member>
        <member name="M:C1.Chart.IPieChart.OnSliceRendered(C1.Chart.IRenderEngine,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called after rendering slice. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="index">Index of data point.</param>
            <param name="centerX">Pie center X coordinate.</param>
            <param name="centerY">Pie center Y coordinate.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
        </member>
        <member name="M:C1.Chart.IPieChart.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="centerX">Pie center X coordinate.</param>
            <param name="centerY">Pie center Y coordinate.</param>
            <param name="index">Point index.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Chart.IPieChart.OnLabelRendered(C1.Chart.IRenderEngine,System.String,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="centerX">Pie center X coordinate.</param>
            <param name="centerY">Pie center Y coordinate.</param>
            <param name="index">Point index.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
        </member>
        <member name="T:C1.Chart.IPlotArea">
            <summary>
            Generic plot area.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Row">
            <summary>
            Row index.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Column">
            <summary>
            Column index
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Rect">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Height">
            <summary>
            Get the height of plot area.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Width">
            <summary>
            Get the width of plot area.
            </summary>
        </member>
        <member name="T:C1.Chart.IRangedHistogramSeries">
            <summary>
            Defines the ranged histogram series properties and methods.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.BinMode">
            <summary>
            The mode of histogram bin.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.NumberOfBins">
            <summary>
            The number of bins for the histogram, including the overflow and underflow bins.
            </summary>
        </member>
        <member name="M:C1.Chart.IRangedHistogramSeries.GetXLabels">
            <summary>
            Calculates and returns an array of strings of X-axis labels.
            </summary>
            <returns>Array of strings of X-axis labels.</returns>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.OverflowBin">
            <summary>
            A value to create a bin for all values above it.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.UnderflowBin">
            <summary>
            A value to create a bin for all values below or equal to it.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.ShowOverflowBin">
            <summary>
            Gets or sets whether the histogram shows the overflow bin.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.ShowUnderflowBin">
            <summary>
            Gets or sets whether the histogram shows the underflow bin.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.SortDescending">
            <summary>
            Gets or sets whether the ranged histogram sort descending.
            </summary>
        </member>
        <member name="T:C1.Chart.IRenderEngine">
            <summary>
            Render engine.
            </summary>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetStroke(System.Object)">
            <summary>
            Sets the current stroke brush.
            </summary>
            <param name="brush">Native brush or argb color as integer.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetStrokeThickness(System.Double)">
            <summary>
            Sets the stroke thickness.
            </summary>
            <param name="thickness"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetStrokePattern(System.Double[])">
            <summary>
            Sets the stroke pattern.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetFill(System.Object)">
            <summary>
            Sets the fill brush.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetOpacity(System.Object,System.Double)">
            <summary>
            Changes the brush opacity.
            </summary>
            <param name="brush">Brush object</param>
            <param name="opacity">Opacity</param>
            <returns>Brush object</returns>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetFont(System.Object)">
            <summary>
            Sets the font.
            </summary>
            <param name="font">Native font object.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw line between two points using current stroke attributes.
            </summary>
            <param name="x1">x-coordinate of first point.</param>
            <param name="y1">y-coordinate of first point.</param>
            <param name="x2">x-coordinate of second point.</param>
            <param name="y2">y-coordinate of second point.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawLines(System.Double[],System.Double[])">
            <summary>
            Draw lines using specified coordinates.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw rectangle with currect stroke and fill.
            </summary>
            <param name="x">x-coordinate of rectangle.</param>
            <param name="y">y-coordinate of rectangle.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawPolygon(System.Double[],System.Double[])">
            <summary>
            Draw polygon with currect stroke and fill.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw ellipse with currect stroke and fill.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawImage(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw image using special source.
            </summary>
            <param name="source">the source of image.</param>
            <param name="x">X coordinate of image.</param>
            <param name="y">Y coordinate of image.</param>
            <param name="w">Image width.</param>
            <param name="h">Image height.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.MeasureString(System.String)">
            <summary>
            Measures size of string.
            </summary>
            <param name="s">String to measure.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:C1.Chart.IRenderEngine.MeasureString(System.String,C1.Chart._Size)">
            <summary>
            Measures size of string in layout area.
            </summary>
            <param name="s">String to measure.</param>
            <param name="sz">Layout size.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawString(System.String,C1.Chart._Point)">
            <summary>
            Draw string at specified position.
            </summary>
            <param name="s">String to draw.</param>
            <param name="pos">Position.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawString(System.String,C1.Chart._Rect,C1.Chart.TextWrapping)">
            <summary>
            Draw string at specified area.
            </summary>
            <param name="s">String to draw.</param>
            <param name="area">Area.</param>
            <param name="textWrapping">Text wrapping.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawStringRotated(System.String,C1.Chart._Point,C1.Chart._Point,System.Double)">
            <summary>
            Draw rotated string at specified position.
            </summary>
            <param name="s"></param>
            <param name="pos"></param>
            <param name="center"></param>
            <param name="angle"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetClipRect(System.Nullable{C1.Chart._Rect})">
            <summary>
            Sets clip rectangle.
            </summary>
            <param name="rect">Clip rectangle. Null clear clipping rectangle.</param>
        </member>
        <member name="T:C1.Chart.IRenderEngine2">
            <summary>
            Render engine for pie chart.
            </summary>
        </member>
        <member name="M:C1.Chart.IRenderEngine2.DrawPieSegment(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws pie segment.
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="radius"></param>
            <param name="angle"></param>
            <param name="sweep"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine2.DrawDonutSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws donut segment.
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="radius"></param>
            <param name="innerRadius"></param>
            <param name="angle"></param>
            <param name="sweep"></param>
        </member>
        <member name="T:C1.Chart.ISeries">
            <summary>
            ISeries interface.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Visibility">
            <summary>
            Gets or sets the series visibility.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Name">
            <summary>
            Gets or sets the series name.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.AxisX">
            <summary>
            Gets or sets the series x-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.AxisY">
            <summary>
            Gets or sets the series y-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.GetValues(System.Int32)">
            <summary>
            Gets the data values.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetDataType(System.Int32)">
            <summary>
            Gets the data type.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemName(System.Int32)">
            <summary>
            Gets the name of legend.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemGroup(System.Int32)">
            <summary>
            Gets the name of legend group.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemImageSource(System.Int32,C1.Chart._Size@)">
            <summary>
            Gets the image source for the icon presented for the legend item.
            </summary>
            <param name="index"></param>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemStyle(System.Int32)">
            <summary>
            Gets the style of legend.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemLength">
            <summary>
            Get the number of series items in the legend.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.SymbolSize">
            <summary>
            Gets the series symbol size.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.SymbolMarker">
            <summary>
            Gets the series symbol marker.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.GetItem(System.Int32)">
            <summary>
            Gets the data item by index. 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.ISeries.HasCustomSymbol">
            <summary>
            Whether the series has custom symbol rendering.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.OnSymbolRendering(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called before rendering symbol.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>Whether to perform default symbol rendering.</returns>
        </member>
        <member name="M:C1.Chart.ISeries.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called after rendering symbol. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
        </member>
        <member name="M:C1.Chart.ISeries.OnRendering(C1.Chart.IRenderEngine)">
            <summary>
            Called before rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.OnRendered(C1.Chart.IRenderEngine)">
            <summary>
            Called after rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="P:C1.Chart.ISeries.DataSource">
            <summary>
            Gets or sets data source.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Binding">
            <summary>
            Gets or sets the binding.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.BindingX">
            <summary>
            Gets or sets the x-binding.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.StackingGroup">
            <summary>
            Gets or sets the group index for series, only effect in bar and column chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.LegendGroup">
            <summary>
            Gets or sets the legend group title in which the series should be included.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.GetDataRect(C1.Chart._Rect)">
            <summary>
            Get the series bounding rectangle in data coordinates.
            </summary>
            <param name="currentRect">The current rectangle of chart</param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.ISeries.DataLabel">
            <summary>
            Gets the data label.
            </summary>
        </member>
        <member name="T:C1.Chart.IStyleProvider">
            <summary>
            IStyle provider interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IStyleProvider.GetStyle(System.String)">
            <summary>
            Gets the style by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IStyleProvider.SetStyle(C1.Chart._Style,System.String)">
            <summary>
            Sets style with specified name.
            </summary>
            <param name="style"></param>
            <param name="name"></param>
        </member>
        <member name="T:C1.Chart.IStyleConverter">
            <summary>
            Style converter.
            </summary>
        </member>
        <member name="M:C1.Chart.IStyleConverter.Convert(C1.Chart.IStyleProvider,C1.Chart._Style,System.String)">
            <summary>
            Converts the style.
            </summary>
            <param name="provider"></param>
            <param name="style"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IWaterfall">
            <summary>
            IWaterfall interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.ConnectorLines">
            <summary>
            Gets or sets a value that determines whether to show connector lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.IntermediateTotalLabels">
            <summary>
            Gets or sets the value of the property that contains the label of the intermediate total bar, it should be an array or a string.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.IntermediateTotalPositions">
            <summary>
            Gets or sets the value of the property that contains the index for positions of the intermediate total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.RelativeData">
            <summary>
            Gets or sets a value that determines whether the given data is relative.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.ShowIntermediateTotal">
            <summary>
            Gets or sets a value that determines whether to show the intermediate total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.ShowTotal">
            <summary>
            Gets or sets a value that determines whether show total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.Start">
            <summary>
            Gets or sets a value that determines the value of the start bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.StartLabel">
            <summary>
            Identifies the Start dependency property.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.TotalLabel">
            <summary>
            Gets or sets the label of the total bar.
            </summary>
        </member>
        <member name="M:C1.Chart.IWaterfall.GetYValues">
            <summary>
            Gets the list of y axis values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IWaterfall.IsIntermediateTotal(System.Int32)">
            <summary>
            Checks whether the item is intermediate total or not.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IWaterfall.UpdateXItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Updates the list of x axis items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.PieForceOptions">
            <summary>
            The pie force options class.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.Instance">
            <summary>
            Creates a new instance of <see cref="T:C1.Chart.PieForceOptions"/> class.
            </summary>
        </member>
        <member name="E:C1.Chart.PieForceOptions.PropertyChanged">
            <summary>
            Fires when <see cref = "T:C1.Chart.PieForceOptions"/> property was changed.
            </summary>
        </member>
        <member name="M:C1.Chart.PieForceOptions.SetField``1(``0@,``0,System.String)">
            <summary>
            Sets the field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value to assign.</param>
            <param name="propertyName">The property name corresponding to field.</param>
            <returns>True if a value is assigned to the field, false otherwise.</returns>
        </member>
        <member name="P:C1.Chart.PieForceOptions.RadialDelta">
            <summary>
            Gets or sets the radial delta.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.CollideStrength">
            <summary>
            Gets or sets the collide strength.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.RadialStrength">
            <summary>
            Gets or sets the radial strength.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.Iterations">
            <summary>
            Gets or sets the number of calculation iterations.
            </summary>
        </member>
        <member name="T:C1.Chart.IPalette">
            <summary>
            IPalette interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IPalette.GetColor(System.Int32)">
            <summary>
            Gets the palette color by index.
            </summary>
            <param name="i">Index of data point.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.Palette">
            <summary>
            Specifies chart palette.
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Cocoa">
            <summary>
            Cocoa
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Dark">
            <summary>
            Dark
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Highcontrast">
            <summary>
            Highcontrast
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Light">
            <summary>
            Light
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Midnight">
            <summary>
            Midnight
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Modern">
            <summary>
            Modern
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Organic">
            <summary>
            Organic
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Slate">
            <summary>
            Slate
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Zen">
            <summary>
            Zen
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Cyborg">
            <summary>
            Cyborg
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Superhero">
            <summary>
            Superhero
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Flatly">
            <summary>
            Flatly
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Darkly">
            <summary>
            Darkly
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Cerulean">
            <summary>
            Cerulean
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Custom">
            <summary>
            Custom palette.
            </summary>
        </member>
        <member name="T:C1.Chart.ITreeMap">
            <summary>
            Represents the <see cref="T:C1.Win.Chart.TreeMap"/> properties and methods.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.Binding">
            <summary>
            Gets the binding (property name) for axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.BindingName">
            <summary>
            Gets the name of the property that contains the name of the data item.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.ChildItemsPath">
            <summary>
            Gets the name of the property of collection that contains child items.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.ChartType">
            <summary>
            Gets the chart type.
            </summary>
        </member>
        <member name="M:C1.Chart.ITreeMap.GetLegendLabels">
            <summary>
            Gets the legend labels.
            </summary>
            <returns>The array of legend label strings.</returns>
        </member>
        <member name="P:C1.Chart.ITreeMap.MaxDepth">
            <summary>
            Gets the maximum number of displayed node levels.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.Items">
            <summary>
            The hierarchical TreeMap items.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.SelectedItem">
            <summary>
            Gets the selected TreeMap item.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.DataLabel">
            <summary>
            Gets the data label for TreeMap items.
            </summary>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,System.Object,C1.Chart._Point)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="pt">The mouse hit area.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnLabelRendered(C1.Chart.IRenderEngine,System.String,System.Object,C1.Chart._Point)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="pt">The mouse hit area.</param>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnNodeRendering(C1.Chart.IRenderEngine,System.Object,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Called before rendering node.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="x">The top left X coordinate of the node rectangle.</param>
            <param name="y">The top let Y coordinate of the node rectangle.</param>
            <param name="width">The width of the node rectangle.</param>
            <param name="height">The height of the node rectangle.</param>
            <param name="depth">The depth of the node.</param>
            <param name="isTitle">Determines if the node is a title node or not.</param>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnNodeRendered(C1.Chart.IRenderEngine,System.Object,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Render node using arguments.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="x">The top left X coordinate of the node rectangle.</param>
            <param name="y">The top let Y coordinate of the node rectangle.</param>
            <param name="width">The width of the node rectangle.</param>
            <param name="height">The height of the node rectangle.</param>
            <param name="depth">The depth of the node.</param>
            <param name="isTitle">Determines if the node is a title node or not.</param>
        </member>
        <member name="T:C1.Chart.TreeMapType">
            <summary>
            Specifies the treemap type.
            </summary>
        </member>
        <member name="F:C1.Chart.TreeMapType.Squarified">
            <summary>
            Shows squarified treemap.
            </summary>
        </member>
        <member name="F:C1.Chart.TreeMapType.Horizontal">
            <summary>
            Shows horizontal squarified treemap.
            </summary>
        </member>
        <member name="F:C1.Chart.TreeMapType.Vertical">
            <summary>
            Shows vertical squarified treemap.
            </summary>
        </member>
        <member name="T:C1.Chart._Rect">
            <summary>
            Represents rectangle.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Left">
            <summary>
            Left coordinate.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Top">
            <summary>
            Top coordinate.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Width">
            <summary>
            Width of rectangle.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Height">
            <summary>
            Height of rectangle.
            </summary>
        </member>
        <member name="P:C1.Chart._Rect.Right">
            <summary>
            Gets the right coordinate of rectangle.
            </summary>
        </member>
        <member name="P:C1.Chart._Rect.Bottom">
            <summary>
            Gets the bottom coordinate of rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart._Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an instance of rectangle.
            </summary>
            <param name="l"></param>
            <param name="t"></param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart._Rect.Contains(System.Double,System.Double)">
            <summary>
            Returns whether the point specified by coordinates is inside rectangle.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns></returns>
        </member>
        <member name="F:C1.Chart._Rect.Empty">
            <summary>
            Empty rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart._Rect.op_Equality(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Equality operator. 
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.op_Inequality(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Non-equality operator.
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.Intersect(C1.Chart._Rect)">
            <summary>
            Returns a value indicating whether the rectangle intersects with the specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.Inflate(System.Double,System.Double)">
            <summary>
            Inflate the rectangle.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:C1.Chart._Rect.Intersect(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Returns the intersection of two rectangles.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart._Rect.Center">
            <summary>
            Gets the centre of the rectangle.
            </summary>
        </member>
        <member name="T:C1.Chart._Size">
            <summary>
            Represents size.
            </summary>
        </member>
        <member name="F:C1.Chart._Size.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="F:C1.Chart._Size.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:C1.Chart._Size.#ctor(System.Double,System.Double)">
            <summary>
            Creates am instance of _Size.
            </summary>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="T:C1.Chart._Margin">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Left">
            <summary>
            Left margin.
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Right">
            <summary>
            Right margin.
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Top">
            <summary>
            Top margin.
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Bottom">
            <summary>
            Bottom margin.
            </summary>
        </member>
        <member name="M:C1.Chart._Margin.Apply(C1.Chart._Rect)">
            <summary>
            Applies margin to specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart._Point">
            <summary>
            Represents point.
            </summary>
        </member>
        <member name="F:C1.Chart._Point.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="F:C1.Chart._Point.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="M:C1.Chart._Point.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of _Point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Chart._Point.Clone">
            <summary>
            Clones the specified point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.op_Equality(C1.Chart._Point,C1.Chart._Point)">
            <summary>
            Equality operator. 
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.op_Inequality(C1.Chart._Point,C1.Chart._Point)">
            <summary>
            Non-equality operator.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart._Style">
            <summary>
            Represents portable style.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.Stroke">
            <summary>
            Gets or sets the stroke object.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.StrokePattern">
            <summary>
            Gets or sets the stroke pattern.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.Fill">
            <summary>
            Gets or sets the fill object.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.Font">
            <summary>
            Gets or sets the font object.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.HAlign">
            <summary>
            Gets or sets horizontal alignment.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.VerticalText">
            <summary>
            Gets or sets a value indicating whether the text should be rendered vertically.
            </summary>
        </member>
        <member name="M:C1.Chart._Style.Combine(C1.Chart._Style)">
            <summary>
            Combines styles.
            </summary>
            <param name="parentStyle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Style.SetStroke(C1.Chart.IRenderEngine)">
            <summary>
            Sets stroke options.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="P:C1.Chart.TreeItem.Name">
            <summary>
            The value of <see cref="P:C1.Chart.TreeItem.NameField"/>
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Value">
            <summary>
            The value of binding.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Items">
            <summary>
            The hierarchical items.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.NameField">
            <summary>
            The name of property.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.ParentItem">
            <summary>
            Parent item.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.RootIndex">
            <summary>
            The index of the first level item.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Index">
            <summary>
            The index of item.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.IsSelected">
            <summary>
            Determines whether the item is selected.
            </summary>
        </member>
        <member name="T:C1.Chart.GridUnitType">
            <summary>
            GridUnitType enum is used to indicate what kind of value the 
            GridLength is holding.
            </summary>
        </member>
        <member name="F:C1.Chart.GridUnitType.Auto">
            <summary>
            The value indicates that content should be calculated without constraints. 
            </summary>
        </member>
        <member name="F:C1.Chart.GridUnitType.Pixel">
            <summary>
            The value is expressed as a pixel.
            </summary>
        </member>
        <member name="F:C1.Chart.GridUnitType.Star">
            <summary>
            The value is expressed as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:C1.Chart.GridLength">
            <summary>
            GridLength is the type used for various length-like properties in the system, 
            that explicitely support Star unit type. For example, "Width", "Height" 
            properties of ColumnDefinition and RowDefinition used by Grid.
            </summary>
        </member>
        <member name="M:C1.Chart.GridLength.#ctor(System.Double)">
            <summary>
            Constructor, initializes the GridLength as absolute value in pixels.
            </summary>
            <param name="pixels">Specifies the number of 'device-independent pixels' </param>
        </member>
        <member name="M:C1.Chart.GridLength.#ctor(System.Double,C1.Chart.GridUnitType)">
            <summary>
            Constructor, initializes the GridLength and specifies what kind of value 
            it will hold.
            </summary>
            <param name="value">Value to be stored by this GridLength 
            instance.</param>        
            <param name="unit">Type of the value to be stored by this GridLength 
            instance.</param>
        </member>
        <member name="P:C1.Chart.GridLength.Value">
            <summary>
            Returns value part of this GridLength instance.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.UnitType">
            <summary>
            Returns unit type of this GridLength instance.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.IsStar">
            <summary>
            Returns <c>true</c> if this GridLength instance holds weighted propertion 
            of available space.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.IsAbsolute">
            <summary>
            Returns <c>true</c> if this GridLength instance holds 
            an absolute (pixel) value.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.IsAuto">
            <summary>
            Returns <c>true</c> if this GridLength instance is 
            automatic (not specified).
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.Auto">
            <summary>
            Returns initialized Auto GridLength value.
            </summary>
        </member>
    </members>
</doc>
