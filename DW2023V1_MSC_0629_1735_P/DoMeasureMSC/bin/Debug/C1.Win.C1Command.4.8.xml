<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Command.4.8</name>
    </assembly>
    <members>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://www.grapecity.com/pricing/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoHowToActivate">
            <summary>
              Goto web site http://www.grapecity.com/componentone/docs/license/online-license/overview.html.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoLicenseRenewal">
            <summary>
              Goto web site https://www.grapecity.com/sales/componentone-faq/.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.WinFormLicenseProvider`1">
            <summary>
              Represents a license provider of a Windows Forms PowerTools component.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.Dock_SizeMode">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Normal">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Fit">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.FillToEnd">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsHeaderOnly">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsLineOnly">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.Full">
            <summary>
            Borders are shown for all cells.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.CheckBoxStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            C1MultiSelect\C1CheckList\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.System">
            <summary>
            Standard system view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Black">
            <summary>
            Like a MS Office 2007 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Blue">
            <summary>
            Like a MS Office 2007 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Silver">
            <summary>
            Like a MS Office 2007 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Black">
            <summary>
            Like a MS Office 2010 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Blue">
            <summary>
            Like a MS Office 2010 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Silver">
            <summary>
            Like a MS Office 2010 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2013">
            <summary>
            Like a MS Office 2013.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Windows10">
            <summary>
            Like a Windows 10.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Fill">
            <summary>
            The image is stretched and aspect ratio is saved.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016">
            <summary>
            Office 2016 palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016Dark">
            <summary>
            Office 2016 dark palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.GroupTabStyle">
            <summary>
            Used in:
            C1Schedule\GroupTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.FullWidth">
            <summary>
            Group headers of rectangular shape take the full width of the corresponding group.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2007">
            <summary>
            Group headers of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2016">
            <summary>
            Group headers of Office2016 appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.WeekTabStyle">
            <summary>
            Used in:
            C1Schedule\WeekTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2007">
            <summary>
            Week tabs of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2016">
            <summary>
            Week tabs of Office2016 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Flat">
            <summary>
            Flat image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.Frame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.HalfFrame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Colorful">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Black">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.None">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.None">
            <summary>
            No gradient filling.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Horizontal">
            <summary>
            From left (first color) to right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.HorizontalCenter">
            <summary>
            From center (first color) to left and right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Vertical">
            <summary>
            From top (first color) to bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.VerticalCenter">
            <summary>
            From center (first color) to top and bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Diagonal">
            <summary>
            From left-bottom (first color) to right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalCenter">
            <summary>
            From center (first color) to left-bottom and right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBack">
            <summary>
            From left-top (first color) to right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBackCenter">
            <summary>
            From center (first color) to left-top and right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Radial">
            <summary>
            From center (first color) to corners (second color) in radial direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.FromCenter">
            <summary>
            From center (first color) to corners (second color).
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.C1Themes.Shared.ThemeBrushBase,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.C1Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
            <param name="color">Theme solid brush color to set.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.C1Themes.Shared.C1ThemeProxy,System.String,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.EmptyIfTransparent(System.Drawing.Color)">
            <summary>
            Gets an empty color instead of a transparent color; otherwise, it returns the specified color.
            </summary>
            <param name="color">The specified color.</param>
            <returns>Empty color if transparent color was set.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.C1Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorToString(System.Drawing.Color)">
            <summary>
            Converts color value to string.
            </summary>
            <param name="value">The color to be converted.</param>
            <returns>The string represents the color.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorFromString(System.String)">
            <summary>
            Converts string value to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <returns>The color value.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryColorFromString(System.String,System.Drawing.Color@)">
            <summary>
            Converts string to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <param name="value">The color is the result of the conversion.</param>
            <returns>True if the string to color conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.BoolToString(System.Boolean)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="value">Boolean value.</param>
            <returns>"true" if value is true and "false" if value is false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryBoolFromString(System.String,System.Boolean@)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="s">String value to convert.</param>
            <param name="value">Boolean result.</param>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.BlendToString(System.Drawing.Drawing2D.Blend)">
            <summary>
            Converts blend pattern object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object to convert.</param>
            <returns>Converted blend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryBlendFromString(System.String,System.Drawing.Drawing2D.Blend@)">
            <summary>
            Converts string to blend pattern object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorBlendToString(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to convert.</param>
            <returns>Converted ColorBlend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryColorBlendFromString(System.String,System.Drawing.Drawing2D.ColorBlend@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value">Converted ColorBlend pattern as string if conversion was successful.</param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.PointToString(System.Drawing.Point)">
            <summary>
            Converts <see cref="T:System.Drawing.Point"/> object to string.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object to convert.</param>
            <returns>The string representing point.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryPointFromString(System.String,System.Drawing.Point@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Point"/> object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object.></param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
            <param name="data">The string of data to assign.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.GetData">
            <summary>
            Gets the data string.
            </summary>
            <returns>The data string.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.Add(System.String)">
            <summary>
            Appends a string to data.
            </summary>
            <param name="s">The string to add.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.Next">
            <summary>
            Finds characters to the end of the string.
            </summary>
            <returns>True if characters were found; otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.Utils.ValuesStore.Value">
            <summary>
            Gets the characters to the end of the string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_C1PrefixRemovedFormatVersion">
            <summary>
            Version of theme XML when C1 prefix was removed
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewInputFormatVersion">
            <summary>
            Version of theme XML when structure of C1Input theme was changed
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CustomizerForm">
            <summary>
            Represents a main customization form.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_tabToolbars">
            <summary>
            A TabPage, describing toolbars.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_tabCommands">
            <summary>
            A TabPage, describing available commands.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnOK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnCancel">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnNew">
            <summary>
            A button for adding a new toolbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnDelete">
            <summary>
            A button for deleting toolbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_categoriesList">
            <summary>
             A list of all command categories.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_lblCategories">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_lblCommands">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_lblDescription">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_textAndImage">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_textOnly">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_imageOnly">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_textBelow">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_textAbove">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_textOnRight">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_textOnLeft">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnSave">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnRename">
            <summary>
            A button for saving toolbar layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnRestore">
            <summary>
            A button to restoring toolbar layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_commandsParentPanel">
            <summary>
            A Panel control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_commandsPanel">
            <summary>
            A Panel control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_lblCommandsHelp">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_statusBar">
            <summary>
            A StatusBar control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_statusText">
            <summary>
            A StatusBarPanel control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnReset">
            <summary>
            A button to reset toolbar layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_toolbarsList">
            <summary>
            A list of all customizable toolbars.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_grpButtonLook">
            <summary>
            A GroupBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_grpButtonLayout">
            <summary>
            A GroupBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_chkCustomizeButton">
            <summary>
            A CheckBox switching visibility of Customize link in the selected toolbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_tabPages">
            <summary>
            A TabControl control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_grpDescription">
            <summary>
            A GroupBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_grpButtonAlign">
            <summary>
            A GroupBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_alignFar">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_alignCenter">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_alignNear">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_tabOptions">
            <summary>
            A TabPage control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_grpVisualStyle">
            <summary>
            A GroupBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_chkSmooth">
            <summary>
            A CheckBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_grpColorFont">
            <summary>
            A GroupBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnFont">
            <summary>
            A button to call Font dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnBackColor">
            <summary>
            A button to call Color dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_btnForeColor">
            <summary>
            A button to call Color dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_fontDialog">
            <summary>
            A Font dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_colorDialog">
            <summary>
            A Color dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_updownThreshold">
            <summary>
            A NumericUpDown control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_menuList">
            <summary>
            A CheckedListBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_comboStyle">
            <summary>
            A ComboBox control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_lblRecentThreshold">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CustomizerForm.m_lblHideOldLinks">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.#ctor">
            <summary>
            Initializes a new instance of the C1CustomizerForm class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CustomizerForm.OwnerForm">
            <summary>
            The form, which is owner for this form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.OnLoad(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.OnClosed(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.FindFirst(System.String)">
            <summary>
            Finds first command in C1CommandHolder belongs to category.
            </summary>
            <param name="catname">Category name.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CustomizerForm.FindNext(System.String)">
            <summary>
            Finds next command in C1CommandHolder belongs to category.
            </summary>
            <param name="catname">Category name.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.C1NewToolbarForm">
            <summary>
            Represents dialog for entering a new toolbar name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NewToolbarForm.m_toolbarName">
            <summary>
            The Textbox control
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NewToolbarForm.m_prompt">
            <summary>
            The Label control
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NewToolbarForm.m_btnOK">
            <summary>
            OK button
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NewToolbarForm.m_btnCancel">
            <summary>
            Cancel button
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NewToolbarForm.#ctor">
            <summary>
            Initializes a new instance of the C1NewToolbarForm class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NewToolbarForm.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1NewToolbarForm.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1NewToolbarForm.ToolbarName">
            <summary>
            The name of new toolbar
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NewToolbarForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.AlertWithRegistryKey.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.GeneralDesigner">
            <summary>
            Provides AboutBox designer verb.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.C1CommandDockDesigner">
            <summary>
            Summary description for C1CommandDockDesigner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.C1CommandLinksEditor">
            <summary>
            C1CommandLinksEditor
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.C1DockingTabDesigner.C1#Util#Design#Floaties#IFloatieOwner#Position">
            <summary>
            Position of small button with arrow for showing main floatie
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.C1NavBarDesigner.C1#Util#Design#Floaties#IFloatieOwner#Position">
            <summary>
            Position of small button with arrow for showing main floatie
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.C1OutBarDesigner.C1#Util#Design#Floaties#IFloatieOwner#Position">
            <summary>
            Position of small button with arrow for showing main floatie
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.C1TopicBarDesigner.C1#Util#Design#Floaties#IFloatieOwner#Position">
            <summary>
            Position of small button with arrow for showing main floatie
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.GlyphStateEnum.UnderMouse">
            <summary>
            When glyph is under mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.GlyphStateEnum.Active">
            <summary>
            When glyph or one of its children is under mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.GlyphStateEnum.Visible">
            <summary>
            Exists if glyph is visible.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.GlyphBase">
            <summary>
            Base class for all glyphs and all designers who implemented IFloatieService
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.GlyphBase.m_Areas">
            <summary>
            Specifies the area of glyph, all coordinates specified
            relative to the adorner window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.GlyphBase._lastArea">
            <summary>
            Last area that was found in the GetHitTest method,
            can be interpretated as area currently under mouse, use
            Areas[_lastArea] to get r of this area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.GlyphBase._clipRect">
            <summary>
            The clipping rectangle for this glyph,
            this rectangle is used in GetHitTest and painting.
            Coordinates are specified relative to the adorner window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphBase.GetClipRect">
            <summary>
            Returns the clipping rectangle that should be defined
            before painting of this glyph, coordinates
            should be specified relative to the adorner window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphBase.GetAreas">
            <summary>
            Returns the array of rectangles representing the content of the glyph,
            this array will be stored in the Areas property, coordinates
            should be specified relative to the adorner window.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.GlyphBase.StatusText">
            <summary>
            Gets the text to show in the "status glyph" (as a prompt to the user).
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.DesignerAreaGlyph">
            <summary>
            Glyph used to highlight some area on the designer
            (but does not yet have any customize buttons/floaties).
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.CustomizableAreaGlyph">
            <summary>
            Glyph highlights its area on the designer, and also
            pops up a floatie allowing to invoke dialogs etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.CustomizableAreaGlyph.OnMouseEnter">
            <summary>
            Called when the mouse enters the glyph.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.CustomizableAreaGlyph.OnMouseLeave">
            <summary>
            Called when the mouse leaves the glyph.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.CustomizableControlGlyph">
            <summary>
            Glyph corresponding to an entire control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.GlyphManager">
            <summary>
            Implements all interactions with glyphs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphManager.ShowMenu(System.Windows.Forms.ContextMenuStrip,System.Drawing.Point)">
            <summary>
            Displays the drop-down menu at specified screen position.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphManager.ShowFormModal(C1.Win.C1Command.Design.GlyphBase,C1.Win.C1Command.Design.BaseToolForm,System.Drawing.Point)">
            <summary>
            Displays the drop-down MODAL form at specified position,
            the position should be specified relative to top-left corner of screen.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphManager.ShowForm(C1.Win.C1Command.Design.GlyphBase,C1.Win.C1Command.Design.BaseToolForm,System.Drawing.Point)">
            <summary>
            Displays the drop-down form at specified position,
            the position should be specified relative to top-left corner of screen.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphManager.ShowForm(C1.Win.C1Command.Design.GlyphBase,C1.Win.C1Command.Design.BaseToolForm,System.Drawing.Rectangle)">
            <summary>
            Displays the drop-down form at specified position,
            the dropDownButtonBounds rectangle should be specified
            relative to top-left corner of adorner window,
            the form will be aligned to fit into screen and 
            not overlap the dropDownButtonBounds.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.GlyphManager.IsPointInSystemGlyph(System.Drawing.Point)">
            <summary>
            Returns true if point is within some of system glyps, that not should be ignored.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.GlyphUtil">
            <summary>
            Contains some utils to draw the design-time glyphs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.InplaceTextEditGlyphBase.Element">
            <summary>
            This property is used to change edited element on-the-fly
            It is useful for typed collections, where we want to edit a property
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.ShortcutPicker">
            <summary>
            ShortcutPicker
            Uses the Dock UITypeEditor to show a form where users can pick Dock settings
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ShortcutPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.Design.ShortcutPicker"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.ImageIndexPicker">
            <summary>
            ImageIndexPicker
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ImageIndexPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.Design.ImageIndexPicker"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.ImageIndexPicker.DropDownStyle">
            <summary>
            Gets the drop-down list style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.ImageIndexPicker.Value">
            <summary>
            Gets or sets drop-down image index within the <see cref="P:C1.Win.C1Command.Design.ImageIndexPicker.ImageList"/> collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ImageIndexPicker.ShouldSerializeValue">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.Design.ImageIndexPicker.ResetValue">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.Design.ImageIndexPicker.ImageList">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Command.Design.ImageIndexPicker.ImageList"/> collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ImageIndexPicker.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.Design.IconPicker">
            <summary>
            IconPicker
            Uses the Image UITypeEditor to show a form where users can pick icons
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.IconPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.Design.IconPicker"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.IconPicker.DropDownStyle">
            <summary>
            Gets the drop-down list style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.IconPicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.Design.IconPicker.Value">
            <summary>
            Gets or sets the drop-down list <see cref="T:System.Drawing.Icon"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.IconPicker.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Win.C1Command.Design.BaseFloatieForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.BaseFloatieForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.BaseFloatieForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.BaseToolForm.FullRefresh">
            <summary>
            Fully refreshes a form's controls.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.BaseToolForm.Glyph">
            <summary>
            Gets or sets the GlyphBase object creating this form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.BaseToolForm.SetFlag(System.String,System.Object,System.Boolean)">
            <summary>
            sets a flag
            </summary>
            <param name="propName">the property name (must be [Flags]enum)</param>
            <param name="flagValue">specific flag constant</param>
            <param name="value">the new value for the flag</param>
        </member>
        <member name="F:C1.Win.C1Command.Design.CommandLinkPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.CommandLinkPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.CommandLinkPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.CommandMenuAppearanceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.CommandMenuAppearanceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.CommandMenuAppearanceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.CommandPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.CommandPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.CommandPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.DockingTabAppearanceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.DockingTabAppearanceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.DockingTabAppearanceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.DockingTabBehaviorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.DockingTabBehaviorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.DockingTabBehaviorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.DockingTabTabAreaForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.DockingTabTabAreaForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.DockingTabTabAreaForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.InplaceTextForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.InplaceTextForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.InplaceTextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.MainMenuAppearanceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.MainMenuAppearanceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.MainMenuAppearanceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.MainMenuMiscForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.MainMenuMiscForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.MainMenuMiscForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.NavBarMiscForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.NavBarMiscForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.NavBarMiscForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.NavBarPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.NavBarPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.NavBarPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.NavButtonPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.NavButtonPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.NavButtonPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.OutBarMiscForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.OutBarMiscForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.OutBarMiscForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.OutBarPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.OutBarPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.OutBarPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.OutPagePropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.OutPagePropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.OutPagePropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.SideCaptionPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.SideCaptionPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.SideCaptionPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.TabPagePropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.TabPagePropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.TabPagePropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.ToolBarAppearanceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ToolBarAppearanceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.ToolBarAppearanceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.ToolBarLayoutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ToolBarLayoutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.ToolBarLayoutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.ToolBarMiscForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.ToolBarMiscForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.ToolBarMiscForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.TopicBarMiscForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicBarMiscForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicBarMiscForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.TopicBarPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicBarPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicBarPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.TopicLinkPropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicLinkPropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicLinkPropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.TopicPagePropsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicPagePropsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.Design.TopicPagePropsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.FloatieImageIndexEditor">
            <summary>
            ImageIndexEditor with property to define ImageList manually
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.InplaceEditForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.NavBarPanelsEditor">
            <summary>
            NavBarPanelsEditor
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.NewCommandTypeDlg">
            <summary>
            Summary description for NewCommandTypeDlg.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Design.NewCommandTypeDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.NewCommandTypeDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Design.NewCommandTypeDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Design.RadialMenuItemCollectionEditor">
            <summary>
            RadialMenuItemCollectionEditor
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Design.RootBarDesigner.C1#Util#Design#Floaties#IFloatieOwner#Position">
            <summary>
            Position of small button with arrow for showing main floatie
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandDock">
            <summary>
                The C1CommandDock control provides docking and floating capabilities to C1Command toolbars (class C1ToolBar) and
                tab controls (class C1DockingTab).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.#ctor">
            <summary>
                Initializes a new instance of the C1CommandDock class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.#ctor(System.String)">
            <summary>
                For internal use only.
            </summary>
            <param name="runtimeKey">Runtime key.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.Dispose(System.Boolean)">
            <summary>
                Releases the resources used by the C1CommandDock.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.DockOrFloatChild(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
                Docs or floats the specified control.
            </summary>
            <param name="child">The child control.</param>
            <param name="screenPt">The x- and y-coordinates of the point where the child control will be moved.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.InitLayout">
            <summary>
                This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnDockChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnBackColorChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnFontChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnForeColorChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnStyleChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnEnabledChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnResize(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.OnParentChanged(System.EventArgs)">
            <summary>
                This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDock.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.ScaleChildren">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.TabStop">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.TabIndex">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoScroll">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.Dock">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoDockLeft">
            <summary>
                Indicates whether to automatically create a dock area on the left.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoDockTop">
            <summary>
                Indicates whether to automatically create a dock area at the top.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoDockRight">
            <summary>
                Indicates whether to automatically create a dock area on the right.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoDockBottom">
            <summary>
                Indicates whether to automatically create a dock area at the bottom.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AllowFloat">
            <summary>
                Indicates whether to allow floating C1ToolBar and C1DockingTab controls.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoSize">
            <summary>
                Sets or returns whether the dock automatically adjusts its size.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.Horizontal">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.AutoCreated">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.DockingStyle">
            <summary>
                Specifies docking behavior of C1DockingTab controls.
            </summary>
            <remarks>
                <para>
                    If the DockingStyle property is set to Default,
                    docking works without the selectors: when you drag a floating panel over another panel,
                    a gray frame appears to show you the position that the instance of C1DockingTab will
                    have once you release it.
                </para>
                <para>
                    The VS2005 docking style feedback is similar to Visual Studio 2005, using docking zone
                    selectors to specify where the dragged view will be docked if you release it.
                </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.FloatHide">
            <summary>
                Defines behavior of floating windows when the application loses focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.Id">
            <summary>
                This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDock.LayoutEngine">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingManager">
            <summary>
            Allows to customize docking behavior for associated C1DockingTab or C1DockingTabPage control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.#ctor">
            <summary>
                Initializes new instance of <see cref="T:C1.Win.C1Command.C1DockingManager" />
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
                Initializes new instance of <see cref="T:C1.Win.C1Command.C1DockingManager" />
            </summary>
            <param name="container">
            </param>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingManager.ParentContainer">
            <summary>
                Gets of sets parent Form, associated with the docking manager.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingManager.Site">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingManager.AllowFloat">
            <summary>
                Indicates whether to allow floating.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingManager.ResizingMode">
            <summary>
              Defines the form resizing mode. ResizingMode.Proportional value makes all <see cref="T:C1.Win.C1Command.C1CommandDock"/> controls of the form  resize proportionally.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingManager.DragSizingMode">
            <summary>
            Gets or sets a value which determines whether and how to adjust the control sizes after dragging.
            </summary>
            <remarks>
            If <see cref="P:C1.Win.C1Command.C1DockingManager.DragSizingMode"/> is set to <see cref="F:C1.Win.C1Command.ResizingMode.Proportional"/>, 
            then the size of the controls will be adjusted proportionally,
            otherwise the sizes remain unchanged after dragging.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingManager.FloatingWindowOptions">
            <summary>
            Specifies floating windows options.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.ShouldSerializeFloatingWindowOptions">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1DockingManager.FloatingWindowOptions"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1DockingManager.FloatingWindowOptions"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.ResetFloatingWindowOptions">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1DockingManager.FloatingWindowOptions"/> property to its default value.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.FloatingWindowCreated">
            <summary>
                Notifies that a <see cref="T:C1.Win.C1Command.C1DockingTab" /> or a <see cref="T:C1.Win.C1Command.C1DockingTabPage" /> changed state to floating.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnFloatingWindowCreated(C1.Win.C1Command.FloatingWindowCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.FloatingWindowCreated"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.FloatingWindowCreatedEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.Floating">
             <summary>
                 Notifies that a <see cref="T:C1.Win.C1Command.C1DockingTab" /> or a <see cref="T:C1.Win.C1Command.C1DockingTabPage" /> is changing state to floating. Can
                 be canceled.
             </summary>
             <remarks>
             By default, the <see cref="P:System.Windows.Forms.Form.FormBorderStyle"/> of the floating window is <see cref="F:System.Windows.Forms.FormBorderStyle.SizableToolWindow"/>, hence only "Close" button is shown in the window's caption.
            It is possible to change the floating window border style and visibility of Maximize box using <see cref="E:C1.Win.C1Command.C1DockingManager.Floating"/> event handler.
             </remarks>
             <example>
             This example sets sizable FormBorderStyle and shows Maximize box for each floating window shown.
             <code>
            private void c1DockingManager1_Floating(object sender, FloatingEventArgs e)
            {
                e.FormBorderStyle = FormBorderStyle.Sizable;
                e.MaximizeBox = true;
            }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnFloating(C1.Win.C1Command.FloatingEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.Floating"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.FloatingEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.QueryAllowDrop">
            <summary>
                Occurs during a docking operation and enables the source to determine whether it can be dropped into the target
                place.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnQueryAllowDrop(C1.Win.C1Command.AllowDropEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.QueryAllowDrop"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.AllowDropEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.QueryEnabledAnchors">
            <summary>
                Occurs during a docking operation and enables the source to determine docking anchors that should be disabled.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnQueryEnabledAnchors(C1.Win.C1Command.DockingAnchorsEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.QueryEnabledAnchors"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.DockingAnchorsEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.TabPageClosed">
            <summary>
            Occurs after a page has been closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnTabPageClosed(C1.Win.C1Command.TabPageEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.TabPageClosed"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.TabPageEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.TabPageClosing">
            <summary>
            Occurs when the currently selected page is about to be closed by the user. Allows to cancel closing the page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnTabPageClosing(C1.Win.C1Command.TabPageCancelEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.TabPageClosing"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.TabPageCancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.TabPageMoved">
            <summary>
            Occurs when a tab is moved by the user.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnTabPageMoved(C1.Win.C1Command.TabPageMovedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.TabPageMoved"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.TabPageMovedEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.Dragging">
            <summary>
            Occurs when the user starts to drag a <see cref= "T:C1.Win.C1Command.C1DockingTab" /> or a <see cref="T:C1.Win.C1Command.C1DockingTabPage" />.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnDragging(C1.Win.C1Command.FloatingEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.Dragging"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.FloatingEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.Resizing">
            <summary>
            Occurs when the user starts to resize a <see cref= "T:C1.Win.C1Command.C1DockingTab" /> or a <see cref="T:C1.Win.C1Command.C1CommandDock"/> using a splitter.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnResizing(C1.Win.C1Command.ResizingEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.Resizing"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.ResizingEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.Resize">
            <summary>
            Occurs when the user releases the splitter after resizing a <see cref= "T:C1.Win.C1Command.C1DockingTab" /> or a <see cref="T:C1.Win.C1Command.C1CommandDock"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnResize(C1.Win.C1Command.ResizeEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.Resize"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.ResizeEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingManager.Dragged">
             <summary>
             Occurs after <see cref= "T:C1.Win.C1Command.C1DockingTab"/> or <see cref="T:C1.Win.C1Command.C1DockingTabPage"/> is dragged.
             </summary>
             <example>
             You can change size <see cref="P:C1.Win.C1Command.C1DockingManager.DragSizingMode"/> value here, 
             depending on your needs. Which will allow you to enable or disable
             automatic resizing whenever you need it. Or you can manually set 
             the value for the dragged control.
             <code>
            private void c1DockingManager1_Dragged(object sender, DraggedEventArgs e)
            {
                switch(e.DockingTab.Dock)
                {
                     case DockStyle.Left:
                     case DockStyle.Right:
                         c1DockingManager1.DragSizingMode = ResizingMode.Proportional;
                         break;
                     case DockStyle.Top:
                     case DockStyle.Bottom:
                         c1DockingManager1.DragSizingMode = ResizingMode.Default;
                         e.DockingTab.Height = 100;
                         break;
                     default:
                         c1DockingManager1.DragSizingMode = ResizingMode.Default;
                         break;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingManager.OnDragged(C1.Win.C1Command.DraggedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingManager.Dragged"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.DraggedEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingTab">
            <summary>
            This class implements the familiar tab control interface: several overlaying pages (each of which can
            contain arbitrary controls) accessible via tabs at the side of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.#ctor">
            <summary>
            Initializes a new instance of the C1DockingTab class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.#ctor(System.String)">
            <summary>
            This constructor is for internal use only.
            </summary>
            <param name="info">Runtime key</param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabClick">
            <summary>
            Occurs when the page header of DockingTab is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.AutoHidingChanging">
            <summary>
            Event fires when the AutoHiding property is about to change. Allows to cancel the change.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.Refreshed">
            <summary>
            Fired by the Refresh method. Catch-all for changes affecting the docking tab.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.AutoCreatedDockingTab">
            <summary>
            Fired when a new C1DockingTab is automatically created in response to user actions (e.g. tearing off a tab and dropping it elsewhere).
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.AlignmentChanged">
            <summary>
            Occurs when the Alignment property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.AutoHidingChanged">
            <summary>
            Occurs when the AutoHiding property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.CanAutoHideChanged">
            <summary>
            Occurs when the CanAutoHide property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.CanCloseTabsChanged">
            <summary>
            Occurs when the CanCloseTabs property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.ShowTabsChanged">
            <summary>
            Occurs when the ShowTabs property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.ShowTablistChanged">
            <summary>
            Occurs when the ShowTabList property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.CanMoveTabsChanged">
            <summary>
            Occurs when the CanMoveTabs property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.DrawTab">
            <summary>
            Allows to override the standard drawing of the tabs with custom drawing.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.HotTrackChanged">
            <summary>
            Occurs when the HotTrack property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.IndentChanged">
            <summary>
            Occurs when the Indent property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.ItemSizeChanged">
            <summary>
            Occurs when the ItemSize property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.MeasureTab">
            <summary>
            Allows to arbitrarily change the size of the tabs.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.MultiLineChanged">
            <summary>
            Occurs when the MultiLine property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.PaddingChanged">
            <summary>
            Occurs when the Padding property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.SelectedIndexChanging">
            <summary>
            Event fired when the index of the currently selected page is about to change. Allows to cancel the change.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.SelectedIndexChanged">
            <summary>
            Occurs when the SelectedIndex property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.SelectedTabChanged">
            <summary>
            Event fired when the SelectedTab is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.ShowSingleTabChanged">
            <summary>
            Occurs when the ShowSingleTab property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.ShowCaptionChanged">
            <summary>
            Occurs when the ShowCaption property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabLookChanged">
            <summary>
            Occurs when the TabLook property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabLayoutChanged">
            <summary>
            Occurs when the TabLayout property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabPageClosing">
            <summary>
            Event fired when the currently selected page is about to be closed by the user. Allows to cancel closing the page.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabPageClosed">
            <summary>
            Event fired after a page has been closed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabSizeModeChanged">
            <summary>
            Occurs when the TabSizeMode property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.AlignTabsChanged">
            <summary>
            Occurs when the AlignTabs property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabStyleChanged">
            <summary>
            Occurs when the TabStyle property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.FloatingChanged">
            <summary>
            Occurs when the Floating property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.RightToLeftLayoutChanged">
            <summary>
            Occurs when the RightToLeftLayout property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.TabPageMoved">
            <summary>
            Occurs when a tab is moved by the user.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.LayoutExclude">
            <summary>
            List of controls whose children are excluded from SaveLayout / RestoreLayout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabTextAlignment">
            <summary>
            Gets or sets a value that specifies the alignment of a text shown on the tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabsShowFocusCues">
            <summary>
            Gets or sets a value indicating whether tabs should display focus rectangles.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.CloseBox">
            <summary>
            Gets or sets position of close box.
            </summary>
            <remarks>
            This property has effect only if <see cref="P:C1.Win.C1Command.C1DockingTab.CanCloseTabs"/> is True.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.DockPreventModifierKey">
            <summary>
            Gets or sets modifier key which, if pressed, will prevent the floating control from docking when it is moved around at runtime.
            </summary>
            <remarks>
            If several modifier keys are specified, pressing any one will work.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.OutlineMode">
            <summary>
            Gets or sets the mode used to draw window outline while moving the window.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabStop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabPages">
            <summary>
            Gets the collection of tab pages in this control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.SelectedTab">
            <summary>
            Gets or sets the currently selected page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetSelectedIndex">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1DockingTab.SelectedIndex"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeSelectedIndex">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1DockingTab.SelectedIndex"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1DockingTab.SelectedIndex"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ImageList">
            <summary>
            Gets or sets the image list used to provide images to show on the control’s tabs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabLook">
            <summary>
            Gets or sets the look of the tabs (whether to show text, image or both).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabLayout">
            <summary>
            Gets or sets the layout of text and images on the tabs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Padding">
            <summary>
            Gets or sets the amount of space around images and text shown on the tabs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializePadding">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetPadding">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Alignment">
            <summary>
            Gets or sets the area of the control (top, bottom, left or right) where the tabs are aligned.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabSizeMode">
            <summary>
            Gets or sets the way in which the tabs are sized.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.CanMoveTabs">
            <summary>
            Gets or sets a value indicating whether the end user can rearrange tabs by dragging them around at runtime.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.CanRenameTabs">
            <summary>
            Gets or sets a value indicating whether the end user can rename tabs by double clicking on the tab's text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.HotTrack">
            <summary>
            Gets or sets a value indicating whether the control's tabs change in appearance when the mouse passes over them.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.AlignTabs">
            <summary>
            Gets or sets the value indicating how tabs are aligned along the side of the page content area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Animate">
            <summary>
            Gets or sets a value indicating whether to use animation when showing or hiding the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.MultiLine">
            <summary>
            Gets or sets a value indicating whether more than one row of tabs can be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Text">
            <summary>
            Gets the text of the currently selected tab (runtime-only).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabCount">
            <summary>
            Gets the number of pages in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.RowCount">
            <summary>
            Gets the number of tab rows (runtime-only).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Indent">
            <summary>
            Gets or sets the indentation of the first tab from the side of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ItemSize">
            <summary>
            Gets or sets the size of the tabs (if empty, the size is calculated automatically based on content).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeItemSize">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetItemSize">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ScrollActive">
            <summary>
            Gets the value indicating whether tabs scrolling arrows are currently shown (runtime-only).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.AutoHiding">
            <summary>
            Gets or sets the value indicating whether the pages of the tab control are in auto-hiding mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ShowSingleTab">
            <summary>
            Gets or sets a value indicating whether a tab will be shown when there is only one page in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.CanCloseTabs">
            <summary>
            Gets or sets a value indicating whether individual tab pages can be closed by the end user. If CanCloseTabs is true, a close icon appears either in the caption area (if ShowCaption is true), or in the tabs area otherwise.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.KeepClosedPages">
            <summary>
            Gets or sets a value indicating whether a tab page closed by the end user should be kept in an internal array (used when a previously saved tabs layout is restored). The default is true.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ShowCaption">
            <summary>
            Gets or sets a value indicating whether caption is shown on the pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.CanAutoHide">
            <summary>
            Gets or sets a value indicating whether the pages can auto-hide (if both CanAutoHide and ShowCaption are true, a pin icon appears in the caption area).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.SplitterWidth">
            <summary>
            Gets or sets the width of automatic splitters drawn between pages of the control when page docking is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TextDirection">
            <summary>
            Gets or sets the direction of the text drawn on the tabs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Dock">
            <summary>
            Gets or sets the docking of the control in the parent container. Can be specified only for controls not parented in a C1CommandDock.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.BorderStyle">
            <summary>
            Indicates the border style for the DockingTab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabStyle">
            <summary>
            Indicates the tab style for the DockingTab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabsCanFocus">
            <summary>
            Gets or sets a value indicating whether tabs can receive focus on mouse click.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.AcceptsCtrlTab">
            <summary>
            Gets or sets a value indicating whether the control handles Ctrl-Tab and Ctrl-Shift-Tab keys.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.CreatorDockingTab">
            <summary>
            Gets the C1DockingTab which automatically created this instance in response to user actions.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetBackColor">
            <summary>
            Resets the BackColor property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabAreaBackColor">
            <summary>
            Gets or sets the background color for the tab area.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetTabAreaBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeTabAreaBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.Floating">
            <summary>
            Gets the value indicating whether the C1DockingTab is currently floating (runtime-only).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.UIStrings">
            <summary>
            Gets the array of user interface strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabAreaBorder">
            <summary>
            Gets or sets the value indicating whether to draw border around the tab area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabsSpacing">
            <summary>
            Gets or sets the distance between tabs (may be negative to overlap tabs).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.TabAreaSpacing">
            <summary>
            Gets or sets the spacing between the edge of the tab area and the tabs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.SelectedTabBold">
            <summary>
            Gets or sets the value indicating whether to draw selected tab text with bold font.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ShowTabList">
            <summary>
            Gets or sets the value indicating whether to show a button with dropdown list of all tabs (ignored in multiline mode).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ShowTabs">
            <summary>
            Gets or sets whether tabs area is displayed within the <see cref="T:C1.Win.C1Command.C1DockingTab" />.
            </summary>
            <remarks>
            Use the ShowTabs property to control the display of the tabs.
            If this property is set to false, the tabs area is not displayed.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.RightToLeftLayout">
            <summary>
            Gets or sets a value indicating whether right-to-left mirror placement is turned on.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.MinimumSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.MaximumSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnAutoHidingChanging(System.ComponentModel.CancelEventArgs)">
            <summary>
            Fires the AutoHidingChanging event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.CreateAccessibilityInstance">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1DockingTab.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.DefaultSize">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.DisplayRectangle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.Refresh">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.CreateControlsInstance">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnDoubleClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMouseCaptureChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnResize(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnSizeChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnFontChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.IsHot(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Returns true if the specified tab is in the hot state, otherwise false.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.BeginUpdate">
            <summary>
            Temporarily suspends the layout logic for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.EndUpdate">
            <summary>
            Resumes normal layout logic.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.Close(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Closes the tab page specified.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.SlideHidePage">
            <summary>
            Hides the page by sliding it to the side.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.SlideShowPage(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Shows the page by sliding it out.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.SlideShowPage(System.Int32)">
            <summary>
            Shows the page by sliding it out.
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.FindPage(System.String)">
            <summary>
            Returns the page with the specified tab text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ScrollToSelectedTab">
            <summary>
            Scrolls the tabs if necessary so that the tab of the currently selected page is visible.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.GetCreatedDockingTabs">
            <summary>
            Returns the collection of all C1DockingTab components that were automatically
            created as the result of user interaction with the current C1DockingTab
            (e.g. when a page is teared off and dropped to float outside of the form).
            </summary>
            <returns>The array of automatically created C1DockingTab controls.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabClick"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnSelectedIndexChanging(C1.Win.C1Command.SelectedIndexChangingEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.SelectedIndexChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.SelectedIndexChangingEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnSelectedTabChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.SelectedTabChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnPaddingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.PaddingChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnAlignmentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.AlignmentChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabSizeModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabSizeModeChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnCanMoveTabsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.CanMoveTabsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnHotTrackChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.HotTrackChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMultiLineChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.MultiLineChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnIndentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.IndentChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnItemSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.ItemSizeChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabLookChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabLookChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabLayoutChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabLayoutChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnAlignTabsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.AlignTabsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnShowSingleTabChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.ShowSingleTabChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnShowCaptionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.ShowCaptionChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnCanCloseTabsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.CanCloseTabsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnShowTabsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.ShowTabsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnShowTabListChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.ShowTablistChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnCanAutoHideChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.CanAutoHideChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnAutoHidingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.AutoHidingChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnRightToLeftLayoutChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.RightToLeftLayoutChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnFloatingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.FloatingChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabPageClosing(C1.Win.C1Command.TabPageCancelEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabPageClosing"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.TabPageCancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabPageClosed(C1.Win.C1Command.TabPageEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabPageClosed"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.TabPageEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabStyleChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnAutoCreatedDockingTab(C1.Win.C1Command.AutoCreatedDockingTabEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.AutoCreatedDockingTab"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.AutoCreatedDockingTabEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnMeasureTab(C1.Win.C1Command.MeasureTabEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.MeasureTab"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.MeasureTabEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnTabPageMoved(C1.Win.C1Command.TabPageMovedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.TabPageMoved"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.TabPageMovedEventArgs"/> that contains event data.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.HasVisibleTabs">
            <summary>
            returns true if docking tab has some visible pages
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab._setSelectedIndex(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the SelectedIndex property
            </summary>
            <param name="value">The index to be set (-1, 0..TabPages.Count - 1)</param>
            <param name="force">Force re-setting/re-drawing if new value same as current</param>
            <param name="animate">Animate if sliding page.</param>
            <param name="events">Fire index change events.</param>
            <param name="respectEnabled"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab._validatePageIndex(System.Int32)">
            <summary>
            looks for the nearest to the spec'd index with TabVisible page
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyle"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ResetVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1DockingTab.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.SaveLayout(System.Windows.Forms.Form,System.IO.Stream,System.String[])">
            <summary>
            Saves layout of all C1DockingTab controls on the form to the stream.
            </summary>
            <param name="form"></param>
            <param name="stream"></param>
            <param name="pageProperties">Additional property names of the C1DockingTabPage that you would like to store.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.SaveLayout(System.Windows.Forms.Form,System.String,System.String[])">
            <summary>
            Saves layout of all C1DockingTab controls on the form to the specified file.
            </summary>
            <param name="form"></param>
            <param name="filename"></param>
            <param name="pageProperties">Additional property names of the C1DockingTabPage that you would like to store.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.RestoreLayout(System.Windows.Forms.Form,System.IO.Stream)">
            <summary>
            Restores layout of all C1DockingTab controls on the form from the stream.
            </summary>
            <param name="form"></param>
            <param name="stream"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.RestoreLayout(System.Windows.Forms.Form,System.String)">
            <summary>
            Restores layout of all C1DockingTab controls on the form from the specified file.
            </summary>
            <param name="form"></param>
            <param name="filename"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.Float(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Floats the page out from the form.
            </summary>
            <param name="tabPage">The tab page to float out.</param>
            <remarks>
            Floats out the page to a default position.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.Float(C1.Win.C1Command.C1DockingTabPage,System.Drawing.Point)">
            <summary>
            Floats the specified tab page out from the form.
            </summary>
            <param name="tabPage">The tab page to float.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.Float(C1.Win.C1Command.C1DockingTabPage,System.Int32,System.Int32)">
            <summary>
            Floats the specified tab page out from the form.
            </summary>
            <param name="tabPage">The tab page to float.</param>
            <param name="x">The x coordinate of the screen point to float to.</param>
            <param name="y">The y coordinate of the screen point to float to.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.GetTabRowCol(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column of the specified tab in the tabs of the C1DockingTab.
            </summary>
            <param name="tabIdx"></param>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTab.ShowToolTipsChanged">
            <summary>
            Occurs when the ShowToolTips property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.OnShowToolTipsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTab.ShowToolTipsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> object.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.ShowToolTips">
            <summary>
            Gets or sets a value indicating whether the tool tip is shown when the mouse passes over the tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTab.SuperTooltip">
            <inheritdoc cref="P:C1.Win.C1SuperTooltip.ISupportSuperTooltip.SuperTooltip"/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTab.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingTabPage">
            <summary>
            Represents a single tab page in a C1DockingTab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.#ctor">
            <summary>
            Initializes a new instance of the C1DockingTabPage class.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTabPage.TabClick">
            <summary>
            Occurs when the page header is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTabPage.CaptionTextChanged">
            <summary>
            Occurs when the caption text changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTabPage.ToolTipTextChanged">
            <summary>
            Occurs when the tooltip text changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTabPage.TabVisibleChanged">
            <summary>
            Occurs when the visibility of the tab changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTabPage.Closing">
            <summary>
            Event fired when the page is about to be closed by the user. Allows to cancel closing the page.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1DockingTabPage.Closed">
            <summary>
            Event fired after the page has been closed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.ImageIndex">
            <summary>
            Gets or sets the index of the tab image in the tab control's ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.Image">
            <summary>
            Gets or sets the tab image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.Text">
            <summary>
            Gets or sets the text shown on the tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.CaptionText">
            <summary>
            Gets or sets the text in the caption area of the page. If not specified, defaults to the value of the Text property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeCaptionText">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetCaptionText">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.Dock">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.ToolTipText">
            <summary>
            Gets or sets the ToolTip text for the tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.IsSelected">
            <summary>
            Gets the value indicating whether this page is currently selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.TabVisible">
            <summary>
            Gets or sets the value indicating whether the tab is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.CloseTabBehavior">
            <summary>
            Defines behavior on C1DockingTabPage's CloseBox click.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.TabBounds">
            <summary>
            Returns the tab bounds of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetBackColor">
            <summary>
            Resets the BackColor property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.TabBackColor">
            <summary>
            Gets or sets the background color for the tab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetTabBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeTabBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.TabBackColorSelected">
            <summary>
            Gets or sets the background color for the selected tab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetTabBackColorSelected">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeTabBackColorSelected">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.TabForeColor">
            <summary>
            Gets or sets the text color for the nonselected tab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetTabForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeTabForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.CaptionVisible">
            <summary>
            Gets or sets whether caption is shown on the pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.TabForeColorSelected">
            <summary>
            Gets or sets the text color for the selected tab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ResetTabForeColorSelected">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.ShouldSerializeTabForeColorSelected">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.IsHot">
            <summary>
             Gets a value indicating whether the mouse pointer is located over tab area of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.IsPressed">
            <summary>
             Gets a value indicating whether the mouse is pressed on tab area of the page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.Float">
            <summary>
            Floats the page out from the form to a default position.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.Float(System.Drawing.Point)">
            <summary>
            Floats the page out from the form to the specified position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.Float(System.Int32,System.Int32)">
            <summary>
            Floats the page out from the form to the specified coordinates.
            </summary>
            <param name="x">The x coordinate of the screen point to float to.</param>
            <param name="y">The y coordinate of the screen point to float to.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.DockTo(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Docks the page to the another target page.
            </summary>
            <param name="targetPage">The target page.</param>
            <remarks>
            The page becomes the next page after the target page.
            If you want to Dock this page the first use DockTo(C1DockingTab)/>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.DockTo(C1.Win.C1Command.C1DockingTab)">
            <summary>
            Docks the page to the target DockingTab.
            </summary>
            <param name="targetDockingTab">The target docking tab.</param>
            <remarks>
            The page becomes the first page at the target DockingTab.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1DockingTabPage.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.CreateControlsInstance">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnEnabledChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnFontChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPage.DisplayRectangle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the HandleCreated event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnEnter(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnGotFocus(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnLostFocus(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.SetVisibleCore(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnParentRightToLeftChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnTextChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnVisibleChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnTabClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1DockingTabPage.TabClick"/> event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnClosed(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnToolTipTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnCaptionTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPage.OnTabVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingTabPages">
            <summary>
            Represents a collection of C1DockingTabPage elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPages.VisibleCount">
            <summary>
            Returns number of pages where TabVisible property is True.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.Clear">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.check_page(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.OnPageAdded(System.Windows.Forms.Control)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="apage"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.OnPageRemoved(System.Windows.Forms.Control,System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="apage"></param>
            <param name="pageIdx"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.OnPageRemoved2(System.Windows.Forms.Control,System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="apage"></param>
            <param name="pageIdx"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.BeginUpdate">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.EndUpdate">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPages.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPages.Item(System.String)">
            <summary>
            Gets a dockingtab page with the specified key from the collection. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPages.IndexOfKey(System.String)">
            <summary>
            Returns the index of the first occurrence of the C1DockingTabPage with the specified key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.ContainerEnum">
            <summary>
            Describe what kind of controls are contained in the commanddock
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.FloatingWindowCreatedEventArgs">
            <summary>
            Provides data for the <see cref="E:FloatingWindowCreatedEventArgs" /> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.FloatingWindowCreatedEventArgs.Form">
            <summary>
            The created Form.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.FloatingWindowCreatedEventHandler">
            <summary>
            A method template that is used to handle <see cref="E:C1.Win.C1Command.C1DockingManager.FloatingWindowCreated"/> event. 
            </summary>
            <param name="sender">The source of an event. </param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Command.FloatingEventArgs">
            <summary>
            Represents the arguments, associated with a <see cref="E:C1.Win.C1Command.C1DockingManager.Floating"/> event. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.FloatingEventArgs.DockingTab">
            <summary>
            The floated <see cref="T:C1.Win.C1Command.C1DockingTab"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.FloatingEventArgs.DockingTabPage">
            <summary>
            The floated <see cref="T:C1.Win.C1Command.C1DockingTabPage"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.FloatingEventArgs.FormBorderStyle">
            <summary>
            Gets or sets border style of the floating window.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.FloatingEventArgs.MaximizeBox">
            <summary>
            Gets or sets a value indicating whether the Maximize button is displayed in the caption bar of the floating window. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.FloatingEventHandler">
            <summary>
            Defines method signature to handle the <see cref="E:C1.Win.C1Command.C1DockingManager.Floating"/> event. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.DraggedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Command.C1DockingManager.Dragged"/> event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DraggedEventArgs.DockingTab">
            <summary>
            The docking tab that was dragged.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DraggedEventArgs.SourceDock">
            <summary>
            The command dock from which the <see cref="T:C1.Win.C1Command.C1DockingTab"/> or <see cref="T:C1.Win.C1Command.C1DockingTabPage"/> were dragged.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DraggedEventArgs.DestinationDock">
            <summary>
            The command dock that the <see cref="T:C1.Win.C1Command.C1DockingTab"/> or <see cref="T:C1.Win.C1Command.C1DockingTabPage"/> were dragged to.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ResizingEventArgs">
            <summary>
            Represents the arguments, associated with a <see cref="E:C1.Win.C1Command.C1DockingManager.Resizing"/> event. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.ResizingEventArgs.Control">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1DockingTab"/> control that is being resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.ResizingEventArgs.Side">
            <summary>
            The side of the <see cref="T:C1.Win.C1Command.C1DockingTab"/> control that is being resized.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ResizingEventHandler">
            <summary>
            Defines method signature to handle the <see cref="E:C1.Win.C1Command.C1DockingManager.Resizing"/> event. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ResizeEventArgs">
            <summary>
            Represents the arguments, associated with a <see cref="E:C1.Win.C1Command.C1DockingManager.Resize"/> event. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.ResizeEventArgs.Control">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1DockingTab"/> or <see cref="T:C1.Win.C1Command.C1CommandDock"/> control that is being resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.ResizeEventArgs.Side">
            <summary>
            The side of the control that is being resized.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.ResizeEventArgs.NewSize">
            <summary>
            The new size of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.ResizeEventArgs.Neighbor">
            <summary>
            The neighbor control.
            </summary>
            <remarks>
            Null if no neighbor control exists.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Command.ResizeEventHandler">
            <summary>
            Defines method signature to handle the <see cref="E:C1.Win.C1Command.C1DockingManager.Resize"/> event. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.AllowDropEventArgs">
            <summary>
             Represents the arguments, associated with a <see cref="E:C1.Win.C1Command.C1DockingManager.QueryAllowDrop"/> event. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllowDropEventArgs.SourceDockingTab">
            <summary>
            Gets source docking tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllowDropEventArgs.SourceDockingTabPage">
            <summary>
            Gets source docking tab page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllowDropEventArgs.TagretCommandDock">
            <summary>
            Gets target command dock.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllowDropEventArgs.TagretDockingTab">
            <summary>
            Gets target docking tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllowDropEventArgs.TagretBounds">
            <summary>
            Gets target bounds.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllowDropEventArgs.TargetDockStyle">
            <summary>
            Gets target docking style.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.AllowDropTargetEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:AllowDropEventArgs" /> event of a <see cref="T:C1DockingManager" />.
            </summary>
            <param name="sender">The source of an event. </param>
            <param name="e">A <see cref="T:AllowDropEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:C1.Win.C1Command.Anchors">
            <summary>
            Represents docking anchors.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.None">
            <summary>
            No anchors is selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.Left">
            <summary>
            Left anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.Top">
            <summary>
            Top anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.Right">
            <summary>
            Right anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.Bottom">
            <summary>
            Bottom anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.DiamondCenter">
            <summary>
            Diamond-center anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.DiamondLeft">
            <summary>
            Diamond-left anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.DiamondTop">
            <summary>
            Diamond-top anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.DiamondRight">
            <summary>
            Diamond-right anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.DiamondBottom">
            <summary>
            Diamond-bottom anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.DiamondAll">
            <summary>
            All diamond anchors.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.Anchors.All">
            <summary>
            All anchors are selected.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.DockingAnchorsEventArgs">
            <summary>
             Represents the arguments, associated with a <see cref="E:C1.Win.C1Command.C1DockingManager.QueryEnabledAnchors"/> event. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DockingAnchorsEventArgs.Anchors">
            <summary>
            Get or sets allowed anchors.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DockingAnchorsEventArgs.SourceDockingTab">
            <summary>
            Gets source docking tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DockingAnchorsEventArgs.SourceDockingTabPage">
            <summary>
            Gets source docking tab page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DockingAnchorsEventArgs.ScreenPoint">
            <summary>
            Gets the screen point.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DockingAnchorsEventArgs.CommandDockUnderCursor">
            <summary>
            Returns a <see cref="T:C1.Win.C1Command.C1CommandDock"/> that is under the cursor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.DockingAnchorsEventArgs.DockingTabUnderCursor">
            <summary>
            Returns a <see cref="T:C1.Win.C1Command.C1DockingTab"/> that is under the cursor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.DockingAnchorsEventHandler">
            <summary>
            Represents the method that handles the a docking operations event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Command.DockingAnchorsEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.DockingTabDragger.IsHTControlButton(System.IntPtr)">
            <summary>
            Returns true if HitTest returns the control button.
            </summary>
            <param name="htResult">A result of processing the WM_NCHITTEST.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.AllDockingTabs">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.AllDockingTabs.#ctor">
            <summary>
            Initializes a new instance of the AllDockingTabs class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllDockingTabs.CommandDocks">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.AllDockingTabs.DockingTabs">
            <summary>
            This property is for internal use only.
            </summary>
            <remarks>
            stores all C1DockingTab-s that is not in C1CommandDock
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.AllDockingTabs.Restore(System.Windows.Forms.Form)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="form"></param>        
        </member>
        <member name="M:C1.Win.C1Command.AllDockingTabs.FindNamedControl(System.Windows.Forms.Control,System.String,System.Type)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="parent"></param>
            <param name="text"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandDockReflector">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDockReflector.#ctor">
            <summary>
            Initializes a new instance of the C1CommandDockReflector class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDockReflector.Id">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDockReflector.Name">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDockReflector.Size">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDockReflector.BackColor">
            <summary>
            Gets or sets the the background color for the <see cref="T:C1.Win.C1Command.C1CommandDock"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDockReflector.DockingTabs">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandDockReflector.DragDockingTabs">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandDockReflector.Restore(C1.Win.C1Command.C1CommandDock)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="dock"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingTabReflector">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabReflector.#ctor">
            <summary>
            Initializes a new instance of the C1DockingTabReflector class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabReflector.Restore(C1.Win.C1Command.C1CommandDock)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="dock"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabReflector.Restore(System.Windows.Forms.Control)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="control"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.DockingTabPages">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.Name">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.CreatorDockingTab">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.Size">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.SlideSize">
            <summary>
            Gets or sets the slide size for the <see cref="T:C1.Win.C1Command.C1DockingTab"/> owner.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.OldBounds">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.Location">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.ParentName">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.ParentLocation">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.AutoHiding">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.Floating">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabReflector.SelectedIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingTabPageReflector">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPageReflector.#ctor">
            <summary>
            Initializes a new instance of the C1DockingTabPageReflector class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPageReflector.Name">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPageReflector.TabVisible">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPageReflector.ChildIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1DockingTabPageReflector.Properties">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1DockingTabPageReflector.SerializableProperty">
            <summary>
            Defines a name/value property pair that can be set or retrieved.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1DockingTabPageReflector.SerializableProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1DockingTabPageReflector.SerializableProperty"/> structure
            with the specified name and value.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The property value serialized to a string.</param>
        </member>
        <member name="F:C1.Win.C1Command.C1DockingTabPageReflector.SerializableProperty.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1DockingTabPageReflector.SerializableProperty.Value">
            <summary>
            The property value serialized to a string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Docking.Drawing.BoxRenderer">
            <summary>
            Draw a rectangular area with parameters.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.BoxRenderer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Command.Docking.Drawing.BoxRenderer"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.BoxRenderer.DrawThemedBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Brush,System.Drawing.Color,System.Int32)">
            <summary>
            Draws the rectangle with parameters.
            </summary>
            <param name="g">A <see cref = "T:System.Drawing.Graphics"/> object that encapsulates a GDI+ drawing surface.</param>
            <param name="r">The rectangle area to paint.</param>
            <param name="b">A <see cref = "T:System.Drawing.Brush"/> object to fill the rectangle.</param>
            <param name="borderColor">The color of the border of the rectangle.</param>
            <param name="corners">Radius of all rectangle corners, in pixels.</param>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.BoxRenderer.DrawThemedBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Brush,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Windows.Forms.TabAlignment,System.Boolean)">
            <summary>
            Draws the rectangle with parameters.
            </summary>
            <param name="g">A <see cref = "T:System.Drawing.Graphics"/> object that encapsulates a GDI+ drawing surface.</param>
            <param name="r">The rectangle area to paint.</param>
            <param name="b">A <see cref = "T:System.Drawing.Brush"/> object to fill the rectangle.</param>
            <param name="borderColor">A <see cref = "T:System.Drawing.Color"/> structure that represents the border starting color for the gradient.</param>
            <param name="borderColor2">A <see cref = "T:System.Drawing.Color"/> structure that represents the border ending color for the gradient.</param>
            <param name="borderColor3">The tab bottom line color.</param>
            <param name="corners">Radius of all rectangle corners, in pixels.</param>
            <param name="orientation">A <see cref = "T:System.Windows.Forms.TabAlignment"/> structure that specifies the locations of the tabs in a tab control.</param>
            <param name="skipBottomCorners"></param>
        </member>
        <member name="T:C1.Win.C1Command.Docking.Drawing.DockingTabRenderer">
            <summary>
            Summary description for DockingTabPaint.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.DockingTabRenderer.InflateBorder(C1.Win.C1Command.C1DockingTab,System.Drawing.Rectangle)">
            <summary>
            Inflated distance between borders and client area of dockingtab
            </summary>
            <param name="r"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.DockingTabRenderer.GetStartIndent(C1.Win.C1Command.C1DockingTab)">
            <summary>
            Indent between edge of whole dockingtab and it's first visible tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.DockingTabRenderer.GetEndIndent(C1.Win.C1Command.C1DockingTab)">
            <summary>
            Indent between edge of whole dockingtab and it's last visible tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.DockingTabRenderer.GetTabSpace(System.Int32)">
            <summary>
            Space between neighboring tabs
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.DockingTabRenderer.GetTabMargin(System.Int32)">
            <summary>
            Margins between edge of tab and it's "client" area
            </summary>
            <param name="tabHeight">height of tabs area - for calculating margin</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.Docking.Drawing.IFontOwner">
            <summary>
            The font owner interface.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Docking.Drawing.IFontOwner.Font">
            <summary>
            Gets the owner font.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawTabSlide(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DockStyle)">
            <summary>
            Draws tab slide.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawTabPage(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Int32,System.Int32)">
            <summary>
            Draws tab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawBorders(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws borders.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawTabArea(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws tab area.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawTabAreaBorder(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws tab area border.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawScrollButtons(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws scroll buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawCloseButtonOnTabArea(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws close button on tab area.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawListButtonOnTabArea(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws list button on tab area.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawUnpinnedPage(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws tab button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.InflateBorder(C1.Win.C1Command.C1DockingTab,System.Drawing.Rectangle)">
            <summary>
            Inflated distance between borders and client area of docking tab
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.GetStartIndent(C1.Win.C1Command.C1DockingTab)">
            <summary>
            Indent between edge of whole docking tab and it's first visible tab
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.GetEndIndent(C1.Win.C1Command.C1DockingTab)">
            <summary>
            Indent between edge of whole docking tab and it's last visible tab
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.GetTabSpace(System.Int32)">
            <summary>
            Space between neighboring tabs
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.GetTabMargin(System.Int32)">
            <summary>
            Margins between edge of tab and it's "client" area
            </summary>
            <param name="tabHeight">height of tabs area - for calculating margin</param>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabRenderer.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws focus rectangle;
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabPageRenderer.DrawTabCaption(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Boolean)">
            <summary>
            Draws tab caption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabPageRenderer.DrawCloseButtonOnCaption(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws close button on caption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabPageRenderer.DrawPinButton(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws pin button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabPageRenderer.DrawListButtonOnCaption(C1.Win.C1Command.C1DockingTab,System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws list button on caption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Docking.Drawing.IDockingTabPageRenderer.DrawPageBackground(C1.Win.C1Command.C1DockingTabPage,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws page background.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Docking.FloatingWindowOptions">
            <summary>
            Specifies <see cref="T:C1.Win.C1Command.C1DockingManager"/> floating windows options.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Docking.FloatingWindowOptions.CloseSingleTab">
            <summary>
            Gets or sets a value indicating whether a single page or the floating window should be closed on the window's close button click.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Docking.FloatingWindowOptions.FormBorderStyle">
            <summary>
            Gets or sets border style of the floating window.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Docking.FloatingWindowOptions.MaximizeBox">
            <summary>
            Gets or sets a value indicating whether the Maximize button is displayed in the caption bar of the floating window. 
            </summary>
            <remarks>
            This property has effect only if <see cref="P:C1.Win.C1Command.Docking.FloatingWindowOptions.FormBorderStyle"/> property is set to <see cref="F:System.Windows.Forms.FormBorderStyle.Sizable"/> value.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Command.Docking.Style.State">
            <summary>
            All possible states
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Docking.Style.CaptionState">
            <summary>
            All possible caption states
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.FloatingForm">
            <summary>
            Summary description for Popup.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Layout.CommandDockLayoutEngine.FillCtrlRects(System.Windows.Forms.Control)">
            <summary>
                Fills the _ctrlRects array with all currently visible controls and their bounds.
            </summary>
            <param name="movedControl">
                The control that will not be added to the _ctrlRects
                (usually this is the control that the user moved, so it's size and location are
                to be given higher priority).
            </param>
        </member>
        <member name="M:C1.Win.C1Command.Resizer.Resizer.AdjustSizes(System.Drawing.Size,C1.Win.C1Command.ResizingMode,System.Windows.Forms.DockStyle)">
            <summary>
            Used to adjust the content sizes after autocreated command dock is added.
            Adjustment is made according to the specified ResizingMode.
            </summary>
            <param name="offset">Content size offset.</param>
            <param name="adjustMode">Resizing mode.</param>
            <param name="dock">DockStyle of the autocreated command dock.</param>
        </member>
        <member name="T:C1.Win.C1Command.ResizingMode">
            <summary>
            Resizing mode of <see cref="T:C1.Win.C1Command.C1DockingManager"/> 
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ResizingMode.Default">
            <summary>
            Default mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ResizingMode.Proportional">
            <summary>
            Proportional mode
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.TabStyleEnumConverter">
            <summary>
            Provides a type converter to convert TabStyleEnum objects to and from various other representations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TabStyleEnumConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the EnumConverter class for the given type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> Type that represents the type of enumeration to associate with this enumeration converter. </param>
        </member>
        <member name="M:C1.Win.C1Command.TabStyleEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TabStyleEnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBarHitTestTypeEnum">
            <summary>
            Type of topic bar element at a specific point on the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.None">
            <summary>
            The point is out of the C1TopicBar's area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.Empty">
            <summary>
            The point is in the C1TopicBar's empty area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.PageTitle">
            <summary>
            The point is on empty space of a page title area (not over a text, image or expand/collapse indicator).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.PageTitleIndicator">
            <summary>
            The point is on expand/collapse indicator of a page title.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.PageTitleImage">
            <summary>
            The point is on image of a page title.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.PageTitleText">
            <summary>
            The point is on text of a page title.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.PageBody">
            <summary>
            The point is on a page body (but not on a link).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.Link">
            <summary>
            The point is on empty space of a link (not over a text or image).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.LinkImage">
            <summary>
            The point is on image of a link.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestTypeEnum.LinkText">
            <summary>
            The point is on text of a link.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBarHitTestInfo">
            <summary>
            Contains information, such as the page and the link
            in the <see cref="T:C1.Win.C1Command.C1TopicBar"/> control.
            </summary>
            <remarks>
            Use the <see cref="M:C1.Win.C1Command.C1TopicBar.HitTest"/> method to obtain a <see cref="T:C1.Win.C1Command.C1TopicBarHitTestInfo"/> value.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestInfo.Type">
            <summary>
            Gets a <see cref="T:C1.Win.C1Command.C1TopicBarHitTestTypeEnum"/> that describes the type of element described by a <see cref="T:C1.Win.C1Command.C1TopicBarHitTestInfo"/>.
            </summary>
            <remarks>
            This property allows you to determine whether the point corresponds to a topic link or
            to special elements such as title image or text, and so on.</remarks>        
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestInfo.Page">
            <summary>
            Get the <see cref="T:C1.Win.C1Command.C1TopicPage"/> at the point being tested (if the point does not correspond to a page, it returns null).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1TopicBarHitTestInfo.Link">
            <summary>
            Get the <see cref="T:C1.Win.C1Command.C1TopicLink"/> at the point being tested (if the point does not correspond to a page, it returns null).
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.   
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Localization.DesignStrings">
            <summary>
            Static class containing UI strings used in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Localization.DesignStrings.ResourceManager">
            <summary>
            The <see cref="P:C1.Win.C1Command.Localization.DesignStrings.ResourceManager"/> object used for lookup resources.
            </summary>
            <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
        </member>
        <member name="P:C1.Win.C1Command.Localization.DesignStrings.UICulture">
            <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo"/> object used as fallback culture.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Localization.Strings">
            <summary>
            Static class containing UI strings used in run-time.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.UIStringsItemEventHandler">
            <summary>
            Represents a handler for an <see cref="T:C1.Win.C1Command.UIStrings"/> item related event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.UIStringsItemEventArgs">
            <summary>
            Provides data for an <see cref="T:C1.Win.C1Command.UIStrings"/> item related event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStringsItemEventArgs.Key">
            <summary>
            Gets key of the item being added or changed.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:C1.Win.C1Command.UIStringsItemEventArgs.Value">
            <summary>
            Gets the string value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:C1.Win.C1Command.UIStringsItemEventArgs.IsDefault">
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            	<c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Win.C1Command.UIStringsItemEventArgs.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:C1.Win.C1Command.UIStrings">
            <summary>
            Represents a collection of end user visible UI strings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.Item(System.Object)">
            <summary>
            Gets or sets the string value for the specified key.
            </summary>
            <param name="key">The key of the string.</param>
            <returns>The string corresponding to the specified key.</returns>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.Content">
            <summary>
            Used for serialization of strings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.Description">
            <summary>
            Gets or sets the description shown in Properties window in the IDE.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.Items">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.Sorter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.Add(System.Object,System.Int32,System.String,System.String)">
            <summary>
            Adds a string to the collection, specifying the ordinal.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="ordinal">The ordinal of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.Add(System.Object,System.String,System.String)">
            <summary>
            Adds a string to the collection in alphabetical order.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.AddInOrder(System.Object,System.String,System.String)">
            <summary>
            Adds a string to the collection, preserving the order.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.Reset">
            <summary>
            Sets all strings in collection to their default values.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.ShouldSerialize">
            <summary>
            Indicates whether any of the strings in the current collection
            have non-default values.
            </summary>
            <returns><c>true</c> if any of the strings have non-default values, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.IsDefault(System.Object)">
            <summary>
            Tests whether a string in the collection has default value.
            </summary>
            <param name="key">The key of the string to test.</param>
            <returns><c>true</c> if the string has default value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.GetDescription(System.Object)">
            <summary>
            Returns the description of a string.
            </summary>
            <param name="key">The key of the string to get the description of.</param>
            <returns>The string's description</returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.Reset(System.Object)">
            <summary>
            Resets a string to its default value.
            </summary>
            <param name="key">The key of the string to reset.</param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.ConvertFromStr(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.ConvertToStr(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.GetKeyAt(System.Int32)">
            <summary>
            Returns the key of an item with the specified index.
            </summary>
            <param name="index">The item index.</param>
            <returns>The item's key.</returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.GetValueAt(System.Int32)">
            <summary>
            Gets the string by its index.
            </summary>
            <param name="index">The string index.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.SetValueAt(System.Int32,System.String)">
            <summary>
            Sets the value of a string with the specified index.
            </summary>
            <param name="index">The string index.</param>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.SaveValuesToStringArray">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.RestoreValuesFromStringArray(System.String[])">
            <summary>
            For internal use.
            </summary>
            <param name="values"></param>
        </member>
        <member name="E:C1.Win.C1Command.UIStrings.ItemAdded">
            <summary>
            Occurs when a new item is added to the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.OnItemAdded(C1.Win.C1Command.UIStringsItemEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Command.UIStrings.ItemAdded"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.UIStrings.ItemChanged">
            <summary>
            Occurs when an item in the collection is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.OnItemChanged(C1.Win.C1Command.UIStringsItemEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Command.UIStrings.ItemChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="E:C1.Win.C1Command.UIStrings.CollectionChanged">
            <summary>
            Occurs when the collection has been changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.OnCollectionChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Command.UIStrings.CollectionChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.UIStrings.TypeConverter">
            <summary>
            Provides type conversion for the <see cref="T:C1.Win.C1Command.UIStrings"/> type.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attrFilter"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.#ctor(System.String,System.Attribute[],System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use.
            </summary>
            <param name="name"></param>
            <param name="attributes"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.GetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.IsReadOnly">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.UIStrings.TypeConverter.StringPropertyDescriptor.DesignTimeOnly">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.ProvideHolder(System.Windows.Forms.Control)">
            <summary>
            Return or create commandholder for a control
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.AnyBarHasInputFocus">
            <summary>
            Return true if any toolbar, menu or popupmenu has embedded control (in commandcontrol)
            which has input focus
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.BeginUpdate">
            <summary>
            Start to calculate layout, prevent painting
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.EndUpdate">
            <summary>
            End to calculate layout, resume painting
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.ChangingActiveState">
            <summary>
            Commandlink is in process being current active link or not
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.CustMode">
            <summary>
            Bar in customize mode or not
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.MeasureText(System.String,System.Drawing.Graphics)">
            <summary>
            Return the size of given text using current font and current text format
            </summary>
            <param name="text"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.PaddingH">
            <summary>
            Padding between text and left or right link edge
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.PaddingV">
            <summary>
            Padding between text and top or bottom link edge
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.ItemSize">
            <summary>
            Standard link size (height) in this bar and with current bar font
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.TextFormat">
            <summary>
            String format for painting text in commandlinks, individual for each bar
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OnLayout">
            <summary>
            Calculate size and location of bar and command links on it
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.CalcPadding(System.Drawing.Graphics)">
            <summary>
            Calculate padding using current VisualStyle
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.Horizontal">
            <summary>
            Return if bar is horizontal or not.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OnParentChanged(System.EventArgs)">
            <summary>
            Handler for ParentChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OnPopUp(C1.Win.C1Command.IBarInternal,C1.Win.C1Command.C1CommandLink)">
            <summary>
            Restore active control after popup menu is closed
            </summary>
            <param name="master"></param>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OnPopDown(System.Boolean)">
            <summary>
            Save current active control before popup menu will shown
            </summary>
            <param name="restoreActive"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn._mouseInNestedControl(C1.Win.C1Command.C1CommandLink)">
            <summary>
            Return true if mouse cursor is over embedded control in commandlink
            </summary>
            <param name="cl"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.DragLinkBegin(C1.Win.C1Command.C1CommandLink,System.Int32,System.Int32)">
            <summary>
            Actions performed before commandlink is started to drag
            </summary>
            <param name="cl"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.IsRealMouseMove">
            <summary>
            Check if mouse coordinates are really changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Actions performed on mouse down
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Actions performed om mouse up
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateChar(System.Char)">
            <summary>
            Find a link with given Alt+char and invoke it
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateToFirstItem">
            <summary>
            Select first link as current
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyDown">
            <summary>
            Execute navigation in menu when Arrow Down key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyUp">
            <summary>
            Execute navigation in menu when Arrow Up key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyRight">
            <summary>
            Execute navigation in menu when Arrow Right key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyLeft">
            <summary>
            Execute navigation in menu when Arrow Left key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.DesignNavigateKeyDown">
            <summary>
            Execute navigation in menu when Arrow Down key is pressed at designtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.DesignNavigateKeyUp">
            <summary>
            Execute navigation in menu when Arrow Up key is pressed at designtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.DesignNavigateKeyRight">
            <summary>
            Execute navigation in menu when Arrow Right key is pressed at designtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.DesignNavigateKeyLeft">
            <summary>
            Execute navigation in menu when Arrow Left key is pressed at designtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyHome">
            <summary>
            Execute navigation in menu when Home key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyEnd">
            <summary>
            Execute navigation in menu when End key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyTab">
            <summary>
            Execute navigation in menu when Tab key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyShiftTab">
            <summary>
            Execute navigation in menu when Shift+Tab key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.NavigateKeyEnter">
            <summary>
            Execute navigation in menu when Enter key is pressed
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.PopDownAll(System.Boolean)">
            <summary>
            Pop down all submenus in current stack
            </summary>
            <param name="restoreActive"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.PopDownOne(System.Boolean)">
            <summary>
            Pop down top submenu in current stack
            </summary>
            <param name="restoreActive"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.PopDownAllChildren">
            <summary>
            Pop down all child submenus in current stack
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.BarAddIn.IsDropDown">
            <summary>
            Indicates whether any sub-menu is open.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.InvokeCommandLink(C1.Win.C1Command.C1CommandLink,C1.Win.C1Command.BarAddIn.InvokedBy)">
            <summary>
            Execute linked command or open submenu for given commandlink
            </summary>
            <param name="cl"></param>
            <param name="invokedBy"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.OpenSubMenu(C1.Win.C1Command.C1CommandMenu,C1.Win.C1Command.C1CommandLink,C1.Win.C1Command.BarAddIn.InvokedBy)">
            <summary>
            Open menu as submenu for given commandlink
            </summary>
            <param name="subMenu"></param>
            <param name="cl"></param>
            <param name="invokedBy"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.CommandLinkAtPoint(System.Drawing.Point)">
            <summary>
            Return commandlink which is visible in given point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.CommandLinkAtPoint(System.Int32,System.Int32)">
            <summary>
            Return commandlink which is visible in given point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.CommandLinkAtScreenPoint(System.Drawing.Point)">
            <summary>
            Return commandlink which is visible in given point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.CommandLinkAtScreenPoint(System.Int32,System.Int32)">
            <summary>
            Return commandlink which is visible in given point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.SetCurrentItem(C1.Win.C1Command.C1CommandLink)">
            <summary>
            Highlight given commandlink as current link
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.GetLinkWithControl(System.Windows.Forms.Control)">
            <summary>
            Return commandlink with given embedded control
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.ShowTooltipWindow(C1.Win.C1Command.C1CommandLink,System.Boolean)">
            <summary>
            Show tooltip for given commandlink
            </summary>
            <param name="cl"></param>
            <param name="isToolbar"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.TimerStart(C1.Win.C1Command.BarAddIn,C1.Win.C1Command.C1CommandLink)">
            <summary>
            Start timer for given commandlink in bar
            </summary>
            <param name="timerOwner"></param>
            <param name="timerCommandLink"></param>
        </member>
        <member name="M:C1.Win.C1Command.BarAddIn.TimerEventHandler(System.Object,System.EventArgs)">
            <summary>
            Execute actions when timer event is occured:
            invoke commandlink or pop down all children or scroll links in menu
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1Command">
            <summary>
            The base for specialized commands such as button (a plain button, the only action is invoke),
            submenu (points to a menu or a toolbar), textbox (text entry), list, combo etc. etc.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1Command.Empty">
            <summary>
            Empty command
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.#ctor">
            <summary>
            Initializes a new instance of the C1Command class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1Command.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.AddCommandLink(C1.Win.C1Command.C1CommandLink)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.RemoveCommandLink(C1.Win.C1Command.C1CommandLink)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="cl"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.ImageTransparentColor">
            <summary>
            Gets or sets the color to treat as transparent in a image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.GetImageTransparentColor">
            <summary>
            Returns ImageTransparentColor with additional conditions.
            When ImageTransparentColor is empty then need check the left-bottom pixel of image
            or get ImageTransparentColor from owner C1CommandHolder.
            </summary>        
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ShouldSerializeImageTransparentColor">
            <summary>
            Returns true if this ImageTransparentColor property has changed; otherwise, returns false.
            </summary>    
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ResetImageTransparentColor">
            <summary>
            Resets the ImageTransparentColor property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Owner">
            <summary>
            C1CommandHolder containing this command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.DefaultText">
            <summary>
            Default text for new items of this type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Text">
            <summary>
            Gets or sets the text of the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Name">
            <summary>
            Gets or sets the name of the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.ToolTipText">
            <summary>
            Gets or sets the tool tip text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Category">
            <summary>
            Gets or sets the command category.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Visible">
            <summary>
            Gets or sets the command visibility.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Enabled">
            <summary>
            Gets or sets whether the command is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Checked">
            <summary>
            Gets or sets whether the command is checked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Pressed">
            <summary>
            Gets or sets whether the command is pressed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.DropDown">
            <summary>
            Gets or sets whether the command has a drop down arrow when it is in a toolbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.CheckAutoToggle">
            <summary>
            If true, the Checked property value is toggled automatically when this command is invoked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Shortcut">
            <summary>
            Gets or sets the keyboard shortcut associated with the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.ShortcutText">
            <summary>
            Gets or sets the shortcut text associated with the command.
            </summary>
            <remarks>
            <para>>Use this property to localize shortcuts.</para>
            <para>If <see cref="P:C1.Win.C1Command.C1Command.Shortcut"/> property is empty or <see cref="P:C1.Win.C1Command.C1Command.ShowShortcut"/> is False, then the <see cref="P:C1.Win.C1Command.C1Command.ShortcutText"/> has no any effect.</para>
            <para>If <see cref="P:C1.Win.C1Command.C1Command.ShortcutText"/> property is empty, then default value is used for the shortcut.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.ShowShortcut">
            <summary>
            Indicates whether the shortcut for this command will be shown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.ShowTextAsToolTip">
            <summary>
            Indicates whether this command's text will be shown as tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Icon">
            <summary>
            Gets or sets the command icon.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ShouldSerializeIcon">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ResetIcon">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.ImageIndex">
            <summary>
            Gets or sets the index of the command image (in C1CommandHolder.ImageList).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Image">
            <summary>
            Gets or sets the command image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ShouldSerializeImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ResetImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.UserData">
            <summary>
            Arbitrary data that can be associated with the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.IsParent">
            <summary>
            Determines whether this command is a non-empty submenu. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.Mnemonic">
            <summary>
            Returns the value of the mnemonic character, or the character following the ampersand, to be used as an access key.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.C1ContextMenu">
            <summary>
            Gets or sets the C1ContextMenu component associated with this command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ShouldSerializeC1ContextMenu">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1Command.C1ContextMenu"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1Command.C1ContextMenu"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.ResetC1ContextMenu">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1Command.C1ContextMenu"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.Invoke(C1.Win.C1Command.ClickEventArgs)">
            <summary>
            Invokes the command.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.PerformClick">
            <summary>
            Generates a click event for the C1Command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.PerformSelect">
            <summary>
            Raises the Select event for the C1Command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.StateQuery">
            <summary>
            Fires the CommandStateQuery event, updates any changed properties.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.Click">
            <summary>
            Event fired when the command is invoked by the user.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.Select">
            <summary>
            Event fired when the command is selected by the user.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.CheckedChanged">
            <summary>
            Event fired when the Checked property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.PressedChanged">
            <summary>
            Event fired when the Pressed property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.CommandStateQuery">
            <summary>
            Event fired when the command state has to be verified.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.CommandLinkAdded">
            <summary>
            Event fired after a command link was linked to this command.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.CommandLinkRemoved">
            <summary>
            Event fired after a command link was unlinked from this command.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.TextChanged">
            <summary>
            Event fired when the Text property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.ImageChanged">
            <summary>
            Event fired when the Image or ImageIndex or Icon property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.EnabledChanged">
            <summary>
            Event fired when the Enabled property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.VisibleChanged">
            <summary>
            Event fired when the Visible property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.CategoryChanged">
            <summary>
            Event fired when the Category property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.ToolTipChanged">
            <summary>
            Event fired when the ToolTip property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.ShowShortcutChanged">
            <summary>
            Event fired when the ShowShortcut property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.ShowTextAsToolTipChanged">
            <summary>
            Event fired when the ShowTextAsToolTip property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1Command.DropDownClicked">
            <summary>
            Event fired when the drop down arrow is clicked on the toolbar button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnClick(C1.Win.C1Command.ClickEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnSelect(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnEnabledChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnCategoryChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnToolTipChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnShowShortcutChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnShowTextAsToolTipChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnCheckedChanged(C1.Win.C1Command.CheckedChangedEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnPressedChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnCommandStateQuery(C1.Win.C1Command.CommandStateQueryEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnCommandLinkAdded(C1.Win.C1Command.CommandLinkEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnCommandLinkRemoved(C1.Win.C1Command.CommandLinkEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnDropDown(C1.Win.C1Command.DropDownEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1Command.HasInputFocus">
            <summary>
            Returns true if the command has focus and "firmly" keeps it
            (e.g. if it is C1CommandControl and user clicked inside the control).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.OnBarPopDown">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.LinkReceiveFocus(C1.Win.C1Command.C1CommandLink)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.RefreshBars(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="measure"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.InvalidateBars">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.CheckNonEmpty">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.AssignFrom(C1.Win.C1Command.C1Command)">
            <summary>
            Copy another command properties to this command
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.SetBoolean(System.Boolean@,System.Boolean)">
            <summary>
            Returns true if the change has actually been made
            and the control is not initializing (i.e. on change should be fired)
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.C1Command.TypeConverter">
            <summary>
            Provides a type converter to convert C1Command to and from various other representations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.TypeConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TypeConverter class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Command.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="cinfo">A CultureInfo object.</param>
            <param name="o">The Object to convert.</param>
            <param name="type">The Type to convert the value parameter to. </param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.C1Commands">
            <summary>
            Represents a collection of C1Command
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.#ctor(C1.Win.C1Command.C1CommandHolder)">
            <summary>
            Initializes a new instance of the C1Commands class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.SetOwner(System.Object)">
            <summary>
            Add or remove command to commands collection in commandholder (owner)
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.ClearOwner(System.Object)">
            <summary>
            Remove command from owner (commandholder)
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1Commands.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1Commands.Item(System.String)">
            <summary>
            Gets a command with the specified key from the collection. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.IndexOfKey(System.String)">
            <summary>
            Returns the index of the first occurrence of the C1Command with the specified key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.Clear">
            <summary>
            Removes all elements
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.Add(System.Object)">
            <summary>
            Adds an object to the end.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an ICollection to the end.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the C1Commands at the specified index.
            </summary>
            <param name="index"></param>
            <param name="o"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the C1Commands at the specified index.
            </summary>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Commands.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Copies the elements of a collection over a range of elements.
            </summary>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="T:C1.Win.C1Command.IC1StyledControl">
            <summary>
            Interface for controls using visual styles for drawing
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.IC1CommandBar">
            <summary>
            Interface for commandbars (was separated from IBarInternal to implement user's drawing, but this is not completed)
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.IBarInternal">
            <summary>
            Interface for all bars (toolbars, mainmenu, commandmenu)
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.IBarInternal.HideFirstDelimiter">
            <summary>
            Gets or sets a value indicating whether the control should hide the first delimiter.
            </summary>
            <remarks>
            C1CommandLink.Delimiter property shows a delimiter before a C1CommandLink present at C1Toolbar/C1MainMenu/C1ContextMenu.The HideFirstDelimiter property hides the delimiter for the first visible C1CommandLink even the Delimiter property of the C1CommandLink is True.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.IBarInternal.PopUp(C1.Win.C1Command.IBarInternal,C1.Win.C1Command.C1CommandLink)">
            <summary>
            Tells bar to pop itself up.
            </summary>
            <param name="parent">Parent bar or null</param>
            <param name="cl">Command link which caused the bar to pop up</param>
        </member>
        <member name="P:C1.Win.C1Command.IBarInternal.MasterForm">
            <summary>
            Returns the master form which the menu is serving
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.IBarInternal.MasterParent">
            <summary>
            Returns the master form which the menu is serving or master container (parent) if form
            is absent, for example in usercontrols when they are opened in IDE as designers
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.IBarInternal.MenuForm">
            <summary>
            Returns the popup form created by the menu (or null for main menu)
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.IBarInternal.ActivationMaster">
            <summary>
            Returns the Windows activation owner of the bar control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.IBarInternal.ContainsScreenPoint(System.Drawing.Point,System.Windows.Forms.Control@)">
            <summary>
            Returns true between MouseEnter and MouseLeave
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.IBarInternal.TopBar">
            <summary>
            Top command bar in bar's hierarchy or itself for toolbars and mainmenu
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandControl">
            <summary>
            Arbitrary controls can be contained in toolbars. This functionality is provided by the class C1CommandControl, derived from C1Command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.#ctor">
            <summary>
            Initializes a new instance of the C1CommandControl class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl._cl">
            <summary>
            Return a single comandlink which is linked to this commandcontrol
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandControl.ControlChanged">
            <summary>
            Event fired when the Control property of command is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandControl.CommandActiveChanged">
            <summary>
            Event fired when the CommandActive property of command is changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl.Control">
            <summary>
            Gets or sets the arbitrary control attached to the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl.Enabled">
            <summary>
            Gets or sets whether the command is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl.CommandActive">
            <summary>
            Gets or sets the value indicating whether the command link can be clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl.AcceptsReturn">
            <summary>
            Gets or sets the value indicating whether the embedded control receives the Return key.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl.HotFrame">
            <summary>
            Gets or sets the value indicating how the hot frame around the link is drawn.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.Invoke(C1.Win.C1Command.ClickEventArgs)">
            <summary>
            Invokes the command.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl._plugControl(System.Windows.Forms.Control)">
            <summary>
            Link external control to this commandcontrol (added event handlers to control)
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl._unplugControl">
            <summary>
            Remove event handlers from embedded control
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.DropControl">
            <summary>
            Remove embedded control from this commandcontrol
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandControl.HasInputFocus">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.OnBarPopDown">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.LinkReceiveFocus(C1.Win.C1Command.C1CommandLink)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.AddCommandLink(C1.Win.C1Command.C1CommandLink)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl.RemoveCommandLink(C1.Win.C1Command.C1CommandLink)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="cl"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl._raiseEntered">
            <summary>
            Called when focus is moved to the embedded control
            Prevent usual event handling in the bar
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandControl._lowerEntered">
            <summary>
            Called when focus is moved out from the embedded control
            Resume usual event handling in the bar
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandException">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandException.#ctor">
            <summary>
            Initializes a new instance of the C1CommandException class
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the C1CommandException class
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandHolder">
            <summary>
            Holds C1Command objects defined on the form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.#ctor">
            <summary>
            Initializes a new instance of the C1CommandHolder class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.InstallMessageFilter">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.UninstallMessageFilter">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.HandleMessage(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="info">Runtime key.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1CommandHolder.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.CreateCommandHolder(System.Windows.Forms.Control)">
            <summary>
            Creates a command holder and initializes it.
            </summary>
            <param name="form">Form for which the command holder is created.</param>
            <returns>The command holder created.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.CommandHolderByForm(System.Windows.Forms.Control)">
            <summary>
            Returns the command holder for the specified form, if it exists.
            </summary>
            <param name="form">Form whose command holder is returned.</param>
            <returns>The command holder for the specified form, or null.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.GetC1ContextMenu(System.Object)">
            <summary>
            Gets a context menu contained within the C1CommandHolder.
            </summary>
            <param name="control">The control or NotifyIcon for which to retrieve the context menu.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.SetC1ContextMenu(System.Object,C1.Win.C1Command.C1ContextMenu)">
            <summary>
            Sets a context menu contained within the C1CommandHolder.
            </summary>
            <param name="control">The control or NotifyIcon for which to set the context menu.</param>
            <param name="value">The context menu to attach to the control.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeC1ContextMenu(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetC1ContextMenu(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.GetC1Command(System.Object)">
            <summary>
            Determines the command (of the type C1Command or inherited) invoked when the control's default (or, if there is none, Click) event fires.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.SetC1Command(System.Object,C1.Win.C1Command.C1Command)">
            <summary>
            Set the command (of the type C1Command or inherited) invoked when the control's default (or, if there is none, Click) event fires.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeC1Command(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetC1Command(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="control"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.Owner">
            <summary>
            Gets or sets the control which is the owner of this command holder. Normally this property is set automatically and should not be changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.Commands">
            <summary>
            Gets the collection of commands.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.MainMenu">
            <summary>
            Returns the main menu for the form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.ImageList">
            <summary>
            Gets or sets the image list for command images.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.ImageTransparentColor">
            <summary>
            Gets or sets the transparent color for images not in image list.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeImageTransparentColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.Layout">
            <summary>
            Gets or sets the toolbars layout; To enable automatic layout persistence, add this property to dynamic properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.LayoutKeyName">
            <summary>
            Gets or sets a name of layout dynamic key in application config file.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.AutoSaveLayout">
            <summary>
            Gets or sets the value indicating whether to automatically save the toolbars layout (for this to work, Layout must be added to dynamic properties).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.StateUpdateOnIdle">
            <summary>
            Gets or sets the value indicating whether to update commands' status when idle.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.SkipDisabledMenuItems">
            <summary>
            Gets or sets a value indicating whether the user can give the focus to the CommandLink using keys when the Command is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.SmoothImages">
            <summary>
            Draw smooth images for currently unselected items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.VisualStyle">
            <summary>
            Gets or sets the visual style of all C1Command controls on the form (can be overridden by individual controls).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1CommandHolder.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1CommandHolder.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1CommandHolder.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.UIStrings">
            <summary>
            Gets the array of user interface strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.CustomizerFormClassName">
            <summary>
            Gets or sets the class name of the Customizer form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeCustomizerFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetCustomizerFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.NewToolbarFormClassName">
            <summary>
            Gets or sets the class name of the Customizer's new toolbar dialog form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeNewToolbarFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetNewToolbarFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.SelectMdiChildFormClassName">
            <summary>
            Gets or sets the class name of the MDI child selection dialog form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ShouldSerializeSelectMdiChildFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetSelectMdiChildFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.RecentLinksRunCount">
            <summary>
            Gets or sets the value indicating how many times the app must be run before rarely used menu items start hiding.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.RecentLinksThreshold">
            <summary>
            Gets or sets the threshold (in percent) for an item to be considered rarely used. The higher the value, the more items are hidden.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.ShowNonRecentLinksHoverDelay">
            <summary>
            Gets or sets the delay (in seconds) for the mouse to hover over the parent menu item in order to show all rarely used item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.ShowInvisibleItems">
            <summary>
            Gets or sets the value indicating whether invisible menu and toolbar items are shown at design time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.Animation">
            <summary>
            Gets or sets a value indicating whether to use animation in menus.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.FindCommand(System.Windows.Forms.Shortcut)">
            <summary>
            Gets the C1Command associated with the shortcut.
            </summary>
            <param name="shortcut">The shortcut keys associated with the command.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.CreateCommand">
            <summary>
            Creates a new command and adds it to the Commands collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.CreateCommand(System.Type)">
            <summary>
            Creates a new command and adds it to the Commands collection.
            </summary>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.Customize">
            <summary>
            Invokes toolbar customizer.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.MergeCommandLinks(C1.Win.C1Command.C1CommandLinks,C1.Win.C1Command.C1CommandLinks,C1.Win.C1Command.C1CommandLinks)">
            <summary>
            Merges command links from links1 and links2 into result, using merge rules specified with links, similar to MDI merge.
            </summary>
            <param name="result"></param>
            <param name="links1"></param>
            <param name="links2"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.MergeCommandLinks(C1.Win.C1Command.C1CommandLinks,C1.Win.C1Command.C1CommandLinks,C1.Win.C1Command.C1CommandLinks,System.Boolean)">
            <summary>
            Merges command links from links1 and links2 into result, using merge rules specified with links, similar to MDI merge.
            </summary>
            <param name="result"></param>
            <param name="links1"></param>
            <param name="links2"></param>
            <param name="restore"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.UnmergeCommandLinks(C1.Win.C1Command.C1CommandLinks)">
            <summary>
            Unmerges the two collections of links merged previously by MergeCommandLinks.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.UnmergeCommandLinks(C1.Win.C1Command.C1CommandLinks,C1.Win.C1Command.C1CommandLinks,C1.Win.C1Command.C1CommandLinks)">
            <summary>
            Unmerges the two collections of links merged previously by MergeCommandLinks.
            </summary>
            <param name="result"></param>
            <param name="links1"></param>
            <param name="links2"></param>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.LayoutLoad">
            <summary>
            Occurs when layout string must be loaded from app config file.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.LayoutSave">
            <summary>
            Occurs when layout string must be saved in app config file.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CustomizationStarted">
            <summary>
            Occurs when customization mode starts.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CustomizationFinished">
            <summary>
            Occurs when customization mode finishes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CustomizeToolBarAdded">
            <summary>
            Occurs when a new toolbar is added or a hidden toolbar becomes visible during customization.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CustomizeToolBarRemoved">
            <summary>
            Occurs when a visible toolbar is hidden during customization.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CustomizeLinkAdded">
            <summary>
            Occurs when a new command link is added to an existing toolbar during customization.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CustomizeLinkRemoved">
            <summary>
            Occurs when a command link is removed from a toolbar during customization.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.CommandClick">
            <summary>
            Occurs when the command is invoked by the user.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.RecentLinksRunCountChanged">
            <summary>
            Occurs when the value of the RecentLinksRunCount property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.RecentLinksThresholdChanged">
            <summary>
            Occurs when the value of the RecentLinksRunCount property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandHolder.ShowNonRecentLinksHoverDelayChanged">
            <summary>
            Occurs when the value of the ShowNonRecentLinksHoverDelay property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnRecentLinksRunCountChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnRecentLinksThresholdChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnShowNonRecentLinksHoverDelayChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnCustomizationStarted(System.EventArgs)">
            <summary>
            called for restoring layout of a single toolbar
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnCustomizationFinished(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnCustomizeToolBarAdded(C1.Win.C1Command.CustomizeToolBarEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnCustomizeToolBarRemoved(C1.Win.C1Command.CustomizeToolBarEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnCustomizeLinkAdded(C1.Win.C1Command.CustomizeLinkEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.OnCustomizeLinkRemoved(C1.Win.C1Command.CustomizeLinkEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.SaveDefaultLayout">
            <summary>
            Sets the current layout to be the default (the one the customizer's reset button reverts to).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.LayoutSaveInAppConfig">
            <summary>
            Saves the layout data into the application config file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.LayoutLoadFromAppConfig">
            <summary>
            Loads layout data from the application config file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.LayoutReset">
            <summary>
            Reset layout.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.ResetToolbar(System.String)">
            <summary>
            Called for restoring layout of a single toolbar.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.ShowToolbarTooltips">
            <summary>
            Gets or sets the value indicating whether to show tooltip texts when mouse cursor is over toolbutton.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.ShowMenuTooltips">
            <summary>
            Gets or sets the value indicating whether to show tooltip texts when mouse cursor is over menu item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandHolder.SuperTooltip">
            <inheritdoc cref="P:C1.Win.C1SuperTooltip.ISupportSuperTooltip.SuperTooltip"/>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandHolder.HideSuperTooltip">
            <summary>
            Hides current active super tooltip if needed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandLink">
            <summary>
            C1CommandLink serves as a link to a C1Command component.
            C1CommandLink can be added to menu/tool bars and customized as needed.
            The actual action is performed by the C1Command proxy points to.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.#ctor">
            <summary>
            Initializes a new instance of the C1CommandLink class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.#ctor(C1.Win.C1Command.C1Command)">
            <summary>
            Initializes a new instance of the C1CommandLink class.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1CommandLink.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.CreateAccessibilityInstance">
            <summary>
            Gets the <see cref="T:C1.Win.C1Command.C1CommandLink"/> accessibility object instance.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Command.C1CommandLink"/> accessibility object instance.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.AccessibilityObject">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.AccessibleObject"/>.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.CommandChanged">
            <summary>
            Occurs when the value of the Command property of the command link changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.ToolTipChanged">
            <summary>
            Event fired when the ToolTip property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.TextChanged">
            <summary>
            Event fired when the Text property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.DelimiterChanged">
            <summary>
            Event fired when the Delimiter property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.ButtonLookChanged">
            <summary>
            Event fired when the ButtonLook property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.AlwaysRecentChanged">
            <summary>
            Event fired when the AlwaysRecent property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.MergeTypeChanged">
            <summary>
            Event fired when the MergeType property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.MergeOrderChanged">
            <summary>
            Event fired when the MergeOrder property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.NewColumnChanged">
            <summary>
            Event fired when the NewColumn property of commandlink is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandLink.Invoke">
            <summary>
            Fired before the link is invoked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnInvoke(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Bounds">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.ImageRect">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.TextRect">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.CheckRect">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Command">
            <summary>
            Gets or sets the linked command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ResetCommand">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1CommandLink.Command"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ShouldSerializeCommand">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1CommandLink.Command"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1CommandLink.Command"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Text">
            <summary>
            If set, overrides the Command text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ShouldSerializeText">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ResetText">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.ToolTipText">
            <summary>
            If set, overrides the Command tooltip text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ShouldSerializeToolTipText">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ResetToolTipText">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.DefaultItem">
            <summary>
            Gets or sets a value indicating whether this item is default in a dropdown or context menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.OwnerDraw">
            <summary>
            Gets or sets a value indicating whether this item is owner-drawn.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Delimiter">
            <summary>
            Gets or sets a value indicating whether a delimiter should be drawn before this item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Padding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ResetPadding">
            <summary>
            Resets the <see cref="P:C1.Win.C1Command.C1CommandLink.Padding"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.ShouldSerializePadding">
            <summary>
            Returns true if the Padding has changed; otherwise, returns false.
            The designer writes code to the form only if true is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.NewColumn">
            <summary>
            Gets or sets the value indicating whether this link starts a new column in the menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.ButtonLook">
            <summary>
            Gets or sets a value controlling how to show the item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.MergeType">
            <summary>
            Gets or sets a value indicating the behavior of this menu item when its menu is merged with another.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.MergeOrder">
            <summary>
            Gets or sets a value indicating the relative position of the menu item when it is merged with another.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.SortOrder">
            <summary>
            Gets or sets a value determining the relative position of the item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.AlwaysRecent">
            <summary>
            Gets or sets the value indicating whether the item is always recent (is never hidden when hiding non-recent links is on)
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Enabled">
            <summary>
            Shortcut to linked command's Enabled property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Visible">
            <summary>
            Shortcut to linked command's Visible property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.IsEnabledParent">
            <summary>
            Returns true if the linked command is enabled and contains a submenu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Owner">
            <summary>
            Gets the object (menu, toolbar etc.) containing this command link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.State">
            <summary>
            Gets the current state of the command link (normal, hot, pressed, open).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.Index">
            <summary>
            Gets the current index in CommandLinks collection for recent links.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.IsServiceLink">
            <summary>
            Indicates whether this link is a service link (more, customize, scroll button).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLink.IsMoreLink">
            <summary>
            Indicates whether this link is a More link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnCommandChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnDelimiterChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnButtonLookChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnAlwaysRecentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnToolTipChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnMergeTypeChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnMergeOrderChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OnNewColumnChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.OpenSubmenu(System.Boolean)">
            <summary>
            Opens a submenu for linked <see cref="T:C1.Win.C1Command.C1CommandMenu"/>.
            </summary>
            <param name="allTree">True - opens all the tree of menu. False - opens only the current submenu.</param>
            <remarks>Opens a submenu, if the linked command is of <see cref="T:C1.Win.C1Command.C1CommandMenu"/> type. Otherwise, does nothing.</remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLink.CloseSubmenu">
            <summary>
            Closes a submenu for linked <see cref="T:C1.Win.C1Command.C1CommandMenu"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1VisibleLinks">
            <summary>
            C1VisibleLinks
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandLinks">
            <summary>
            C1CommandLinks
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.Clear">
            <summary>
            Removes all elements
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.ClearAll">
            <summary>
            Move all links from More submenu to visible links, removes all elements from the <see cref = "P:C1.Win.C1Command.IBarInternal.VisibleLinks"/> collection, etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.Add(System.Object)">
            <summary>
            Adds an object to the end.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an ICollection to the end.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.AddRange(C1.Win.C1Command.C1CommandLink[])">
            <summary>
            Adds the elements of an ICollection to the end.
            </summary>
            <param name="links"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the C1CommandLinks at the specified index.
            </summary>
            <param name="index"></param>
            <param name="o"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the C1CommandLinks at the specified index.
            </summary>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Copies the elements of a collection over a range of elements.
            </summary>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.Remove(System.Object)">
            <summary>
            Removes the element.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.MoveTo(C1.Win.C1Command.C1CommandLink,System.Int32)">
            <summary>
            Moves an element to the specified index.
            </summary>
            <param name="cl"></param>
            <param name="newindex"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandLinks.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.BeginUpdate">
            <summary>
            This method prevents the control from painting until the EndUpdate method is called.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.EndUpdate">
            <summary>
            Resumes painting after painting is suspended by the BeginUpdate method. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandLinks.ResetLinksUsage">
            <summary>
            Resets all counters stored for recent link showing
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandMdiList">
            <summary>
            C1CommandMdiList.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.#ctor">
            <summary>
            Initializes a new instance of the C1CommandMdiList class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1CommandMdiList.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMdiList.BeforeSelectWindow">
            <summary>
            Occurs before the Select Window dialog is shown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.OnBeforeSelectWindow(C1.Win.C1Command.BeforeSelectWindowEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.OnCommandStateQuery(C1.Win.C1Command.CommandStateQueryEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.OnCommandLinkAdded(C1.Win.C1Command.CommandLinkEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.OnCommandLinkRemoved(C1.Win.C1Command.CommandLinkEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMdiList.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMdiList.DefaultText">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMdiList.MaxItems">
            <summary>
            Sets or returns the maximum number of menu items created.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMdiList.ListHidden">
            <summary>
            Gets or sets the value indicating whether to list hidden windows.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.Invoke(C1.Win.C1Command.ClickEventArgs)">
            <summary>
            This method should not be called directly, as there is no clear meaning in invoking a command which is actually a placeholder for commands created on the fly.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.ShowSelectorWindow">
            <summary>
            Populates and shows the popup window with the list of all currently available MDI child windows.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMdiList.IsEmpty">
            <summary>
            Returns true if there are currently no items in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.C1CommandMenu">
            <summary>
            Summary description for C1CommandMenu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_foreColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_backColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_foreHiColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_backHiColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_backgroundImage">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_imageLayout">
            <summary>
            The background image layout in the menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1CommandMenu.m_masterForm">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.#ctor">
            <summary>
            Initializes a new instance of the C1CommandMenu class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1CommandMenu.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.IsParent">
            <summary>
            Determines whether this command is a non-empty submenu. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.Invoke(C1.Win.C1Command.ClickEventArgs)">
            <summary>
            Invokes the command.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.Popup">
            <summary>
            Occurs before the command's submenu is displayed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.Closed">
            <summary>
            Occurs after the command's submenu is closed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.LargeMenuDisplayChanged">
            <summary>
            Event fired when the LargeMenuDisplay property of menu is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.FontChanged">
            <summary>
            Event fired when the Font property of menu is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.WidthChanged">
            <summary>
            Event fired when the Width property of menu is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.SideCaptionChanged">
            <summary>
            Event fired when the SideCaption property of menu is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.ShowToolTipsChanged">
            <summary>
            Event fired when the ShowToolTips property of menu is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.BackColorChanged">
            <summary>
            Occurs when the value of the BackColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.ForeColorChanged">
            <summary>
            Occurs when the value of the ForeColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.BackHiColorChanged">
            <summary>
            Occurs when the value of the BackHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.ForeHiColorChanged">
            <summary>
            Occurs when the value of the ForeHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.BackgroundImageChanged">
            <summary>
            Occurs when the value of the BackgroundImage property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.HideNonRecentLinksChanged">
            <summary>
            Occurs when the value of the HideNonRecentLinks property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.MeasureLink">
            <summary>
            Occurs when an owner drawn link needs to be measured.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.DrawLink">
            <summary>
            Occurs when an owner drawn link needs to be drawn.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.DrawBar">
            <summary>
            Occurs when an owner drawn menu or toolbar needs to be drawn.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.CurrentLinkChanged">
            <summary>
            Occurs when the current command link changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.LayoutLink">
            <summary>
            Occurs when an owner drawn link needs to layout its text, image and control within the link bounds.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1CommandMenu.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.AssignFrom(C1.Win.C1Command.C1Command)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnPopup(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnClosed(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnLargeMenuDisplayChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnFontChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnWidthChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnBackHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnForeHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnShowToolTipsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnHideNonRecentLinksChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnSideCaptionChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1CommandMenu.VisualStyle"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.ShowToolTips">
            <summary>
            Gets or sets the value indicating whether to show tooltip texts when mouse cursor is over menu item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeShowToolTips">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1CommandMenu.ShowToolTips"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1CommandMenu.ShowToolTips"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.SuperTooltip">
            <inheritdoc cref="P:C1.Win.C1SuperTooltip.ISupportSuperTooltip.SuperTooltip"/>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeSuperTooltip">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1CommandMenu.SuperTooltip"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1CommandMenu.SuperTooltip"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.HideSuperTooltip">
            <summary>
            Hides current active super tooltip if needed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.HideFirstDelimiter">
            <summary>
            Gets or sets a value indicating whether the control should hide the first delimiter.
            </summary>
            <remarks>
            C1CommandLink.Delimiter property shows a delimiter before a C1CommandLink present at C1ContextMenu. The HideFirstDelimiter property hides the delimiter for the first visible C1CommandLink even the Delimiter property of the C1CommandLink is True.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1CommandMenu.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1CommandMenu.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1CommandMenu.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1CommandMenu.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1CommandMenu.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.BackColor">
            <summary>
            Gets or sets the base background color of the menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.ForeColor">
            <summary>
            Gets or sets the text color of the menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.BackHiColor">
            <summary>
            Gets or sets the base background color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.ForeHiColor">
            <summary>
            Gets or sets the text color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout in the menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.Width">
            <summary>
            Gets or sets the minimum width of the menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.ImageBarWidth">
            <summary>
            Gets or sets the width of the image/checkbox bar in the menu. If set to 0, the width is calculated automatically.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.DefaultText">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.LargeMenuDisplay">
            <summary>
            Determines the way large menus (when all items cannot fit in one column) are displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.HideNonRecentLinks">
            <summary>
            Gets or sets the value indicating whether to hide rarely used menu items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.Font">
            <summary>
            Gets or sets the font of menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetFont">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeFont">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.CommandLinks">
            <summary>
            Gets the collection of commandlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.SeparateCheckBar">
            <summary>
            Gets or sets the value indicating whether to show check marks instead of images or in a separate bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.SideCaption">
            <summary>
            Allows to specify a caption (text and/or image) to be shown alongside the left edge of the menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ResetSideCaption">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ShouldSerializeSideCaption">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.CloseOnItemClick">
            <summary>
            Gets or sets the value indicating whether to close the menu when an item is clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1CommandMenu.RightToLeft">
            <summary>
            Specifies a value indicating whether the text appears from right to left, such as when using Hebrew or Arabic fonts.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1CommandMenu.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1ContextMenu">
            <summary>
            Context menu.
            </summary>
            
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.#ctor">
            <summary>
            A context menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.#ctor(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="info">Runtime key.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.ShowContextMenu(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Shows the menu at the specified location.
            </summary>
            <param name="control">The control where the context menu is to be shown.</param>
            <param name="pt">The point in the control client area where the context menu is to be shown.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.CloseContextMenu">
            <summary>
            Closes the currently open context menu if there is one.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ContextMenu.SourceControl">
             <summary>
             Gets the control that is displaying the shortcut menu.
             </summary>
             <remarks>
             This property enables you to determine which control currently displays the shortcut menu defined in the <see cref="T:C1.Win.C1Command.C1ContextMenu"/>. 
             If the shortcut menu is not currently displayed, you can use this property to determine which control last displayed the shortcut menu. 
             You can use this property in the <see cref="E:C1.Win.C1Command.C1CommandMenu.Popup"/> event to ensure that the control displays the proper menu items. 
             You can also use this property to pass a reference to the control to a method that performs the tasks associated with a menu command displayed in the shortcut menu. 
             </remarks>
             <example>
             <para>The following code example creates an event handler for the <see cref="E:C1.Win.C1Command.C1CommandMenu.Popup"/> event of the <see cref="T:C1.Win.C1Command.C1ContextMenu"/>. 
             The code in the event handler determines which of two controls a PictureBox named pictureBox1 and a TextBox named textBox1 is the control 
             displaying the shortcut menu. </para>
             
             <para>Depending on which control caused the <see cref="T:C1.Win.C1Command.C1ContextMenu"/> to display its shortcut menu, the control shows or hides the appropriate 
             menu items of <see cref="T:C1.Win.C1Command.C1Command" />. </para>
             
             <para>This example requires that you have an instance of the <see cref="T:C1.Win.C1Command.C1ContextMenu"/> class, 
             named c1ContextMenu1, defined within the form. c1ContextMenu should have "Copy", "Find", "Change Picture" menu items.
             This example also requires that you have a TextBox and PictureBox added to a form and that the C1ContextMenu property of these controls is set to c1ContextMenu1.
             </para>
             <code>
             private void c1ContextMenu1_Popup(object sender, EventArgs e)
            {
                Control c = c1ContextMenu1.SourceControl;
                // Copy and Find is dispayed for textBox1
                c1CommandCopy.Visible = (c == textBox1);
                c1CommandFind.Visible = (c == textBox1);
                // Change Picture is dispayed for pictureBox1
                c1CommandChangePicture.Visible = (c == pictureBox1);
            }        
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.OnBackHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.OnForeHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ContextMenu.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Command.C1ContextMenu.Select">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1MainMenu">
            <summary>
            Window's main menu control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.#ctor">
            <summary>
            Initializes a new instance of the C1MainMenu class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1MainMenu.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.CreateAccessibilityInstance">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.FilterAccessKeys">
            <summary>
            Gets or sets whether the filter main menu access keys.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1MainMenu.VisualStyle"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.ShowToolTips">
            <summary>
            Gets or sets the value indicating whether to show tooltip texts when mouse cursor is over menu item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeShowToolTips">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1MainMenu.ShowToolTips"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1MainMenu.ShowToolTips"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.SuperTooltip">
            <inheritdoc cref="P:C1.Win.C1SuperTooltip.ISupportSuperTooltip.SuperTooltip"/>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeSuperTooltip">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1MainMenu.SuperTooltip"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1MainMenu.SuperTooltip"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.HideSuperTooltip">
            <summary>
            Hides current active super tooltip if needed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.WrapChanged">
            <summary>
            Occurs when the value of the Wrap property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.ShowToolTipsChanged">
            <summary>
            Occurs when the value of the ShowToolTips property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.CanMergeChanged">
            <summary>
            Occurs when the value of the CanMerge property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.BackHiColorChanged">
            <summary>
            Occurs when the value of the BackHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.ForeHiColorChanged">
            <summary>
            Occurs when the value of the ForeHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.CurrentLinkChanged">
            <summary>
            Occurs when the current command link changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.MeasureLink">
            <summary>
            Occurs when it is necessary to measure the owner-drawn link.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.DrawLink">
            <summary>
            Occurs when the owner-drawn C1CommandLink should be redrawn.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.DrawBar">
            <summary>
            Occurs when the owner-drawn menu should be redrawn.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.LayoutLink">
            <summary>
            Occurs when an OwnerDraw command link needs to layout its text, image and control within the link bounds.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnWrapChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnCanMergeChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnBackHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnForeHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnResize(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnLocationChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.InitLayout">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseEnter(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseHover(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnBackgroundImageLayoutChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnShowToolTipsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.Dock">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.TabStop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.TabIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.HideFirstDelimiter">
            <summary>
            Gets or sets a value indicating whether the control should hide the first delimiter.
            </summary>
            <remarks>
            C1CommandLink.Delimiter property shows a delimiter before a C1CommandLink present at C1MainMenu. The HideFirstDelimiter property hides the delimiter for the first visible C1CommandLink even the Delimiter property of the C1CommandLink is True.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1MainMenu.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1MainMenu.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1MainMenu.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1MainMenu.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1MainMenu.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.BackHiColor">
            <summary>
            Gets or sets the background color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ResetBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.ForeHiColor">
            <summary>
            Gets or sets the text color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ResetForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.CommandHolder">
            <summary>
            Gets or sets the command holder.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.CommandLinks">
            <summary>
            Gets the collection of commandlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.BackImageInImageBar">
            <summary>
            Gets or sets the value indicating whether to show background image in the image bar of dropdown menus.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.Wrap">
            <summary>
            Gets or sets the value indicating whether to wrap the menu or show a \"More...\" button if not all items fit on a single line.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.CanMerge">
            <summary>
            Gets or sets the value indicating whether to merge MDI child menu with MDI parent menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.Font">
            <summary>
            Gets or sets the font of the C1MainMenu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ResetFont">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeFont">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.BackColor">
            <summary>
            Gets or sets the background color of the C1MainMenu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ResetBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.CloseMoreOnItemClick">
            <summary>
            Gets or sets the value indicating whether the menu that is
            automatically created when some items do not fit on the toolbar closes
            when an item on that menu is clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1MainMenu.Text">
            <inheritdoc/>
        </member>
        <member name="E:C1.Win.C1Command.C1MainMenu.TextChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Command.C1MainMenu.Text"/> property value changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1MainMenu.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1SelectMdiChildForm">
            <summary>
            Summary description for C1SelectMdiChildForm.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1SelectMdiChildForm.m_windowsList">
            <summary>
            The list of available existing windows.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1SelectMdiChildForm.m_btnOK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1SelectMdiChildForm.m_btnCancel">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SelectMdiChildForm.#ctor">
            <summary>
            Initializes a new instance of the C1SelectMdiChildForm class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SelectMdiChildForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SelectMdiChildForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SelectMdiChildForm.ChildForms">
            <summary>
            A list of available forms
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SelectMdiChildForm.SelectedForm">
            <summary>
            A form being selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SelectMdiChildForm.WindowsList">
            <summary>
            A ListBox control for displaying available windows.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SelectMdiChildForm.ButtonOk">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SelectMdiChildForm.ButtonCancel">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1SelectMdiChildForm.WindowItem">
            <summary>
            Represents one window in the window list
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1SelectMdiChildForm.WindowItem.Form">
            <summary>
            A Form control
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SelectMdiChildForm.WindowItem.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the WindowItem class.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1SelectMdiChildForm.WindowItem.ToString">
            <summary>
            Converts WindowItem to it's string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1SelectMdiChildForm.OnLoad(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1SideCaption">
            <summary>
            Represents a class for SideCaption property of a C1CommandMenu
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1SideCaption.SideCaptionTypeConverter">
            <summary>
            Provides a type converter to convert C1Command to and from various other representations.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.SideCaptionTypeConverter.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.SideCaptionTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.SideCaptionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.#ctor">
            <summary>
            Initializes a new instance of the C1SideCaption class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.Text">
            <summary>
            Gets or sets the text shown in the SideCaption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.Width">
            <summary>
            Gets or sets the width of the SideCaption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.GradientDirection">
            <summary>
            Gets or sets the gradient direction (horizontal, vertical, forward diagonal, or backward diagonal) in the SideCaption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.TextDirection">
            <summary>
            Gets or sets the direction of the text in the SideCaption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.TextAlignment">
            <summary>
            Gets or sets the text alignment (near, far, or center) in the SideCaption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.CaptionLayout">
            <summary>
            Gets or sets the text layout for the SideCaption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.Font">
            <summary>
            Gets or sets the font of the SideCaption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ResetFont">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ShouldSerializeFont">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.ForeColor">
            <summary>
            Gets or sets the text color of the SideCaption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ResetForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ShouldSerializeForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.BarGradientBegin">
            <summary>
            Gets or sets the beginning color of the gradient for the SideCaption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ResetBarGradientBegin">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ShouldSerializeBarGradientBegin">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.BarGradientEnd">
            <summary>
            Gets or sets the ending color of the gradient for the SideCaption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ResetBarGradientEnd">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ShouldSerializeBarGradientEnd">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.Image">
            <summary>
            Gets or sets the SideCaption image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ShouldSerializeImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ResetImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.ImageIndex">
            <summary>
            Gets or sets the index of the image for the SideCaption in C1CommandHolder.ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1SideCaption.Icon">
            <summary>
            Gets or sets the SideCaption icon.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ShouldSerializeIcon">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1SideCaption.ResetIcon">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1Timer">
            <summary>
            MouseMoveTimer
            avoid multiple calls to set_Enabled before one call is completed
            (from Bernardo, who says it is from MS origianlly).
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1AutoTimer">
            <summary>
            A timer that triggers an event starting at the DefaultInterval and getting 
            faster each tick (but not below the MinInterval value).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1AutoTimer.InitialTick">
            <summary>
            Gets or sets whether to trigger the event when the timer starts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1AutoTimer.DefaultInterval">
            <summary>
            Gets or sets the default interval. 
            The Interval property is updated by DefaultInterval when the timer starts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1AutoTimer.MinInterval">
            <summary>
            Gets or sets the minimum Interval value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1AutoTimer.IntervalDecay">
            <summary>
            Gets or sets the value by which the Interval property is reduced each time the event is triggered.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ColorHelper">
            <summary>
            helper methods for colors handling.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.VsdOffice2007.BtnColors">
            <summary>
            Colors used to draw a button (some colors are start/end of gradients).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CommandBarRenderer.RemoveControlBar">
            <summary>
            Remove link to _controlBar tfs 19468 memory leak
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CommandToolTip.GetCursorPositionWithOffset">
            <summary>
            Calculates and returns the cursor position for the tooltip with a vertical offset.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CommandToolTip.GetOwnerControl(C1.Win.C1SuperTooltip.ISupportSuperTooltip)">
            <summary>
            Returns the first <see cref="T:System.Windows.Forms.Control"/> object in the hierarchy or null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ClickSourceEnum">
            <summary>
            Members of this enumeration are used to determine the value of the ClickSource property in the ClickEventArgs class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickSourceEnum.None">
            <summary>
            Click source undefined.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickSourceEnum.Menu">
            <summary>
            Click source is a menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickSourceEnum.Shortcut">
            <summary>
            Click source is a shortcut key.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickSourceEnum.External">
            <summary>
            Click source is external.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ContextInfo">
            <summary>
            Describes data related to the invokation of a context menu
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.ContextInfo.#ctor(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the ContextInfo class
            </summary>
            <param name="source">The control where the context menu was shown.</param>
            <param name="location">The location inside the Source control where the context menu was shown.</param>
        </member>
        <member name="F:C1.Win.C1Command.ContextInfo.Source">
            <summary>
            Returns the control where the context menu was shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ContextInfo.Location">
            <summary>
            Return the location inside the Source control where the context menu was shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ClickEventArgs">
            <summary>
            Arguments for the command Click event handler.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickEventArgs.Empty">
            <summary>
            ClickEventArgs with empty arguments
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.ClickEventArgs.#ctor(C1.Win.C1Command.ClickSourceEnum,C1.Win.C1Command.C1CommandLink,C1.Win.C1Command.ContextInfo)">
            <summary>
            Initializes a new instance of the ClickEventArgs class
            </summary>
            <param name="clickSource">Determines whether the click event was caused by a menu selection, shortcut key, or other means.</param>
            <param name="callerLink">Gets the command link which caused the click event to occur.</param>
            <param name="contextInfo">Gets the context info for clicks which originated in a context menu.</param>
        </member>
        <member name="F:C1.Win.C1Command.ClickEventArgs.ClickSource">
            <summary>
            Determines whether the click event was caused by a menu selection, shortcut key, or other means.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickEventArgs.CallerLink">
            <summary>
            Gets the command link which caused the click event to occur.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ClickEventArgs.ContextInfo">
            <summary>
            Gets the context info for clicks which originated in a context menu.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ClickEventHandler">
            <summary>
            Represents the method that will handle a Click event. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A ClickEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.CommandClickEventArgs">
            <summary>
            Arguments for the CommandClick event handler.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CommandClickEventArgs.Empty">
            <summary>
            CommandClickEventArgs with empty arguments
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CommandClickEventArgs.#ctor(C1.Win.C1Command.C1Command,C1.Win.C1Command.ClickSourceEnum,C1.Win.C1Command.C1CommandLink,C1.Win.C1Command.ContextInfo)">
            <summary>
            Initializes a new instance of the CommandClickEventArgs class
            </summary>
            <param name="command">The command invoked by the user.</param>
            <param name="clickSource">Determines what caused the click event to occur.</param>
            <param name="callerLink">Gets the command link which was clicked by the user.</param>
            <param name="contextInfo">Gets the context info for events fired from a context menu.</param>
        </member>
        <member name="M:C1.Win.C1Command.CommandClickEventArgs.#ctor(C1.Win.C1Command.C1Command,C1.Win.C1Command.ClickEventArgs)">
            <summary>
            Initializes a new instance of the CommandClickEventArgs class
            </summary>
            <param name="command">The command invoked by the user.</param>
            <param name="e">A BeforeSelectWindowEventArgs object that contains the event data.</param>
        </member>
        <member name="F:C1.Win.C1Command.CommandClickEventArgs.Command">
            <summary>
            Gets the command clicked.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CommandClickEventHandler">
            <summary>
            Represents the method that will handle a CommandClick event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CommandClickEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.CheckedChangedEventArgs">
            <summary>
            Arguments for the check auto toggle event handler.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CheckedChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CheckedChangedEventArgs class
            </summary>
            <param name="newValue">A new value of Checked property.</param>
        </member>
        <member name="F:C1.Win.C1Command.CheckedChangedEventArgs.NewValue">
            <summary>
            Returns a new value of Checked property.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CheckedChangedEventHandler">
            <summary>
            Represents the method that will handle a CheckedChanged event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CheckedChangedEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.CommandStateQueryEventArgs">
            <summary>
            Arguments for the command status query event handler.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CommandStateQueryEventArgs.Visible">
            <summary>
            Determines whether the command is visible.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CommandStateQueryEventArgs.Enabled">
            <summary>
            Determines whether the command is enabled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CommandStateQueryEventArgs.Checked">
            <summary>
            Determines whether the command is checked.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CommandStateQueryEventArgs.Pressed">
            <summary>
            Determines whether the command is pressed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CommandStateQueryEventHandler">
            <summary>
            Represents the method that will handle a CommandStateQuery event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CommandStateQueryEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.BeforeSelectWindowEventArgs">
            <summary>
            Arguments for the before select MDI child window event handler.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.BeforeSelectWindowEventArgs.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the BeforeSelectWindowEventArgs class
            </summary>
            <param name="selectWindowForm">The window or dialog box selected.</param>
        </member>
        <member name="F:C1.Win.C1Command.BeforeSelectWindowEventArgs.SelectWindowForm">
            <summary>
            The window or dialog box selected.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.BeforeSelectWindowEventHandler">
            <summary>
            Represents the method that will handle a BeforeSelectWindow event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A BeforeSelectWindowEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.CustomizeToolBarEventArgs">
            <summary>
            Provides data for the CustomizeToolBar event. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeToolBarEventArgs.ToolBar">
            <summary>
            Gets the tool bar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CustomizeToolBarEventArgs.#ctor(C1.Win.C1Command.C1ToolBar)">
            <summary>
            Initializes a new instance of the CustomizeToolBarEventArgs class
            </summary>
            <param name="toolBar">The tool bar just customized</param>
        </member>
        <member name="T:C1.Win.C1Command.CustomizeToolBarEventHandler">
            <summary>
            Represents the method that will handle a CustomizeToolBar event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CustomizeToolBarEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.CustomizeLinkEventArgs">
            <summary>
            Provides data for the CustomizeLink event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeLinkEventArgs.ToolBar">
            <summary>
            Gets the tool bar for the command link.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeLinkEventArgs.CommandLink">
            <summary>
            Gets the command link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CustomizeLinkEventArgs.#ctor(C1.Win.C1Command.C1ToolBar,C1.Win.C1Command.C1CommandLink)">
            <summary>
            Initializes a new instance of the CustomizeLinkEventArgs class
            </summary>
            <param name="toolBar">Gets the tool bar for the command link.</param>
            <param name="commandLink">Gets the command link.</param>
        </member>
        <member name="T:C1.Win.C1Command.CustomizeLinkEventHandler">
            <summary>
            Represents the method that will handle a CustomizeLink event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CustomizeLinkEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DropDownEventArgs">
            <summary>
            Provides data for the DropDown event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DropDownEventArgs.CallerLink">
            <summary>
            Gets the command link which was selected by the user.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DropDownEventArgs.LinkRect">
            <summary>
            Gets the screen coordinates of command link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DropDownEventArgs.#ctor(C1.Win.C1Command.C1CommandLink,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the DropDownEventArgs class
            </summary>
            <param name="callerLink">Gets the command link which was selected by the user.</param>
            <param name="linkRect">Gets the screen coordinates of command link.</param>
        </member>
        <member name="T:C1.Win.C1Command.DropDownEventHandler">
            <summary>
            Represents the method that will handle a DropDown event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DropDownEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasureLinkEventArgs">
            <summary>
            Provides data for the MeasureLink event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.MeasureLinkEventArgs.Link">
            <summary>
            Specifies the link that needs to be measured.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.MeasureLinkEventArgs.Graphics">
            <summary>
            Specifies the Graphics object to use for measuring.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.MeasureLinkEventArgs.Width">
            <summary>
            Specifies the width of the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.MeasureLinkEventArgs.Height">
            <summary>
            Specifies the height of the link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.MeasureLinkEventArgs.#ctor(System.Drawing.Graphics,C1.Win.C1Command.C1CommandLink,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MeasureLinkEventArgs class
            </summary>
            <param name="graphics">Specifies the Graphics object to use for measuring.</param>
            <param name="link">Specifies the link that needs to be measured.</param>
            <param name="width">Specifies the width of the link.</param>
            <param name="height">Specifies the height of the link.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasureLinkEventHandler">
            <summary>
            Represents the method that will handle a MeasureLink event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A MeasureLinkEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.LayoutLinkEventArgs">
            <summary>
            Provides data for the LayoutLink event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LayoutLinkEventArgs.Link">
            <summary>
            Specifies the command link for the layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LayoutLinkEventArgs.Bounds">
            <summary>
            The bounding rectangle of the command link.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LayoutLinkEventArgs.TextRect">
            <summary>
            Text rectangle layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LayoutLinkEventArgs.ImageRect">
            <summary>
            Image rectangle layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LayoutLinkEventArgs.ControlLocation">
            <summary>
            The location of the nested control (valid only if the command is a C1CommandControl).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.LayoutLinkEventArgs.#ctor(C1.Win.C1Command.C1CommandLink,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the LayoutLinkEventArgs class
            </summary>
            <param name="link">Specifies the command link for the layout.</param>
            <param name="bounds">The bounding rectangle of the command link.</param>
            <param name="textrect">Text rectangle layout.</param>
            <param name="imagerect">Image rectangle layout.</param>
            <param name="controllocation">The location of the nested control</param>
        </member>
        <member name="T:C1.Win.C1Command.LayoutLinkEventHandler">
            <summary>
            Represents the method that will handle a LayoutLink event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A LayoutLinkEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawLinkEventArgs">
            <summary>
            Provides data for the DrawLink event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawLinkEventArgs.Link">
            <summary>
            The command link to draw.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawLinkEventArgs.Graphics">
            <summary>
            The Graphics object to draw on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawLinkEventArgs.Bounds">
            <summary>
            The bounding rectangle of the link.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawLinkEventArgs.Done">
            <summary>
            Flag indicating whether the user completed the drawing. If set to true, no further drawing is performed. 
            Otherwise, the default drawing is done.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DrawLinkEventArgs.#ctor(System.Drawing.Graphics,C1.Win.C1Command.C1CommandLink,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Initializes a new instance of the DrawLinkEventArgs class
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="link">The command link to draw.</param>
            <param name="bounds">The bounding rectangle of the link.</param>
            <param name="done">Flag indicating whether the user completed the drawing.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawLinkEventHandler">
            <summary>
            Represents the method that will handle a DrawLink event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DrawLinkEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawBarEventArgs">
            <summary>
            Provides data for the DrawBar event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawBarEventArgs.Graphics">
            <summary>
            The Graphics object to draw on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawBarEventArgs.Bounds">
            <summary>
            The bounding rectangle of the bar (menu or toolbar).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawBarEventArgs.Path">
            <summary>
            The graphics path bounding the bar (menu or toolbar).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawBarEventArgs.Done">
            <summary>
            Flag indicating whether the user completed the drawing. If set to true, no further drawing is performed.
            Otherwise, the default drawing is done.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DrawBarEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Initializes a new instance of the DrawBarEventArgs class
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="bounds">The bounding rectangle of the bar</param>
            <param name="path">The graphics path bounding the bar</param>
            <param name="done">Flag indicating whether the user completed the drawing.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawBarEventHandler">
            <summary>
            Represents the method that will handle a DrawBar event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DrawBarEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasurePageEventArgs">
            <summary>
            Provides data for the MeasurePage event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasurePageEventArgs.Page">
            <summary>
            The C1OutPage object to measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasurePageEventArgs.Graphics">
            <summary>
            Specifies the Graphics object to use for measuring.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasurePageEventArgs.Height">
            <summary>
            The height of the page caption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.MeasurePageEventArgs.#ctor(System.Drawing.Graphics,C1.Win.C1Command.C1OutPage,System.Int32)">
            <summary>
            Initializes a new instance of the MeasurePageEventArgs class
            </summary>
            <param name="graphics">Specifies the Graphics object to use for measuring.</param>
            <param name="page">The C1OutPage object to measure.</param>
            <param name="height">The height of the page caption.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasurePageEventHandler">
            <summary>
            Represents the method that will handle a MeasurePage event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A MeasurePageEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawPageEventArgs">
            <summary>
            Provides data for the DrawPage event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawPageEventArgs.Page">
            <summary>
            The page to draw.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawPageEventArgs.Graphics">
            <summary>
            The Graphics object to draw on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawPageEventArgs.Bounds">
            <summary>
            The bounding rectangle of the page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawPageEventArgs.Done">
            <summary>
            Flag indicating whether the user completed the drawing. If set to true, no further drawing is performed.
            Otherwise, the default drawing is done.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DrawPageEventArgs.#ctor(System.Drawing.Graphics,C1.Win.C1Command.C1OutPage,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Initializes a new instance of the DrawPageEventArgs class.
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="page">The page to draw.</param>
            <param name="bounds">The bounding rectangle of the page.</param>
            <param name="done">Flag indicating whether the user completed the drawing.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawPageEventHandler">
            <summary>
            Represents the method that will handle a DrawPage event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DrawPageEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.PageClickEventArgs">
            <summary>
            Provides data for the PageClick event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.PageClickEventArgs.Page">
            <summary>
            The page clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PageClickEventArgs.#ctor(C1.Win.C1Command.C1OutPage)">
            <summary>
            Initializes a new instance of the DrawPageEventArgs class.
            </summary>
            <param name="page">The page clicked.</param>
        </member>
        <member name="T:C1.Win.C1Command.PageClickEventHandler">
            <summary>
            Represents the method that will handle a DrawPage event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PageClickEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasureTabEventArgs">
            <summary>
            Provides data for the MeasureTab event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasureTabEventArgs.Page">
            <summary>
            The C1DockingTabPage object to measure.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasureTabEventArgs.Graphics">
            <summary>
            Specifies the Graphics object to use for measuring.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasureTabEventArgs.Width">
            <summary>
            The width of the tab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.MeasureTabEventArgs.#ctor(System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Int32)">
            <summary>
            Initializes a new instance of the MeasureTabEventArgs class.
            </summary>
            <param name="graphics">Specifies the Graphics object to use for measuring.</param>
            <param name="page">The C1DockingTabPage object to measure.</param>
            <param name="width">The width of the tab..</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasureTabEventHandler">
            <summary>
            Represents the method that will handle a MeasureTab event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A MeasureTabEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.AutoCreatedDockingTabEventArgs">
            <summary>
            Provides data for the AutoCreatedDockingTab event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.AutoCreatedDockingTabEventArgs.NewDockingTab">
            <summary>
            Gets the new DockingTab.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.AutoCreatedDockingTabEventArgs.#ctor(C1.Win.C1Command.C1DockingTab)">
            <summary>
            Initializes a new instance of the AutoCreatedDockingTabEventArgs class
            </summary>
            <param name="newDockingTab">The new DockingTab.</param>
        </member>
        <member name="T:C1.Win.C1Command.AutoCreatedDockingTabHandler">
            <summary>
            Represents the method that will handle a AutoCreatedDockingTab event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A AutoCreatedDockingTabEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawTabEventArgs">
            <summary>
            Provides data for the DrawTab event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawTabEventArgs.Page">
            <summary>
            The tab page to draw.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawTabEventArgs.Graphics">
            <summary>
            The Graphics object to draw on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawTabEventArgs.Bounds">
            <summary>
            The bounding rectangle of the tab.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawTabEventArgs.Done">
            <summary>
            Flag indicating whether the user completed the drawing. If set to true, no further drawing is performed.
            Otherwise, the default drawing is done.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DrawTabEventArgs.#ctor(System.Drawing.Graphics,C1.Win.C1Command.C1DockingTabPage,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Initializes a new instance of the DrawTabEventArgs class
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="page">The tab page to draw.</param>
            <param name="bounds">The bounding rectangle of the tab.</param>
            <param name="done">Flag indicating whether the user completed the drawing.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawTabEventHandler">
            <summary>
            Represents the method that will handle a DrawTab event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DrawTabEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawArrowEventArgs">
            <summary>
            Provides data for the DrawArrow event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawArrowEventArgs.Graphics">
            <summary>
            The Graphics object to draw on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawArrowEventArgs.Bounds">
            <summary>
            The bounding rectangle of the Arrow button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawArrowEventArgs.Enabled">
            <summary>
            Gets the value if button is enabled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawArrowEventArgs.Pressed">
            <summary>
            Gets the value if button is pressed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawArrowEventArgs.Up">
            <summary>
            Indicates if Up button is drawn or not.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawArrowEventArgs.Done">
            <summary>
            Flag indicating whether the user completed the drawing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DrawArrowEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DrawArrowEventArgs class
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="bounds">The bounding rectangle of the Arrow button.</param>
            <param name="enabled">Gets the value if button is enabled.</param>
            <param name="pressed">Gets the value if button is pressed.</param>
            <param name="up">Indicates if Up button is drawn or not.</param>
            <param name="done">Flag indicating whether the user completed the drawing.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawArrowEventHandler">
            <summary>
            Represents the method that will handle a DrawArrow event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DrawArrowEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasureFloatingCaptionEventArgs">
            <summary>
            Provides data for the MeasureFloatingCaption event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasureFloatingCaptionEventArgs.Graphics">
            <summary>
            The Graphics object to use for measuring.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MeasureFloatingCaptionEventArgs.Height">
            <summary>
            The height of the floating caption.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.MeasureFloatingCaptionEventArgs.#ctor(System.Drawing.Graphics,System.Int32)">
            <summary>
            Initializes a new instance of the MeasureFloatingCaptionEventArgs class
            </summary>
            <param name="graphics">The Graphics object to use for measuring.</param>
            <param name="height">The height of the floating caption.</param>
        </member>
        <member name="T:C1.Win.C1Command.MeasureFloatingCaptionEventHandler">
            <summary>
            Represents the method that will handle a MeasureFloatingCaption event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A MeasureFloatingCaptionEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawFloatingCaptionEventArgs">
            <summary>
            Provides data for the DrawFloatingCaption event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawFloatingCaptionEventArgs.Graphics">
            <summary>
            The Graphics object to draw on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawFloatingCaptionEventArgs.Bounds">
            <summary>
            The bounding rectangle of the floating caption.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DrawFloatingCaptionEventArgs.Done">
            <summary>
            Flag indicating whether the user completed the drawing. If set to true, no further drawing is performed.
            Otherwise, the default drawing is done.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.DrawFloatingCaptionEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Initializes a new instance of the DrawFloatingCaptionEventArgs class
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="bounds">The bounding rectangle of the floating caption.</param>
            <param name="done">Flag indicating whether the user completed the drawing.</param>
        </member>
        <member name="T:C1.Win.C1Command.DrawFloatingCaptionEventHandler">
            <summary>
            Represents the method that will handle a DrawFloatingCaption event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DrawFloatingCaptionEventArgs object that contains the event data..</param>
        </member>
        <member name="T:C1.Win.C1Command.CommandLinkEventArgs">
            <summary>
            Provides data for the CommandLinkAdded or CommandLinkRemoved event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CommandLinkEventArgs.CommandLink">
            <summary>
            Gets the command link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.CommandLinkEventArgs.#ctor(C1.Win.C1Command.C1CommandLink)">
            <summary>
            Initializes a new instance of the CommandLinkEventArgs class
            </summary>
            <param name="commandLink"></param>
        </member>
        <member name="T:C1.Win.C1Command.CommandLinkEventHandler">
            <summary>
            Represents the method that will handle a CommandLinkAdded or CommandLinkRemoved event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CommandLinkEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.SelectedIndexChangingEventArgs">
            <summary>
            Provides data for the SelectedIndexChanging event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.SelectedIndexChangingEventArgs.NewIndex">
            <summary>
            Indicates the new index of the selected tab page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.SelectedIndexChangingEventArgs.CanCancel">
            <summary>
            Indicates whether the change of the selected index can be cancelled by the event handler. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.SelectedIndexChangingEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the SelectedIndexChangingEventArgs class
            </summary>
            <param name="newIndex">Indicates the new index of the selected tab page.</param>
            <param name="canCancel">Indicates whether the change of the selected index can be cancelled by the event handler.</param>
        </member>
        <member name="T:C1.Win.C1Command.SelectedIndexChangingEventHandler">
            <summary>
            Represents the method that will handle a SelectedIndexChanging event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A SelectedIndexChanging object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.TabPageEventArgs">
            <summary>
            Provides data for the TabPageClosed event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabPageEventArgs.TabPage">
            <summary>
            Indicates the tab page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TabPageEventArgs.#ctor(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Initializes a new instance of the TabPageEventArgs class
            </summary>
            <param name="tabPage">Indicates the tab page.</param>
        </member>
        <member name="T:C1.Win.C1Command.TabPageEventHandler">
            <summary>
            Represents the method that will handle a TabPageClosed event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A TabPageEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.TabPageMovedEventArgs">
            <summary>
            Provides data for the TabPageMoved event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabPageMovedEventArgs.OldIndex">
            <summary>
            Indicates the old index of the moved tab page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabPageMovedEventArgs.NewIndex">
            <summary>
            Indicates the new index of the moved tab page.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabPageMovedEventArgs.TabPage">
            <summary>
            Indicates the tab page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TabPageMovedEventArgs.#ctor(C1.Win.C1Command.C1DockingTabPage,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TabPageMovedEventArgs class
            </summary>
            <param name="oldIndex">Indicates the old index of the moved tab page.</param>
            <param name="tabPage">Indicates the tab page.</param>
            <param name="newIndex">Indicates the old index of the moved tab page.</param>
        </member>
        <member name="T:C1.Win.C1Command.TabPageMovedEventHandler">
            <summary>
            Represents the method that will handle a TabPageMoved event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A TabPageMovedEventArgs object that contains the event data.</param>
        </member>
        <member name="F:C1.Win.C1Command.TabPageRemovedEventArgs.PageIndex">
            <summary>
            Indicates the tab page index.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TabPageRemovedEventArgs.#ctor(C1.Win.C1Command.C1DockingTabPage,System.Int32)">
            <summary>
            Initializes a new instance of the TabPageRemovedEventArgs class
            </summary>
            <param name="tabPage">Indicates the tab page.</param>
            <param name="index">Page index.</param>
        </member>
        <member name="T:C1.Win.C1Command.TabPageCancelEventArgs">
            <summary>
            Provides data for the TabPageClosing event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabPageCancelEventArgs.TabPage">
            <summary>
            Indicates the tab page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TabPageCancelEventArgs.#ctor(C1.Win.C1Command.C1DockingTabPage)">
            <summary>
            Initializes a new instance of the TabPageCancelEventArgs class
            </summary>
            <param name="tabPage">Indicates the tab page</param>
        </member>
        <member name="T:C1.Win.C1Command.TabPageCancelEventHandler">
            <summary>
            Represents the method that will handle a TabPageClosing event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A TabPageCancelEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.PanelEventArgs">
            <summary>
            Provides data for the PanelClosed event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.PanelEventArgs.Panel">
            <summary>
            Indicates the tab page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PanelEventArgs.#ctor(C1.Win.C1Command.C1NavBarPanel)">
            <summary>
            Initializes a new instance of the PanelEventArgs class
            </summary>
            <param name="panel">Indicates the navbar panel.</param>
        </member>
        <member name="T:C1.Win.C1Command.PanelEventHandler">
            <summary>
            Represents the method that will handle a PanelClosed event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PanelEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.PanelCancelEventArgs">
            <summary>
            Provides data for the PanelClosing event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.PanelCancelEventArgs.Panel">
            <summary>
            Indicates the nav bar panel.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PanelCancelEventArgs.#ctor(C1.Win.C1Command.C1NavBarPanel)">
            <summary>
            Initializes a new instance of thePanelCancelEventArgs class
            </summary>
            <param name="panel">Indicates the nav bar panel</param>
        </member>
        <member name="T:C1.Win.C1Command.PanelCancelEventHandler">
            <summary>
            Represents the method that will handle a PanelClosing event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PanelCancelEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBarPageEventArgs">
            <summary>
            A class that contains C1TopicBar page event data.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBarPageEventArgs.#ctor(C1.Win.C1Command.C1TopicPage)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicBarPageEventArgs"/> class.
            </summary>
            <param name="page">The <see cref="T:C1.Win.C1Command.C1TopicPage"/> object.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBarPageEventArgs.Page">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1TopicPage"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBarPageEventHandler">
            <summary>
            Represents the method that handles page expanded and collapsed events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Command.C1TopicBarPageEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBarClickEventArgs">
            <summary>
            A class that contains C1TopicBar click event data.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBarClickEventArgs.#ctor(C1.Win.C1Command.C1TopicPage,C1.Win.C1Command.C1TopicLink)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicBarClickEventArgs"/> class.
            </summary>
            <param name="page">The <see cref="T:C1.Win.C1Command.C1TopicPage"/> object.</param>
            <param name="link">The <see cref="T:C1.Win.C1Command.C1TopicLink"/> object.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBarClickEventArgs.Page">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1TopicPage"/> object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBarClickEventArgs.Link">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1TopicLink"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBarClickEventHandler">
            <summary>
            Represents the method that handles C1TopicBar click event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Command.C1TopicBarClickEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.MenuPopup.#ctor(C1.Win.C1Command.BarAddIn,C1.Win.C1Command.C1CommandLink,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="barAddIn"></param>
            <param name="cl"></param>
            <param name="screenPt">used if cl == null for positioning</param>
        </member>
        <member name="T:C1.Win.C1Command.MessageHandler">
            <summary>
            Summary description for MessageHandler.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ShortcutHelper">
            <summary>
            ShortcutHelper. Keyboard shortcut handling.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyleRenderer._prepareImageNoScaleLocker">
            <summary>
            #49566 lock for image processing
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBar">
            <summary>
            Represents an Outlook-style navigation bar control. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.#ctor">
            <summary>
            Initializes a new instance of the C1NavBar class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.PanelHeaderImage">
            <summary>
            Gets or sets the image that is displayed on the header of the active panel.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.PanelHeaderImageTransparentColor">
            <summary>
            Gets or sets the color to treat as transparent in PanelHeaderImage images.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializePanelHeaderImageTransparentColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.PanelHeaderImageTransparentColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.PanelHeaderImageTransparentColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetPanelHeaderImageTransparentColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBar.PanelHeaderImageTransparentColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Buttons">
            <summary>
            Gets the collection of buttons in this navigation bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Panels">
            <summary>
            Gets the collection of panels in this navigation bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.SelectedPanel">
            <summary>
            Gets the currently visible panel in this navigation bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ButtonArrangement">
            <summary>
            Gets or sets the string defining the order and visibility for buttons in this navigation bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.DefaultArrangement">
            <summary>
            Gets the string with the default order and visibility options for the buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.StackButtonCount">
            <summary>
            Gets or sets the number of buttons displayed in the stack (-1 shows all buttons).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.MaxStackButtons">
            <summary>
            Gets or sets the maximum number of buttons in the stack (unlimited if -1).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.SelectedButtonIndex">
            <summary>
            Gets or sets index of the selected button in the Buttons collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.SelectedButton">
            <summary>
            Gets or sets the button, which is currently selected in the C1NavBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.DefaultButtonIndex">
            <summary>
            Gets or sets the index of the button to be selected when the form opens.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.VisibleButtonCount">
            <summary>
            Returns the number of visible buttons in the C1NavBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.CloseButton">
            <summary>
            Gets or sets a value indicating whether the close button is shown in panel caption, and what is closed when it is clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ShowOptionsMenu">
            <summary>
            Gets or sets a value indicating whether the runtime options menu is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ShowVerticalTextOnCollapse">
            <summary>
            Gets or sets a value indicating whether the vertical text is displayed in collapsed C1NavBar control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.AllowCollapse">
            <summary>
            Gets or sets a value indicating whether the collapse button is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.CollapseDirection">
            <summary>
            Gets or sets a value indicating the direction in which to collapse the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Collapsed">
            <summary>
            Gets or set the value indicating whether the control is currently in a collapsed state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBar.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.PanelHeaderHeight">
            <summary>
            Gets or sets the height of the navigation bar panels' header.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ButtonMargins">
            <summary>
            Use Style instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.GripMargins">
            <summary>
            Use Style instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.GripHeight">
            <summary>
            Use Style instead.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.PanelHeaderFont">
            <summary>
            Gets or sets the font used in panel headers.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializePanelHeaderFont">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.PanelHeaderFont"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.PanelHeaderFont"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetPanelHeaderFont">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBar.PanelHeaderFont"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.SectionHeaderHeight">
            <summary>
            Gets or sets the height of the section header within the navigation bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.SectionHeaderFont">
            <summary>
            Gets or sets the font used in section headers.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeSectionHeaderFont">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.SectionHeaderFont"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.SectionHeaderFont"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetSectionHeaderFont">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBar.SectionHeaderFont"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.SectionHeaderIndent">
            <summary>
            Gets or sets the space before text caption in a section header.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ButtonHeight">
            <summary>
            Gets or sets the height of each stack button within the C1NavBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ButtonFont">
            <summary>
            Gets or sets the font used to render text on a stack button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeButtonFont">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.ButtonFont"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.ButtonFont"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetButtonFont">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBar.ButtonFont"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ImageScalingSize">
            <summary>
            Gets or sets the size of images displayed on stack buttons (24 x 24 pixels by default).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.ImageIndent">
            <summary>
            Gets or sets the space before the image on a stack button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.TextImageGap">
            <summary>
            Gets or sets the space between the image and the text on a stack button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Theme">
            <summary>
            Represents a set of color properties to customize appearance of C1NavBar. The property is obsolete. Use PanelStyle property instead.
            </summary>
            <remarks>
            <para>The theme colors are reset when VisualStyle property is changed to a new value.</para>
            
            <para>Some theme colors have effect only with certain visual styles.</para>
            
            <list type="table">
               <listheader>
                <description>List of the <see cref="T:C1.Win.C1Command.C1NavBarTheme"/> properties, which have effect in Classic, OfficeXP, Office2003 visual styles:</description>
              </listheader>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.GripGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.GripGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorLightColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/></description></item>
            </list>
            
            
            <list type="table">
               <listheader>
                <description>List of the <see cref="T:C1.Win.C1Command.C1NavBarTheme"/> properties, which have effect in WindowsXP visual style:</description>
              </listheader>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/></description></item>
            </list>
            
            Note, Theme does not have effect in Office2007, Office2010 visual styles.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.StripHeight">
            <summary>
            Gets or sets the height of the button strip at the bottom of the navigation bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.UIStrings">
            <summary>
            Gets the array of user interface strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Style">
            <summary>
            Gets the style of C1NavBar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ShouldSerializeStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBar.Style"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBar.Style"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ResetStyle">
            <summary>
            Resets the Style property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnStyleChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Text">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.AllowDrop">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.AutoScroll">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref = "T:System.Windows.Forms.ImageLayout"/> enumeration.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.AutoScrollMargin">
            <summary>
            Gets or sets the size of the auto-scroll margin.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.AutoScrollMinSize">
            <summary>
            Gets or sets the minimum size of the auto-scroll.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.UseWaitCursor">
            <summary>
            Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.CausesValidation">
            <summary>
            Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.ImeModeChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ImeModeChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.CursorChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.CursorChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.KeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.KeyPress">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.KeyUp">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyUp"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PreviewKeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.PreviewKeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.MouseCaptureChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MouseCaptureChanged"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.TabStop">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabStop"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.TabIndex">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabIndex"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Margin">
            <inheritdoc cref="P:System.Windows.Forms.Control.Margin"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.TextChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.TabStopChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabStopChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.TabIndexChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabIndexChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.MarginChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MarginChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.CausesValidationChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.CausesValidationChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.Scroll">
            <inheritdoc cref="E:System.Windows.Forms.ScrollableControl.Scroll"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.DragEnter">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragEnter"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.DragLeave">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragLeave"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.DragDrop">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragDrop"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.DragOver">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragOver"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.ButtonClick">
            <summary>
            Occurs when the user presses the button on the C1NavBar.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.Refreshed">
            <summary>
            Fired by the Refresh method. Catch-all for changes affecting the docking tab.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.CloseButtonClick">
            <summary>
            Occurs when the close button on the panel header is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.CollapseButtonClick">
            <summary>
            Occurs when the collapse button on the panel header is clicked. Allows to cancel collapsing.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PanelClosing">
            <summary>
            Occurs when the currently selected panel is about to be closed by the user. Allows to cancel closing the panel.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PanelHeaderClick">
            <summary>
            Occurs when the panel header is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PanelHeaderDoubleClick">
            <summary>
            Occurs when the panel header is double clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PanelHeaderImageClick">
            <summary>
            Occurs when the panel header image is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.PanelClosed">
            <summary>
            Occurs after a panel has closed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.ShowOptionsMenuChanged">
            <summary>
            Occurs when the ShowOptionsMenu property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.AllowCollapseChanged">
            <summary>
            Occurs when the AllowCollapse property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.CollapseDirectionChanged">
            <summary>
            Occurs when the CollapseDirection property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.CloseButtonChanged">
            <summary>
            Occurs when the CloseButton property is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.SelectedPanelChanging">
            <summary>
            Occurs when the currently selected panel is about to be changed. Allows to cancel changing the panel.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.SelectedPanelChanged">
            <summary>
            Occurs when the selected panel is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBar.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.SaveDefaultArrangement">
            <summary>
            Save current order and visibility options as the default button arrangement.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.DefaultSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.DisplayRectangle">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.CreateControlsInstance">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnParentChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnRightToLeftChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnBackColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnForeColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnTextChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnDoubleClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnVisibleChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnButtonClick(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._buttonClickEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnCloseButtonClick(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._closeButtonClickEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnCollapseButtonClick(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._collapseButtonClickEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnPanelClosing(C1.Win.C1Command.PanelCancelEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._panelClosingEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.PanelCancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnPanelClosed(C1.Win.C1Command.PanelEventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._panelClosedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.PanelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnPanelHeaderClick(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._panelHeaderClick"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnPanelHeaderDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._panelHeaderDoubleClick"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnPanelHeaderImageClick(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._panelHeaderImageClick"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnSelectedPanelChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._selectedPanelChangedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnSelectedPanelChanging(C1.Win.C1Command.NavBarCancelEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1NavBar.SelectedPanelChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.NavBarCancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnShowOptionsMenuChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._showOptionsMenuChangedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnAllowCollapseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._allowCollapseChangedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnCollapseDirectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._collapseDirectionChangedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnCloseButtonChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._closeButtonChangedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:C1.Win.C1Command.C1NavBar._visualStyleChangedEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar._validatePanelIndex(System.Int32)">
            <summary>
            looks for the nearest to the spec'd index with Button.Visible panel
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.GetCollapsedSize">
            <summary>
            Get the value of size for control in a collapsed state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBar.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1NavBar.VisualStyle"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBar.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="T:C1.Win.C1Command.NavBarCancelEventHandler">
            <summary>
            Represents a method that handle to cancel NavBar changing events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Command.NavBarCancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.NavBarCancelEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Command.C1NavBar.SelectedPanelChanging"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCancelEventArgs.#ctor(System.Int32,C1.Win.C1Command.C1NavBarPanel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.NavBarCancelEventArgs"/> class.
            </summary>
            <param name="newSelectedIndex">The new index for the selected panel.</param>
            <param name="newSelectedPanel">The new selected <see cref="T:C1.Win.C1Command.C1NavBarPanel"/>.</param>
            <param name="cancel">True to cancel the event; otherwise, false.</param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCancelEventArgs.NewSelectedIndex">
            <summary>
            The new index for the selected panel.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCancelEventArgs.NewSelectedPanel">
            <summary>
            The new selected <see cref="T:C1.Win.C1Command.C1NavBarPanel"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarButton">
            <summary>
            The button of C1NavBar panel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarButton.NavBarButtonTypeConverter">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1NavBarButton"/> type converter.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.NavBarButtonTypeConverter.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.NavBarButtonTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.NavBarButtonTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.#ctor">
            <summary>
            Initializes a new instance of the C1NavBarButton class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ID">
            <summary>
            Gets the unique identifier, which is the same for the corresponding button and panel.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.Image">
            <summary>
            Gets or sets the image that is displayed on the button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.SmallImage">
            <summary>
            Gets or sets the small image that is displayed in the button strip.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ImageTransparentColor">
            <summary>
            Gets or sets the color to treat as transparent in Image and SmallImage images.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ShouldSerializeImageTransparentColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarButton.ImageTransparentColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarButton.ImageTransparentColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ResetImageTransparentColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarButton.ImageTransparentColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.Text">
            <summary>
            Gets or sets the text displayed on the stack button, or in a tooltip when the button is in the bottom strip.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ShouldSerializeText">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarButton.Text"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarButton.Text"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ResetImageText">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarButton.Text"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.PanelHeader">
            <summary>
            Gets or sets the text shown on the panel header.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.Visible">
            <summary>
            Gets or sets the visibility of the button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarButton.ButtonCollection">
            <summary>
            The collection of buttons in navigation bar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.AddNewButton">
            <summary>
            Creates a new button, puts the button into the collection, returns the created button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.IndexOfID(System.Int32)">
            <summary>
            Determines the index of the item in the collection
            with the specified value of the ID property.
            </summary>
            <param name="id">The value of the ID property to search for.</param>
            <returns>Index of the button with the specified ID,
            or -1 if no such button exists.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the IList has a fixed size.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Clear">
            <summary>
            Removes all items from the IList.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Enumerator">
            <summary>
            Supports a simple iteration over a collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the PagedControlsCollectionBase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.CopyTo(System.Array)">
            <summary>
            Copies the ButtonCollection to a one-dimensional array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies the ArrayList or a portion of it to a one-dimensional array.
            </summary>
            <param name="index"></param>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an ICollection to the end.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarButton.ButtonCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarOptionsForm">
            <summary>
            C1NavBar options form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarOptionsForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1NavBarOptionsForm"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarPanel">
            <summary>
            Represents the panel of navigation bar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.#ctor">
            <summary>
            Initializes a new instance of the C1NavBarPanel class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.PanelVisible">
            <summary>
            Gets or sets the value indicating whether the panel is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.Button">
            <summary>
            Gets or sets the corresponding button for this panel.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.ResetButton">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.ShouldSerializeButton">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.ResetBackColor">
            <summary>
            Resets the BackColor property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.ID">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.DefaultSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.Anchor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.AutoSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.AutoSizeMode">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.Dock">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.BorderStyle">
            <inheritdoc cref="P:System.Windows.Forms.Panel.BorderStyle"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.MaximumSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.MinimumSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.PreferredSize">
            <inheritdoc cref="P:System.Windows.Forms.Control.PreferredSize"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.TabIndex">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabIndex"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.TabStop">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabStop"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.Text">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.Visible">
            <inheritdoc cref="P:System.Windows.Forms.Control.Visible"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.Location">
            <inheritdoc cref="P:System.Windows.Forms.Control.Location"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.AutoSizeChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.AutoSizeChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.DockChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.DockChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.LocationChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.LocationChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.TabIndexChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabIndexChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.TabStopChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabStopChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.TextChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarPanel.VisibleChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.VisibleChanged"/>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarPanel.PanelCollection">
            <summary>
            The collection of navigation bar panels.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.FindID(System.Int32)">
            <summary>
            Looks for the panel in the collection with the specified value of the ID property.
            </summary>
            <param name="id">The value of the ID property to search for.</param>
            <returns>Panel with the specified ID, or null if no such panel exists.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.IndexOfID(System.Int32)">
            <summary>
            Determines the index of the item in the collection
            with the specified value of the ID property.
            </summary>
            <param name="id">The value of the ID property to search for.</param>
            <returns>Index of the panel with the specified ID,
            or -1 if no such panel exists.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.check_page(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.OnPageAdded(System.Windows.Forms.Control)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.OnPageRemoved(System.Windows.Forms.Control,System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="page"></param>
            <param name="pageIdx"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.BeginUpdate">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.EndUpdate">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.PanelCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarPanel.PanelCollection.Item(System.String)">
            <summary>
            Gets a C1NavBarPanel with the specified key from the collection. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarPanel.PanelCollection.IndexOfKey(System.String)">
            <summary>
            Returns the index of the first occurrence of the C1NavBarPanel with the specified key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarSectionHeader">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1NavBar"/> section header class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarSectionHeader.#ctor">
            <summary>
            Initializes a new instance of the C1NavBarSectionHeader class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.Owner">
            <summary>
            Gets the owner C1NavBar control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.Text">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarSectionHeader.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarSectionHeader.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.AllowDrop">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.BackgroundImageLayout">
            <inheritdoc cref="P:System.Windows.Forms.Control.BackgroundImageLayout"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.UseWaitCursor">
            <inheritdoc cref="P:System.Windows.Forms.Control.UseWaitCursor"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.CausesValidation">
            <inheritdoc cref="P:System.Windows.Forms.Control.CausesValidation"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.TabStop">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabStop"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.TabIndex">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabIndex"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.Margin">
            <inheritdoc cref="P:System.Windows.Forms.Control.Margin"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarSectionHeader.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.ImeModeChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ImeModeChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.KeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.KeyPress">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.KeyUp">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyUp"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.PreviewKeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.PreviewKeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.TabStopChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabStopChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.TabIndexChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabIndexChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.MarginChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MarginChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarSectionHeader.CausesValidationChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.CausesValidationChanged"/>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarHorizontalRule">
            <summary>
            Represents the <see cref="T:C1.Win.C1Command.C1NavBar"/> horizontal rule control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarHorizontalRule.#ctor">
            <summary>
            Initializes a new instance of the C1NavBarHorizontalRule class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.Owner">
            <summary>
            Gets the owner C1NavBar control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarHorizontalRule.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.Text">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.AllowDrop">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.BackgroundImageLayout">
            <inheritdoc cref="P:System.Windows.Forms.Control.BackgroundImageLayout"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.UseWaitCursor">
            <inheritdoc cref="P:System.Windows.Forms.Control.UseWaitCursor"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.CausesValidation">
            <inheritdoc cref="P:System.Windows.Forms.Control.CausesValidation"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.TabStop">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabStop"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.TabIndex">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabIndex"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.Margin">
            <inheritdoc cref="P:System.Windows.Forms.Control.Margin"/>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarHorizontalRule.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.ImeModeChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ImeModeChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.KeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.KeyPress">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.KeyUp">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyUp"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.PreviewKeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.PreviewKeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.TabStopChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabStopChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.TabIndexChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabIndexChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.MarginChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MarginChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.TextChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1NavBarHorizontalRule.CausesValidationChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.CausesValidationChanged"/>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarTheme">
            <summary>
            Represents a set of color properties to customize appearance of C1NavBar. 
            </summary>
            <remarks>
            <para>The theme colors are reset when VisualStyle property is changed to a new value.</para>
            
            <para>Some theme colors have effect only with certain visual styles.</para>
            
            <list type="table">
               <listheader>
                <description>List of the <see cref="T:C1.Win.C1Command.C1NavBarTheme"/> properties, which have effect in Classic, OfficeXP, Office2003 visual styles:</description>
              </listheader>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.GripGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.GripGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorLightColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/></description></item>
            </list>
            
            
            <list type="table">
               <listheader>
                <description>List of the <see cref="T:C1.Win.C1Command.C1NavBarTheme"/> properties, which have effect in WindowsXP visual style:</description>
              </listheader>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/></description></item>
              <item><description><see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/></description></item>
            </list>
            
            Note, Theme does not have effect in Office2007, Office2010 visual styles.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.#ctor(C1.Win.C1Command.C1NavBar)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1NavBarTheme"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.Win.C1Command.C1NavBar"/> owner.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ClassicTheme">
            <summary>
            Gets the theme that corresponds to the Windows Classic style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.BlueTheme">
            <summary>
            Gets the theme that corresponds to the default blue color scheme.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.OliveGreenTheme">
            <summary>
            Gets the theme that corresponds to the Olive Green color scheme.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.SilverTheme">
            <summary>
            Gets the theme that corresponds to the Silver color scheme.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.RoyaleTheme">
            <summary>
            Gets the theme that corresponds to the Media Center style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor">
            <summary>
            Represents foreground color of panel header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializePanelHeaderForeColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetPanelHeaderForeColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientBegin">
            <summary>
            Represents 1st background gradient color of panel header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializePanelHeaderGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetPanelHeaderGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientEnd">
            <summary>
            Represents 2nd background gradient color of panel header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializePanelHeaderGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetPanelHeaderGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.PanelHeaderGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor">
            <summary>
            Represents foreground color of section header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeSectionHeaderForeColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetSectionHeaderForeColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientBegin">
            <summary>
            Represents 1st background gradient color of section header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeSectionHeaderGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetSectionHeaderGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientEnd">
            <summary>
            Represents 2nd background gradient color of section header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeSectionHeaderGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetSectionHeaderGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.SectionHeaderGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.SeparatorLightColor">
            <summary>
            Represents color of horizontal rule in C1NavBar section header.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeSeparatorLightColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SeparatorLightColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SeparatorLightColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetSeparatorLightColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorLightColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor">
            <summary>
            Represents color of horizontal rule between C1NavBar sections.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeSeparatorNormalColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetSeparatorNormalColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.SeparatorNormalColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.GripGradientBegin">
            <summary>
            Represents 1st gradient color of grip line.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeGripGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.GripGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.GripGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetGripGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.GripGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.GripGradientEnd">
            <summary>
            Represents 2nd gradient color of grip line.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeGripGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.GripGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.GripGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetGripGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.GripGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor">
            <summary>
            Represents foreground color of button in normal state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonNormalForeColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonNormalForeColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientBegin">
            <summary>
            Represents 1st gradient color of button background in normal state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonNormalGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonNormalGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientEnd">
            <summary>
            Represents 2nd gradient color of button background in normal state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonNormalGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonNormalGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonNormalGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedForeColor">
            <summary>
            Represents foreground color of button when it is highlighted.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonHighlightedForeColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedForeColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedForeColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonHighlightedForeColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin">
            <summary>
            Represents 1st gradient color of button background when it is highlighted.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonHighlightedGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonHighlightedGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd">
            <summary>
            Represents 2nd gradient color of button background when it is highlighted.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonHighlightedGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonHighlightedGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonHighlightedGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedForeColor">
            <summary>
            Represents foreground color of button when it is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonPressedForeColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedForeColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedForeColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonPressedForeColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin">
            <summary>
            Represents 1st gradient color of button background when it is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonPressedGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonPressedGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd">
            <summary>
            Represents 2nd gradient color of button background when it is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonPressedGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonPressedGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonPressedGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedForeColor">
            <summary>
            Represents foreground color of button when it is in checked state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonCheckedForeColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedForeColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedForeColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonCheckedForeColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientBegin">
            <summary>
            Represents 1st gradient color of button background when it is in checked state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonCheckedGradientBegin">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientBegin"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientBegin"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonCheckedGradientBegin">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientBegin"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientEnd">
            <summary>
            Represents 2nd gradient color of button background when it is in checked state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeButtonCheckedGradientEnd">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientEnd"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientEnd"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetButtonCheckedGradientEnd">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.ButtonCheckedGradientEnd"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1NavBarTheme.BorderColor">
            <summary>
            Border color.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1NavBarTheme.ResetBorderColor">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1NavBarTheme.BorderColor"/> property to its default value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarBaseStyle">
            <summary>
            C1NavBar base style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarBaseStyle.Owner">
            <summary>
            Gets the <see cref="T:C1.Win.C1Command.C1NavBar"/> owner.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarBaseStyle.ShouldSerialize(System.Drawing.Color)">
            <summary>
            Indicates whether the <see cref = "T:System.Drawing.Color"/> has a default value.
            </summary>
            <param name="field">The property to compare with default value.</param>
            <returns>True if the <see cref = "T:System.Drawing.Color"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.NavBarBaseStyle.RaiseStyleChanged">
            <summary>
            Raise the <see cref = "E:System.Windows.Forms.Control.StyleChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarBaseStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.NavBarButtonStyle">
            <summary>
            Represents C1NavBar button base style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarButtonStyle.ForeColor">
            <summary>
            Represents foreground color of button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarButtonStyle.Background">
            <summary>
            Represents background color or 1st background gradient color of button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarButtonStyle.BackgroundGradientEnd">
            <summary>
            Represents 2nd background gradient color of button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarButtonStyle.InnerBorder">
            <summary>
            Represents the inner border's color of button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarButtonStyle.OuterBorder">
            <summary>
            Represents the outer border's color of button.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarCommonButtonStyle">
            <summary>
            Represents C1NavBar button common style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.MoreButtonImage">
            <summary>
            Gets or sets the more button image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeMoreButtonImage">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.MoreButtonImage"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.MoreButtonImage"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ResetMoreButtonImage">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.NavBarCommonButtonStyle.MoreButtonImage"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Font">
            <summary>
            Gets or sets the font used to render text on a stack button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeFont">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Font"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Font"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ResetFont">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.NavBarCommonButtonStyle.Font"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Height">
            <summary>
            Gets or sets the height of each stack button within the C1NavBar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeHeight">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Height"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Height"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ResetHeight">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.NavBarCommonButtonStyle.Height"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Margins">
            <summary>
            Gets or sets the margins.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeMargins">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Margins"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Margins"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ResetMargins">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.NavBarCommonButtonStyle.Margins"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Normal">
            <summary>
            Represents style of normal button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeNormal">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Normal"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Normal"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Highlighted">
            <summary>
            Represents style of highlighted button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeHighlighted">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Highlighted"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Highlighted"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Checked">
            <summary>
            Represents style of checked button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializeChecked">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Checked"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Checked"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.NavBarCommonButtonStyle.Pressed">
            <summary>
            Represents style of pressed button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarCommonButtonStyle.ShouldSerializePressed">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Pressed"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarCommonButtonStyle.Pressed"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="T:C1.Win.C1Command.NavBarGripStyle">
            <summary>
            Represents C1NavBar grip style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarGripStyle.#ctor(C1.Win.C1Command.C1NavBar)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.NavBarGripStyle"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.Win.C1Command.C1NavBar"/> owner.</param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarGripStyle.Height">
            <summary>
            Gets or sets the grip height.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarGripStyle.Margins">
            <summary>
            Gets or sets the grip margins.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarGripStyle.ShouldSerializeMargins">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.NavBarGripStyle.Margins"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.NavBarGripStyle.Margins"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="T:C1.Win.C1Command.NavBarHeaderStyle">
            <summary>
            Represents the C1NavBar header style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarHeaderStyle.Font">
            <summary>
            Gets or sets the font used to render text on a stack button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarHeaderStyle.Height">
            <summary>
            Gets or sets the height of each stack button within the C1NavBar.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarPanelHeaderStyle">
            <summary>
            Represents the C1NavBar header panel style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarPanelHeaderStyle.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarPanelHeaderStyle.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarPanelHeaderStyle.Height">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.NavBarPanelHeaderStyle.Image">
            <summary>
            Gets or sets the image that is displayed on the header of the active panel.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarPanelHeaderStyle.ImageTransparentColor">
            <summary>
            Gets or sets the color to treat as transparent in PanelHeaderImage images.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarSectionHeaderStyle">
            <summary>
            Represents the C1NavBar panel header section style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarSectionHeaderStyle.Height">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.NavBarSectionHeaderStyle.Indent">
            <summary>
            Gets or sets the space before text caption in a section header.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarStyle">
            <summary>
            Represents the C1NavBar style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarStyle.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarStyle.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarStyle.Grip">
            <summary>
            Represents style of grip.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarStyle.Button">
            <summary>
            Represents style of buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarStyle.Panel">
            <summary>
            Represents style of panels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarStyle.Section">
            <summary>
            Represents style of sections.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarStyle.Separator">
            <summary>
            Represents style of separator.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarPanelStyle">
            <summary>
            Represents the C1NavBar panel style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarPanelStyle.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarPanelStyle.Dispose(System.Boolean)">
            <summary>
            Called when the class is being disposed.
            </summary>
            <param name="disposing">
            True to cleanup.
            </param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarPanelStyle.Header">
             <summary>
            Represents style of panel header.
             </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarPanelStyle.Border">
            <summary>
            Gets style for the panel border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarSectionStyle">
            <summary>
            Represents the C1NavBar section style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarSectionStyle.#ctor(C1.Win.C1Command.C1NavBar)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.NavBarSectionStyle"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.Win.C1Command.C1NavBar"/> owner.</param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarSectionStyle.Header">
            <summary>
            Represents style of section header.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarBorderStyle">
            <summary>
            Represents the C1NavBar border style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarBorderStyle.#ctor(C1.Win.C1Command.C1NavBar)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.NavBarBorderStyle"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.Win.C1Command.C1NavBar"/> owner.</param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarBorderStyle.Color">
            <summary>
            Represents color of border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.NavBarSeparatorStyle">
            <summary>
            Represents the C1NavBar separator style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.NavBarSeparatorStyle.#ctor(C1.Win.C1Command.C1NavBar)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.NavBarSeparatorStyle"/> class.
            </summary>
            <param name="owner">The <see cref="T:C1.Win.C1Command.C1NavBar"/> owner.</param>
        </member>
        <member name="P:C1.Win.C1Command.NavBarSeparatorStyle.LightColor">
            <summary>
            Represents light color of separator.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.NavBarSeparatorStyle.NormalColor">
            <summary>
            Represents normal color of separator.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1OutBar">
            <summary>
            Outlook-style container/tab control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.#ctor">
            <summary>
            Initializes a new instance of the C1OutBar class
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.#ctor(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.CreateAccessibilityInstance">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.FindPage(System.String)">
            <summary>
            Returns the index of the page with the specified text, or -1 if such a page does not exist.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.IsPressed(C1.Win.C1Command.C1OutPage)">
            <summary>
            Returns true if the specified page caption is in the pressed state, or false otherwise.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.IsHot(C1.Win.C1Command.C1OutPage)">
            <summary>
            Returns true if the specified page caption is in the hot state, or false otherwise.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ScrollUp(System.Int32)">
            <summary>
            Scrolls embedded toolbar up.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ScrollDown(System.Int32)">
            <summary>
            Scrolls embedded toolbar down 
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.BeginUpdate">
            <summary>
            Temporarily suspends the layout logic for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.EndUpdate">
            <summary>
            Resumes normal layout logic.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.PageTitleHeightChanged">
            <summary>
            Event fired when the PageTitleHeight property of the outbar is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.DrawArrow">
            <summary>
            Allows owner draw of C1OutBar's page scrolling arrows.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.DrawPage">
            <summary>
            Occurs when the owner-drawn C1OutPage should be redrawn. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.PageClick">
            <summary>
            Occurs when the page title is clicked. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.MeasurePage">
            <summary>
            Fires when a C1OutBar's page caption must be measured.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.SelectedIndexChanging">
            <summary>
            Event fired when the SelectedIndex property of the outbar is changing.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.SelectedIndexChanged">
            <summary>
            Event fired when the SelectedIndex property of the outbar is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.SelectedPageChanged">
            <summary>
            Event fired when the SelectedPage property of the outbar is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.ShowToolTipsChanged">
            <summary>
            Occurs when the value of the ShowToolTips property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.PageLayoutChanged">
            <summary>
            Occurs when the value of the PageLayout property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.BackHiColorChanged">
            <summary>
            Occurs when the value of the BackHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.ForeHiColorChanged">
            <summary>
            Occurs when the value of the ForeHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.Refreshed">
            <summary>
            Fired by the Refresh method. Catch-all for changes affecting the docking tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ResetBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.BackHiColor">
            <summary>
            Gets or sets the background color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ResetBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ShouldSerializeBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.ForeHiColor">
            <summary>
            Gets or sets the text color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ResetForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ShouldSerializeForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.Pages">
            <summary>
            Gets the collection of outbar pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.SelectedPage">
            <summary>
            Gets or sets the selected page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.SelectedIndex">
            <summary>
            Gets or sets the index of the selected page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ResetSelectedIndex">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1OutBar.SelectedIndex"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ShouldSerializeSelectedIndex">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1OutBar.SelectedIndex"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1OutBar.SelectedIndex"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.PageTitleHeight">
            <summary>
            Gets or sets the height of each page title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.TitleBrush">
            <summary>
            Gets the brush used to draw the title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.TitleHiBrush">
            <summary>
            Gets the brush used to draw the highlighted title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.CaptionFormat">
            <summary>
            Gets text format of caption string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.ShowScrollButtons">
            <summary>
            Gets or sets a value indicating whether scroll buttons for scrolling toolbar links are visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.Animate">
            <summary>
            Gets or sets a value indicating whether to use animation when changing the selected page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.ImageList">
            <summary>
            Gets or sets the ImageList that contains the images shown on page title bars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.PageLayout">
            <summary>
            Gets or sets the layout of text and image on pages' title bars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.Align">
            <summary>
            Gets or sets the alignment of text and image on pages' title bars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.ShowInvisibleItems">
            <summary>
            Gets or sets the value indicating whether invisible pages are shown at design time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.Text">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.Margin">
            <inheritdoc cref="P:System.Windows.Forms.Control.Margin"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.Padding">
            <inheritdoc cref="P:System.Windows.Forms.Control.Padding"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.MarginChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MarginChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.PaddingChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.PaddingChanged"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.TabStop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.TabIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.AllowDrop">
            <inheritdoc/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.TextChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.TabStopChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabStopChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutBar.TabIndexChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabIndexChanged"/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.Invalidate">
            <inheritdoc cref="M:System.Windows.Forms.Control.Invalidate"/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.Refresh">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.DefaultSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.Dispose(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.CreateControlsInstance">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnResize(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnFontChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnDockChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnRightToLeftChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnSelectedPageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnSelectedIndexChanging(C1.Win.C1Command.SelectedIndexChangingEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnPageTitleHeightChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnShowToolTipsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnPageClick(C1.Win.C1Command.PageClickEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnPageLayoutChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnBackHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.OnForeHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ValidatePageIndex(System.Int32)">
            <summary>
            looks for the nearest to the spec'd index with PageVisible page
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.ShowToolTips">
            <summary>
            Gets or sets a value indicating whether tool tip is shown when the mouse is over the page title bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.SuperTooltip">
            <inheritdoc cref="P:C1.Win.C1SuperTooltip.ISupportSuperTooltip.SuperTooltip"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1OutBar.VisualStyle"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutBar.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1OutBar.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1OutBar.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1OutBar.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1OutBar.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1OutBar.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutBar.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="T:C1.Win.C1Command.C1OutPage">
            <summary>
            Represents a single page in a C1OutBar.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1OutPage.C1OutPageControlCollection">
            <summary>
            Represents a collection of control objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.C1OutPageControlCollection.#ctor(C1.Win.C1Command.C1OutPage)">
            <summary>
            Initializes a new instance of the C1OutPageControlCollection class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.C1OutPageControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
            Adds the specified Control object to the collection. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.#ctor">
            <summary>
            Initializes a new instance of the C1OutPage class.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.PageVisibleChanged">
            <summary>
            Occurs when the PageVisible property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.ToolTipTextChanged">
            <summary>
            Occurs when the tooltip text changes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.PageVisible">
            <summary>
            Gets or sets the value indicating whether the page is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.CaptionBounds">
            <summary>
            Returns the caption bounds of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Text">
            <summary>
            Gets or sets the caption of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Pressed">
            <summary>
            Gets the pressed state of the page caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.OwnerDraw">
            <summary>
            Gets or sets the value indicating whether the title of this page is owner-drawn.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Dock">
            <summary>
             This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.IsSelected">
            <summary>
            Returns true if the page is currently selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.IsHot">
            <summary>
             Gets a value indicating whether the mouse pointer is located over caption area of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.ToolTipText">
            <summary>
            Gets or sets the tooltip text for the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.ImageIndex">
            <summary>
            Gets or sets the index of the page image in the outbar's ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Image">
            <summary>
            Gets or sets the page image.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.ShouldSerializeImage">
            <summary>
             This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.ResetImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.ResetBackColor">
            <summary>
            Resets the BackColor property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Anchor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.AutoScroll">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.AutoScrollMargin">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.AutoScrollMinSize">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.AutoSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.AutoSizeMode">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.BorderStyle">
            <inheritdoc cref="P:System.Windows.Forms.Panel.BorderStyle"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.MaximumSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.MinimumSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.PreferredSize">
            <inheritdoc cref="P:System.Windows.Forms.Control.PreferredSize"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.TabIndex">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabIndex"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.TabStop">
            <inheritdoc cref="P:System.Windows.Forms.Control.TabStop"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Visible">
            <inheritdoc cref="P:System.Windows.Forms.Control.Visible"/>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPage.Location">
            <inheritdoc cref="P:System.Windows.Forms.Control.Location"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.AutoSizeChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.AutoSizeChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.DockChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.DockChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.LocationChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.LocationChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.TabIndexChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabIndexChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.TabStopChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TabStopChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.VisibleChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.VisibleChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1OutPage.Scroll">
            <inheritdoc cref="E:System.Windows.Forms.ScrollableControl.Scroll"/>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.OnToolTipTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.OnEnabledChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.CreateControlsInstance">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.SetVisibleCore(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.OnPageVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPage.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.C1OutPages">
            <summary>
            The collection of outbar pages.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPages.check_page(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPages.OnPageAdded(System.Windows.Forms.Control)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPages.OnPageRemoved(System.Windows.Forms.Control,System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="page"></param>
            <param name="pageIdx"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPages.BeginUpdate">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPages.EndUpdate">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPages.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1OutPages.Item(System.String)">
            <summary>
            Gets an outpage with the specified key from the collection. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1OutPages.IndexOfKey(System.String)">
            <summary>
            Returns the index of the first occurrence of the C1OutPage with the specified key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Command.PagedControlsCollectionBase">
            <summary>
            Represents a a base class for page collections of a paged-like control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of thePagedControlsCollectionBase class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.check_page(System.Object)">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.OnPageAdded(System.Windows.Forms.Control)">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.OnPageRemoved(System.Windows.Forms.Control,System.Int32)">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
            <param name="page"></param>
            <param name="pageIdx"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.BeginUpdate">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.EndUpdate">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.set_page(System.Windows.Forms.Control,System.Int32)">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.get_page(System.Int32)">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.Owner">
            <summary>
            This [method|property|class] is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.IsFixedSize">
            <summary>
            Gets a value indicating whether the IList has a fixed size.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Clear">
            <summary>
            Removes all items from the IList.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.PagedControlsCollectionBase.Enumerator">
            <summary>
            Supports a simple iteration over a collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.PagedControlsCollectionBase.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the PagedControlsCollectionBase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.CopyTo(System.Array)">
            <summary>
            Copies the PagedControlsCollectionBase to a one-dimensional array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies the ArrayList or a portion of it to a one-dimensional array.
            </summary>
            <param name="index"></param>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an ICollection to the end.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.C1Command.PagedControlsCollectionBase.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="T:C1.Win.C1Command.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_center">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_center_horz">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_center_vert">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_onlycenter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2005docking_up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_center">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_center_horz">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_center_hot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_center_vert">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_down_hot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_left_hot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_onlycenter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_right_hot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2008docking_up_hot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_center">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_center_horz">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_center_vert">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_down">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_onlycenter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Properties.Resources.vs2010docking_up">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1RadialMenu">
            <summary>
            Represents a radial menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.#ctor">
            <summary>
            Initializes a new instance of the C1RadialMenu class.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1RadialMenu.PropertyChanged">
            <summary>
            Occurs when a public property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1RadialMenu.MenuClosed">
            <summary>
            Occurs when the menu is closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.OnMenuClosed(System.EventArgs)">
            <summary>
            Invokes the MenuClosed event.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>True if a handler exists and was called, false if no handler exists.</returns>
        </member>
        <member name="E:C1.Win.C1Command.C1RadialMenu.ItemClick">
            <summary>
            Occurs when a menu item is clicked.
            </summary>
            <remarks>
            If the clicked item has its own Click event associated with it,
            that event occurs immediately before this one.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.OnItemClick(System.Object)">
            <summary>
            Invokes the ItemClick event.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Radius">
            <summary>
            Gets or sets the menu radius in the expanded state.
            <para>The default value is 160.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.ButtonRadius">
            <summary>
            Gets or sets the radius of the central button.
            <para>The default value is 28.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.InnerRadius">
            <summary>
            Gets or sets the radius separating the area filled with items' background color on the outside
            from the inner area filled with radial menu's own background.
            <para>The default value is 70.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.BorderWidth">
            <summary>
            Gets or sets the width of the radial menu's outer border.
            <para>The default value is 24.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.TooltipPosition">
            <summary>
            Gets or sets the position of the tooltip relative to the radial menu.
            <para>The default value is "left".</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.UseAnimation">
            <summary>
            Gets or sets a value indicating whether the menu should use animation effects.
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Items">
            <summary>
            Gets or sets the collection of items contained in this menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Image">
            <summary>
            Gets or sets the image shown in the radial menu's center button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Cursor">
            <summary>
            Gets or sets the cursor used by the radial menu.
            <para>The default value is "hand".</para>
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.ShouldSerializeCursor">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.ResetCursor">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.AutoHide">
            <summary>
            Gets or sets a value indicating whether the radial menu should automatically hide
            on certain events (such as lost focus etc).
            <para>The default is true.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Enabled">
            <summary>
            Gets or sets a value indicating whether the radial menu is enabled.
            <para>The default is true.</para>
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Visible">
            <summary>
            Gets a value indicating whether the radial menu is currently visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.Expanded">
            <summary>
            Gets a value indicating whether the radial menu is currently expanded.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1RadialMenu.CenterOnScreen">
            <summary>
            Gets or sets the screen coordinates of the menu's center.
            If the menu is currently invisible (<see cref="P:C1.Win.C1Command.C1RadialMenu.Visible"/> is false),
            setting this property throws an exception.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.ShowMenu(System.Windows.Forms.Form,System.Drawing.Point,System.Boolean)">
            <summary>
            Shows the radial menu at the specified screen point.
            If the menu is currently visible at another location, it is hidden first.
            </summary>
            <param name="form">The owner form.</param>
            <param name="pt">The radial menu center's screen coordinates.</param>
            <param name="expand">Indicates whether the menu should show initially expanded.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.HideMenu">
            <summary>
            Hides the radial menu if it is currently visible.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.Move(System.Int32,System.Int32)">
            <summary>
            Moves the radial menu if it is currently visible,
            does nothing otherwise.
            </summary>
            <param name="dx">The X offset.</param>
            <param name="dy">The Y offset.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1RadialMenu.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="newTheme"></param>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.IRootMenu">
            <summary>
            Interface representing the root menu to a <see cref="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow"/> which visualizes it.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.IMenuProvider">
            <summary>
            Interface between a logical menu and a <see cref="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow"/> which visualizes it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.Parent">
            <summary>
            Gets or sets the parent item (may be null).
            Parents are not supposed to be provided by the logical menus,
            instead a submenu's parent is set via this property on the fly
            by the window implementation when the submenu is opened.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.Name">
            <summary>
            Gets a name used to identify the item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.Text">
            <summary>
            Gets the item text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.ToolTip">
            <summary>
            Gets the item tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.Image">
            <summary>
            Gets the item image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.Checked">
            <summary>
            Indicates whether the item is checked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.Enabled">
            <summary>
            Indicates whether the item is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.ItemsCount">
            <summary>
            Gets the number of child items.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.IMenuProvider.GetItem(System.Int32)">
            <summary>
            Gets the specified item.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.CanHandleClick">
            <summary>
            Indicates whether the item can handle a click.
            This is relevant only for items with children (i.e. sub-menus):
            if this property returns true, click within the sector (not on the border)
            invokes the Click action rather than opens the sub-menu.
            Otherwise (if this returns false), click anywhere in the sector opens the sub-menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.IMenuProvider.HandleClick">
            <summary>
            Invoked when the item is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.IMenuProvider.MergeStyle(C1.Win.C1Command.RadialMenu.XItemStyle)">
            <summary>
            Gets the item-specific style. May return null for default style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.IMenuProvider.UserItem">
            <summary>
            Gets the known to user item that the proxy represents,
            such as a RadialMenuItem or a C1CommandLink.
            This is the Item in RadialMenuItemClickEventArgs.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.RootMenuProxy">
            <summary>
            Proxy representing the root menu (<see cref="T:C1.Win.C1Command.C1RadialMenu"/>) and used by a
            <see cref="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow"/> to visualize it.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.CommandLinkProxy">
            <summary>
            Proxy representing a <see cref="T:C1.Win.C1Command.C1CommandLink"/> 
            associated with a <see cref="T:C1.Win.C1Command.RadialMenuCommandItem"/>,
            and used by a <see cref="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow"/> to visualize it.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.CommandLinkProxy.#ctor(C1.Win.C1Command.C1CommandLink)">
            <summary>
            Ctor.
            </summary>
            <param name="link">The link corresponds to the item for which this proxy is being created.</param>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart">
            <summary>
            Identifies parts of a round menu window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.CenterButton">
            <summary>
            The center button (only part visible in collapsed mode).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.CenterSurround">
            <summary>
            Area around the center button - clicks here are associated with the button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.CenterMask">
            <summary>
            Center area mask.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.SectorInner">
            <summary>
            Inner area of a segment (within InnerRadius, bordering on CenterSurround).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.SectorOuter">
            <summary>
            Outer area of a segment (outside InnerRadius, but not in the border).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.SectorBorder">
            <summary>
            Border area of a segment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.SectorProperMask">
            <summary>
            Sector proper mask (inner or outer but NOT border).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart.SectorMask">
            <summary>
            Sector mask (inner, outer or border).
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ClickAction">
            <summary>
            Specifies the possible actions on a mouse click.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ClickAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ClickAction.CenterButtonClick">
            <summary>
            Click center button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ClickAction.ItemClick">
            <summary>
            Click item.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ClickAction.ItemExpand">
            <summary>
            Expand item with a sub-menu.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenu.RadialMenuWindow.AnimateGeometry">
            <summary>
            Specifies current geometry while animating.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.AnimateGeometry.Radius">
            <summary>
            The outer radius.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.AnimateGeometry.StartAngle">
            <summary>
            The start angle.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.AnimateGeometry.BorderWidth">
            <summary>
            The outer border width.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._rootMenu">
            <summary>The root menu.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._menu">
            <summary>The current associated menu.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.XStyle">
            <summary>The visual style.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._centerOnScreen">
            <summary>Menu center's SCREEN coordinates.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._radius">
            <summary>outer circle's radius:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._buttonRadius">
            <summary>small center circle's radius:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._buttonSurroundRadius">
            <summary>radius of the area around the center button still associated with the button.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._innerRadius">
            <summary>inner radius of items' own background color.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._borderWidth">
            <summary>thickness of the outer "border" (where the submenu arrows are):</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._outerPadding">
            <summary>Padding between bounds and current circle rectangle (changes when Expanded changes).</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._useAnimation">
            <summary>Whether to use animation.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._clickOnMouseDown">
            <summary>Whether the "click" event is generated on mouse down (default is mouse up).</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._expanded">
            <summary>current (while animating, target) state:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._animating">
            <summary>while true, _expanded indicates the TARGET state:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._tooltipPosition">
            <summary>Whether/where to show tooltips.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._maxTooltipWidth">
            <summary>Max tooltip width (pixels).</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._tooltipGap">
            <summary>Gap between the inner tooltip side and outer menu radius.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._tooltipRect">
            <summary>Tooltip display rectangle.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._animeInterval">
            <summary>Animation interval (msec).</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._animeExpandFrames">
            <summary>The number of animation frames when expanding or contracting.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._animePulseFrames">
            <summary>The number of animation frames when switching between menus.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._animeLongAngle">
            <summary>Expanding/contracting animation rotation angle.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._segmentsNumber">
            <summary>number of segments:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._segmentsStartAngle">
            <summary>start angle for segment 0, relative to 3 o'clock counterclockwise:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._segmentsGapAngle">
            <summary>Gap between nearby segments:</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._hover">
            <summary>True when (mouse) cursor is over the window.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._hoverWindowPart">
            <summary>Part of the window under the (mouse) cursor.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._hoverSectorIndex">
            <summary>If cursor is over a sector, the sector's index.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow._pressed">
            <summary>True when (mouse) button is down.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.s_itemTextSF">
            <summary>String format for menu items' text.</summary>
        </member>
        <member name="F:C1.Win.C1Command.RadialMenu.RadialMenuWindow.s_tooltipSF">
            <summary>String format for menu tooltips.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.Radius">
            <summary>
            Gets or sets the outer (expanded) radius.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.CenterOnScreen">
            <summary>
            Gets the center position in screen coordinates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ButtonRadius">
            <summary>
            Gets or sets the center button's radius, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.BorderWidth">
            <summary>
            Gets or sets the border width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.InnerRadius">
            <summary>
            Gets or sets the inner radius of the area filled with item background color.
            Set to 0 fill the whole area, set to -1 to ignore.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.Expanded">
            <summary>
            Gets or sets a value indicating whether the menu is expanded.
            Unless animating, Expanded means Bounds are set for expanded,
            otherwise for center. While animating, bounds are set for expanded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.GetButtonRect">
            <summary>
            Gets the center button rectangle relative to Bounds.Location.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.GetOuterRect">
            <summary>
            Gets the outer circle rectangle relative to Bounds.Location.
            Call only valid for Expanded state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.SetBounds(System.Int32)">
            <summary>
            Sets the physical window bounds according to the specified radius.
            We only change bounds between fully expanded and fully collapsed states,
            and do NOT constantly update bounds while animating.
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.Animate(System.Boolean)">
            <summary>
            Transforms the window from one state to another:
            expands, contracts, or changes the current menu.
            Animation is used if <see cref="P:C1.Win.C1Command.RadialMenu.RadialMenuWindow.UseAnimation"/> is true,
            otherwise the transformation is immediate.
            </summary>
            <param name="pulse">If true, the window (which must be expanded already) is redrawn
            for the current menu.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.GetHoverClickAction">
            <summary>
            Gets the type of action that would be performed depending on the current '_hover*' values
            and the item under hover, if any.
            </summary>
            <returns>The action that would be performed on click.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.GetButtonStyle(System.Drawing.Image@)">
            <summary>
            Gets the center button's style to use.
            </summary>
            <param name="image">OUT: center button image; if non-null, should override the one specified with the style.</param>
            <returns>The style to use (possibly with Image overridden by <paramref name="image"/>).</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.OnHoverChanged">
            <summary>
            Called when the part currently under mouse has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.CalcMidRadius(System.Single,System.Single)">
            <summary>
            Calculates the point around which the biggest circle within a segment can be drawn.
            </summary>
            <param name="radius">The outer radius.</param>
            <param name="angle">The segment's angle.</param>
            <returns>Distance from center to the point.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.DrawCenterImage(System.Drawing.Graphics,System.Drawing.Image)">
            <summary>
            Draws center image - radial menu's Image for root, or back arrow for sub-menus.
            </summary>
            <param name="g">The target graphics.</param>
            <param name="image">The button image.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.ClipArc(System.Drawing.Graphics,System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets clip on graphics.
            </summary>
            <param name="g"></param>
            <param name="frame"></param>
            <param name="radius"></param>
            <param name="thickness"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.FillArc(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills an arc with the specified brush.
            </summary>
            <param name="g">Target graphics.</param>
            <param name="brush">The brush to use, or null to do nothing.</param>
            <param name="frame">Frame - square that specifies only the center of the circle the arc is part of.</param>
            <param name="radius">The radius of outer or inner (depending on sign of <paramref name="thickness"/>) edge of the arc.</param>
            <param name="thickness">The arc's thickness - may be negative, then <paramref name="radius"/> is the inner edge of the arc.</param>
            <param name="startAngle">Start angle.</param>
            <param name="sweepAngle">Sweep angle.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.DrawSegment(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Draws a segment (menu item).
            </summary>
            <param name="index">Segment's index (zero is at 12:00).</param>
            <param name="g">Graphics to draw on.</param>
            <param name="outer">The outer circle's (square) rectangle.</param>
            <param name="width">The outer border's width (band where the submenu arrows are).</param>
            <param name="startAngle">Starting angle for the segment's middle (relative to 15:00, counterclockwise).</param>
            <param name="sweepAngle">Segment's angular width.</param>
            <param name="midRadius">Radius of the "middle circle" - where to center text and image.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.AdjustGeometryForTooltip(System.String)">
            <summary>
            Measures the passed tooltip and adjusts geometry
            (_outerPadding, Bounds and _tooltipRect) accordingly.
            </summary>
            <param name="tooltip"></param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.RadialMenuWindow.HitTest(System.Drawing.Point,C1.Win.C1Command.RadialMenu.RadialMenuWindow.WindowPart@,System.Int32@)">
            <summary>
            Checks whether a point is within the window.
            </summary>
            <param name="screenPoint">The point to test, in screen coordinates.</param>
            <param name="windowPart">OUT: window part containing the point.</param>
            <param name="sectorIndex">OUT: index of the sector containing the point, or -1.</param>
            <returns>True if the point is within the window, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.ShapedWindow.Redraw(System.Object)">
            <summary>
            THE method - draws the content of the round window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.StyleBase.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,C1.Win.C1Command.RadialMenu.StyleBase)">
            <summary>
            
            </summary>
            <param name="holder"></param>
            <param name="path">Base path, must end with delimiter. E.g. "/Button/Collapsed/Normal/"</param>
            <param name="fallback">Fallback (similar) style for props not set on this one. May be null.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenu.StyleBase.SetThemeBrushHelperProp(System.String,C1.Win.C1Themes.Shared.C1ThemeProxy,System.String)">
            <summary>
            Sets a property of the ThemeBrushHelper type.
            If the new value is null, the property is removed (i.e. a fallback will be used if available).
            Otherwise, the new value is set on this style.
            </summary>
            <param name="tbhPropName">The property name (type must be ThemeBrushHelper).</param>
            <param name="tp">The theme proxy.</param>
            <param name="path">The path to the background specifying the brush.</param>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenuItemClickEventArgs">
            <summary>
            Arguments for the RadialMenuItemClickEventHandler event handler.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemClickEventArgs.Item">
            <summary>
            Gets the item that was clicked.
            This may be either an object of a type derived from <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/>,
            or a <see cref="T:C1.Win.C1Command.C1CommandLink"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemClickEventArgs.RadialMenuItem">
            <summary>
            If the clicked item was a <see cref="P:C1.Win.C1Command.RadialMenuItemClickEventArgs.RadialMenuItem"/>, returns that item;
            otherwise, returns null.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemClickEventArgs.CommandLink">
            <summary>
            If the clicked item was a <see cref="T:C1.Win.C1Command.C1CommandLink"/>, returns that link;
            otherwise, returns null.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemClickEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the RadialMenuItemClickEventArgs class.
            </summary>
            <param name="item">The item that was clicked.</param>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenuItemClickEventHandler">
            <summary>
            Represents the method that will handle a RadialMenuItemClick event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A RadialMenuItemClickEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Command.TooltipPosition">
            <summary>
            Specifies where to show menu tooltips relative to the radial menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TooltipPosition.None">
            <summary>
            Tooltips are not shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TooltipPosition.Left">
            <summary>
            Tooltips are shown to the left of the menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TooltipPosition.Top">
            <summary>
            Tooltips are shown above the menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TooltipPosition.Right">
            <summary>
            Tooltips are shown to the right of the menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TooltipPosition.Bottom">
            <summary>
            Tooltips are shown below the menu.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenuItemBase">
            <summary>
            Abstract base class for items in a radial menu.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.Name">
            <summary>
            Gets or sets the name used to identify the item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ShouldSerializeName">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ResetName">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.Text">
            <summary>
            Gets or sets the text associated with the menu item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ShouldSerializeText">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ResetText">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.ToolTip">
            <summary>
            Gets or sets the tooltip associated with the menu item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ShouldSerializeToolTip">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ResetToolTip">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.Image">
            <summary>
            Gets or sets the image associated with the menu item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ShouldSerializeImage">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ResetImage">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.Checked">
            <summary>
            Gets or sets a value indicating whether the menu item is checked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ShouldSerializeChecked">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ResetChecked">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the menu item is enabled.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ShouldSerializeEnabled">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.ResetEnabled">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.ParentMenu">
            <summary>
            Gets or sets the parent menu.
            The parent is not serialized, instead it is set on the fly
            when a child menu is shown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.ItemsCount">
            <summary>
            Gets the child items' count.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.GetItem(System.Int32)">
            <summary>
            Gets the specified child item.
            </summary>
            <param name="index">Child item's index.</param>
            <returns>The requested item, or null.</returns>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemBase.CanHandleClick">
            <summary>
            Invoked when the item is clicked.
            Return true to indicate that the item can process a click.
            Return false to indicate that the item cannot process a click
            (useful for sub-menus only - opens a sub-menu if one exists in that case).
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemBase.HandleClick">
            <summary>
            Invoked when the item is clicked.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenuItem">
            <summary>
            Represents a radial menu item, possibly with a sub-menu.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.#ctor">
            <summary>
            Initializes a new instance of the RadialMenuItem class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Items">
            <summary>
            Gets or sets the collection of items contained in this menu item.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.RadialMenuItem.Click">
            <summary>
            Occurs when the menu item is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.OnClick(System.EventArgs)">
            <summary>
            Invokes the Click event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Parent">
            <summary>
            Gets the parent of this menu item (which may be either a <see cref="T:C1.Win.C1Command.C1RadialMenu"/>,
            or another <see cref="T:C1.Win.C1Command.RadialMenuItem"/>).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Name">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ShouldSerializeName">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ResetName">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Text">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ShouldSerializeText">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ResetText">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.ToolTip">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ShouldSerializeToolTip">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ResetToolTip">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Image">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ShouldSerializeImage">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ResetImage">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Checked">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ShouldSerializeChecked">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ResetChecked">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.Enabled">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ShouldSerializeEnabled">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItem.ResetEnabled">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.BackColor">
            <summary>
            Gets or sets the background color of this menu item.
            Empty (default) means that item background specified for the whole menu is used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.HighlightColor">
            <summary>
            Gets or sets the highlight color of this menu item.
            Empty (default) means that item highlight color specified for the whole menu is used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.CheckColor">
            <summary>
            Gets or sets the check mark color of this menu item.
            Empty (default) means that item check mark color specified for the whole menu is used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.BorderColor">
            <summary>
            Gets or sets the non-expandable border color of this menu item.
            Empty (default) means that item non-expandable border color specified for the whole menu is used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.HotExpandableBorderColor">
            <summary>
            Gets or sets the hot expandable border color of this menu item.
            Empty (default) means that style specified for the whole menu is used.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItem.UserData">
            <summary>
            Gets or sets an arbitrary object that can be associated with this menu item.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenuCommandItem">
            <summary>
            Represents a radial menu item associated with a <see cref="T:C1.Win.C1Command.C1Command"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuCommandItem.Command">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Command.C1Command"/> associated with this menu item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ShouldSerializeCommand">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ResetCommand">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuCommandItem.Text">
            <summary>
            Overridden. Gets or sets the text shown by this menu item.
            Note that setting this property does not change the text
            on the associated C1Command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ShouldSerializeText">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ResetText">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuCommandItem.ToolTip">
            <summary>
            Overridden. Gets or sets the tooltip shown by this menu item.
            Note that setting this property does not change the tooltip
            on the associated C1Command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ShouldSerializeToolTip">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ResetToolTip">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuCommandItem.Image">
            <summary>
            Overridden. Gets or sets the image shown by this menu item.
            Note that setting this property does not change the image
            on the associated C1Command.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ShouldSerializeImage">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ResetImage">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuCommandItem.Checked">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ShouldSerializeChecked">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ResetChecked">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuCommandItem.Enabled">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ShouldSerializeEnabled">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuCommandItem.ResetEnabled">
            <summary>This method is for internal use only.</summary>
        </member>
        <member name="T:C1.Win.C1Command.RadialMenuItemCollection">
            <summary>
            The collection of radial menu items.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.IndexOf(C1.Win.C1Command.RadialMenuItemBase)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="item">The <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/> item to locate in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>. </param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Insert(System.Int32,C1.Win.C1Command.RadialMenuItemBase)">
            <summary>
            Inserts an element into the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/> to insert.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/> element at the specified index.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Add(C1.Win.C1Command.RadialMenuItemBase)">
            <summary>
            Adds an object to the end of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="item">The <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/> to be added to the end of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</param>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Contains(C1.Win.C1Command.RadialMenuItemBase)">
            <summary>
            Determines whether an element is in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="item">The <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/> item to locate in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</param>
            <returns>True if item is found in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.CopyTo(C1.Win.C1Command.RadialMenuItemBase[],System.Int32)">
            <summary>
            Copies the entire System.Collections.Generic.List`1 to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> is read-only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Remove(C1.Win.C1Command.RadialMenuItemBase)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="item">The <see cref="T:C1.Win.C1Command.RadialMenuItemBase"/> item to remove from the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</param>
            <returns>True if item is successfully removed; otherwise, false. This method also returns
            false if item was not found in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.GetEnumerator">
            <summary>
            Gets the enumerator of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <returns>The enumerator of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</returns>
        </member>
        <member name="E:C1.Win.C1Command.RadialMenuItemCollection.CollectionChanged">
            <summary>
            Occurs when the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise CollectionChanged event to any listeners.
            Properties/methods modifying this <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> will raise
            a collection changed event through this virtual method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Add(System.Object)">
            <summary>
            Adds an object to the end of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="value">The object to be added to the end of the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</param>
            <returns>The index of last element in collection if value is not null; -1 otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</param>
            <returns>True if item is found in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>. </param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="value">The object to insert.</param>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> has a fixed size.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</param>
            <returns>True if item is successfully removed; otherwise, false. This method also returns
            false if item was not found in the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Command.RadialMenuItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire System.Collections.Generic.List`1 to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemCollection.IsSynchronized">
            <summary>
             Gets a value indicating whether access to the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.RadialMenuItemCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:C1.Win.C1Command.RadialMenuItemCollection"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1ToolBar">
            <summary>
            A themeable control that contains one or more buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.#ctor">
            <summary>
            Initializes a new instance of the C1ToolBar class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1ToolBar.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.CreateAccessibilityInstance">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1ToolBar.VisualStyle"/>.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.Reset">
            <summary>
            Event fired when Reset command from Customize dialog is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonLookHorzChanged">
            <summary>
            Occurs when the value of the ButtonLookHors property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonLookVertChanged">
            <summary>
            Occurs when the value of the ButtonLookVert property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonLookEnforceHorzChanged">
            <summary>
            Occurs when the value of the ButtonLookEnforceHors property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonLookEnforceVertChanged">
            <summary>
            Occurs when the value of the ButtonLookEnforceVert property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonLayoutHorzChanged">
            <summary>
            Occurs when the value of the ButtonLayoutHors property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonLayoutVertChanged">
            <summary>
            Occurs when the value of the ButtonLayoutVert property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonAlignChanged">
            <summary>
            Occurs when the value of the ButtonAlign property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ButtonWidthChanged">
            <summary>
            Occurs when the value of the ButtonWidth property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.MinButtonSizeChanged">
            <summary>
            Occurs when the value of the MinButtonSize property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.CustomizeButtonChanged">
            <summary>
            Occurs when the value of the CustomizeButton property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.BorderChanged">
            <summary>
            Occurs when the value of the Border property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ToolBarStyleChanged">
            <summary>
            Occurs when the value of the ToolBarStyle property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.HorizontalChanged">
            <summary>
            Occurs when the value of the Horizontal property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ShowToolTipsChanged">
            <summary>
            Occurs when the value of the ShowToolTips property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.BackHiColorChanged">
            <summary>
            Occurs when the value of the BackHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.ForeHiColorChanged">
            <summary>
            Occurs when the value of the ForeHiColor property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.MeasureLink">
            <summary>
            Occurs when an owner drawn link needs to be measured.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.LayoutLink">
            <summary>
            Occurs when an owner drawn link needs to layout its text, image and control within the link bounds.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.DrawLink">
            <summary>
            Occurs when an owner drawn link needs to be drawn.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.DrawBar">
            <summary>
            Occurs when an owner drawn menu or toolbar needs to be drawn.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.MeasureFloatingCaption">
            <summary>
            Occurs when a floating toolbar's caption needs to be measured. Allows to customize the toolbar's size.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.DrawFloatingCaption">
            <summary>
            Occurs when a floating toolbar's caption needs to be drawn. Allows to owner draw the caption.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.CurrentLinkChanged">
            <summary>
            Occurs when the current command link changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.WrapChanged">
            <summary>
            Occurs when the value of the Wrap property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.WrapTextChanged">
            <summary>
            Occurs when the value of the WrapText property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1ToolBar.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnDockChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnLocationChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnFontChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.InitLayout">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseEnter(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseHover(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnBackgroundImageLayoutChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.SetVisibleCore(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnCursorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnParentCursorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.TabStop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.TabIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.HideFirstDelimiter">
            <summary>
            Gets or sets a value indicating whether the control should hide the first delimiter.
            </summary>
            <remarks>
            C1CommandLink.Delimiter property shows a delimiter before a C1CommandLink present at C1ToolBar. The HideFirstDelimiter property hides the delimiter for the first visible C1CommandLink even the Delimiter property of the C1CommandLink is True.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1ToolBar.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1ToolBar.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1ToolBar.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1ToolBar.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1ToolBar.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.Font">
            <summary>
            Gets or sets the font of the text displayed by the control.
            </summary>
            <Returns>
            The <see cref="T:System.Drawing.Font"/> to apply to the text displayed by the control. The default
            is the value of the  <see cref="P:System.Windows.Forms.Control.DefaultFont"/> property.
            </Returns>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetFont">
            <summary>
            Resets the <see cref="P:C1.Win.C1Command.C1ToolBar.Font"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeFont">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetBackColor">
            <summary>
            Resets the BackColor property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.BackHiColor">
            <summary>
            Gets or sets the background color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeBackHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ForeHiColor">
            <summary>
            Gets or sets the text color of the highlighted item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeForeHiColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.CommandHolder">
            <summary>
            Gets or sets the command holder.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.Floating">
            <summary>
            Indicates whether the toolbar is floating.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.Horizontal">
            <summary>
            Gets or sets the orientation of the toolbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.Movable">
            <summary>
            Gets or sets the value indicating whether the toolbar can be moved by the user.
            </summary>
            <remarks>Only works when <see cref="T:C1.Win.C1Command.C1ToolBar"/> is placed on C1CommandDock control.</remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetMovable">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1ToolBar.Movable"/> property to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeMovable">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1ToolBar.Movable"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1ToolBar.Movable"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.IsDrawDragger">
            <summary>
            Gets true if dragger should draw; the only difference from Movable is that it returns true
            if !Parent.Enabled but other conditions are true.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLayoutHorz">
            <summary>
            Gets or sets the layout of the buttons when the toolbar is horizontal.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLayoutVert">
            <summary>
            Gets or sets the layout of the buttons when the toolbar is vertical.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLookHorz">
            <summary>
            Gets or sets the default look of the buttons when the toolbar is horizontal.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLookVert">
            <summary>
            Gets or sets the default look of the buttons when the toolbar is vertical.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.MinButtonSize">
            <summary>
            Gets or sets the minimum size (width and height) of button in toolbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonWidth">
            <summary>
            Gets or sets the width for all buttons (applies to horizontal toolbars only; if 0, buttons are individually sized).
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.CustomizeButton">
            <summary>
            Gets or sets the visibility of customize button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.CanBeCustomizable">
            <summary>
            Test whether the toolbar can be made customizable  (i.e. is on a C1CommandDock).
            (If there is no parent, true is returned.)
            </summary>
            <returns>True if the toolbar can be customizable.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLookEnforceHorz">
            <summary>
            Gets or sets the value indicating whether to force all buttons to comply with ButtonLookHorz.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLookEnforceVert">
            <summary>
            Gets or sets the value indicating whether to force all buttons to comply with ButtonLookVert.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.CommandLinks">
            <summary>
            Gets the collection of commandlinks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLayoutCurrent">
            <summary>
            Gets the current layout of the buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLookCurrent">
            <summary>
            Gets the default look of the buttons in the current toolbar orientation.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonLookEnforceCurrent">
            <summary>
            Gets the value indicating whether to force all buttons to comply with ButtonLookCurrent.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.BackImageInImageBar">
            <summary>
            Gets or sets the value indicating whether to show background image in the image bar of dropdown menus.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.Border">
            <summary>
            Gets or sets the appearance of the toolbar’s border.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ResetBorder">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeBorder">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.AutoSize">
            <summary>
            Gets or sets the value indicating whether the toolbar automatically adjusts it size to fit all items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ButtonAlign">
            <summary>
            Gets or sets the button alignment for vertical toolbars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ToolBarStyle">
            <summary>
            Gets or sets the style of the toolbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.CustomizeOptions">
            <summary>
            Gets or sets the value indicating what can be customized in this toolbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.Wrap">
            <summary>
            Gets or sets the value indicating whether to wrap the toolbar or show a \"More...\" button if not all items fit on a single line.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.WrapText">
            <summary>
            Gets or sets the value indicating whether to wrap text in links when ButtonWidth is greater than zero and text doesn't fit.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.CustomizeMode">
            <summary>
            Indicates whether the toolbar is in customize mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.CloseMoreOnItemClick">
            <summary>
            Gets or sets the value indicating whether the menu that is
            automatically created when some items do not fit on the toolbar closes
            when an item on that menu is clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.ShowToolTips">
            <summary>
            Gets or sets the value indicating whether to show tooltip texts when mouse cursor is over toolbutton.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeShowToolTips">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1ToolBar.ShowToolTips"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1ToolBar.ShowToolTips"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1ToolBar.SuperTooltip">
            <inheritdoc cref="P:C1.Win.C1SuperTooltip.ISupportSuperTooltip.SuperTooltip"/>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.ShouldSerializeSuperTooltip">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1ToolBar.SuperTooltip"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1ToolBar.SuperTooltip"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.HideSuperTooltip">
            <summary>
            Hides current active super tooltip if needed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnWrapChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnWrapTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnReset(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonAlignChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonWidthChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMinButtonSizeChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnCustomizeButtonChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnToolBarStyleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnHorizontalChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnBorderChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnMeasureFloatingCaption(C1.Win.C1Command.MeasureFloatingCaptionEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnDrawFloatingCaption(C1.Win.C1Command.DrawFloatingCaptionEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnBackHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnForeHiColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonLookHorzChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonLookVertChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonLookEnforceHorzChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonLookEnforceVertChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonLayoutHorzChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnButtonLayoutVertChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1ToolBar.OnShowToolTipsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicBar">
            <summary>
            Represents a collection of links or commands organized into various groups, mimicking the navigation bar seen in Windows XP.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ThemeChanged(System.Object)">
            <summary>
            Called after the theme is changed.
            </summary>
            <param name="theme">The assigned theme object.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.#ctor">
            <summary>
            Initializes a new instance of the C1TopicBar class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.#ctor(System.Windows.Forms.ImageList)">
            <summary>
            Initializes a new instance of the C1TopicBar class
            </summary>
            <param name="imageList"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.#ctor(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.CreateAccessibilityInstance">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.Align">
            <summary>
            Gets or sets the alignment of the topicbar pages caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.Animation">
            <summary>
            Gets or sets the value indicating whether to use animation when collapsing/expanding pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.ImageList">
            <summary>
            Gets or sets the ImageList that contains the images shown on page title bars.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.PagePadding">
            <summary>
            Gets or sets the padding between a page border and a link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.PageOffset">
            <summary>
            Gets or sets the space between pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.Pages">
            <summary>
            Gets the collection of topic bar pages.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.ShowToolTips">
            <summary>
            Gets or sets a value indicating whether tool tip is shown when the mouse is over the page title bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.ShowInvisibleItems">
            <summary>
            Gets or sets the value indicating whether invisible pages and links are shown at design time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.LinkStyle">
            <summary>
            Gets the style of the links on pages.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ShouldSerializeLinkStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1TopicBar.LinkStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1TopicBar.LinkStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ResetLinkStyle">
            <summary>
            Resets the LinkStyle property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.PageStyle">
            <summary>
            Gets the style of the pages.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ShouldSerializePageStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1TopicBar.PageStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1TopicBar.PageStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ResetPageStyle">
            <summary>
            Resets the PageStyle property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1TopicBar.VisualStyle"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1TopicBar.VisualStyle"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ShouldSerializeVisualStyleBase">
            <summary>
            Indicates whether the <see cref = "P:C1.Win.C1Command.C1TopicBar.VisualStyleBase"/> has a default value.
            </summary>
            <returns>True if the <see cref = "P:C1.Win.C1Command.C1TopicBar.VisualStyleBase"/> has no default value; otherwise, it is false.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ResetVisualStyle">
            <summary>
            Restore the <see cref="P:C1.Win.C1Command.C1TopicBar.VisualStyle"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.ShowFocus">
            <summary>
            Gets or sets a value indicating whether pages and links should display focus rectangles.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.HitTest">
            <summary>
            Returns information about the control at at the current mouse position.
            </summary>
            <returns>A <see cref="T:C1.Win.C1Command.C1TopicBarHitTestInfo"/> object that contains information about the point.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns information about the control at a specified point on the control surface.
            </summary>
            <param name="x">The horizontal position of the client coordinate.</param>
            <param name="y">The vertical position of the client coordinate.</param>
            <returns>A <see cref="T:C1.Win.C1Command.C1TopicBarHitTestInfo"/> object that contains information about the point.</returns>
            <remarks>
            This method is useful when handling the <see cref="E:System.Windows.Forms.Control.MouseMove"/>, <see cref="E:System.Windows.Forms.Control.MouseDown"/> events or similar. 
            It allows you to determine whether the mouse is over a specific link, page title, etc.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.HitTest(System.Drawing.Point)">
            <summary>
            Returns information about the control at a specified point on the control surface.
            </summary>
            <param name="p"><see cref="T:System.Drawing.Point"/> in client coordinates.</param>
            <returns>A <see cref="T:C1.Win.C1Command.C1TopicBarHitTestInfo"/> object that contains information about the point.</returns>
            <remarks>
            This method is useful when handling the <see cref="E:System.Windows.Forms.Control.MouseMove"/>, <see cref="E:System.Windows.Forms.Control.MouseDown"/> events or similar. 
            It allows you to determine whether the mouse is over a specific link, page title, etc.
            </remarks>
            <example>
            The code below shows hit test information whenever the user moves the mouse:
            <code>
            Private Sub C1TopicBar1_MouseMove(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles C1TopicBar1.MouseMove
            Dim ht As C1.Win.C1Command.C1TopicBarHitTestInfo = C1TopicBar1.HitTest(e.Location)
            Label1.Text = ht.Type.ToString()
            If (Not IsNothing(ht.Page)) Then
               Label2.Text = ht.Page.Text
            Else
               Label2.Text = ""
            End If
            If (Not IsNothing(ht.Link)) Then
               Label3.Text = ht.Link.Text
            Else
               Label3.Text = ""
            End If
            End Sub        
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.CollapseAll">
            <summary>
            Collapses the all pages
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ExpandAll">
            <summary>
            Expands the all pages
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.FindPage(System.String)">
            <summary>
            Returns the first page with the specified text, or null if such a page does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.FindPageByTag(System.Object)">
            <summary>
            Returns the first page with the specified value, or null if such a page does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.FindLinkByTag(System.Object)">
            <summary>
            Returns the first link with the specified value, or null if such a page does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.FindPageIndex(System.String)">
            <summary>
            Returns index of the first page with the specified text, or -1 if such a page does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.FindLink(System.String)">
            <summary>
            Returns the first link with the specified text, or null if such a link does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.IC1GetAmbientRootSource(System.String)">
            <summary>
            Get active holder of current VisualStyle.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The active <see cref="T:System.ComponentModel.Component"/> holder object of current VisualStyle.</returns>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.LinkClick">
            <summary>
            Occurs when a link on this topic bar is clicked.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.PageExpanded">
            <summary>
            Occurs when a page is expanded.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.PageCollapsed">
            <summary>
            Occurs when a page is collapsed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.LinkStyleChanged">
            <summary>
            Occurs when the LinkStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.PageStyleChanged">
            <summary>
            Occurs when the PageStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.ForeColor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.Font">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.AutoScroll">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.Text">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.AllowDrop">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.UseWaitCursor">
            <inheritdoc cref="P:System.Windows.Forms.Control.UseWaitCursor"/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.CausesValidation">
            <inheritdoc cref="P:System.Windows.Forms.Control.CausesValidation"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.ImeModeChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ImeModeChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.KeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.KeyPress">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyPress"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.KeyUp">
            <inheritdoc cref="E:System.Windows.Forms.Control.KeyUp"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.PreviewKeyDown">
            <inheritdoc cref="E:System.Windows.Forms.Control.PreviewKeyDown"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.MouseCaptureChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MouseCaptureChanged"/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.Margin">
            <inheritdoc cref="P:System.Windows.Forms.Control.Margin"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.TextChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.TextChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.FontChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.FontChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.ForeColorChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.ForeColorChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.MarginChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MarginChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.CausesValidationChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.CausesValidationChanged"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.DragEnter">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragEnter"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.DragLeave">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragLeave"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.DragDrop">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragDrop"/>
        </member>
        <member name="E:C1.Win.C1Command.C1TopicBar.DragOver">
            <inheritdoc cref="E:System.Windows.Forms.Control.DragOver"/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.ShowFocusCues">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.DefaultSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.CreateControlsInstance">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.DefaultPadding">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnPaddingChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnRightToLeftChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnResize(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnBackColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnForeColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnBackgroundImageChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnCursorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnMouseLeave(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnMouseEnter(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnPageExpanded(C1.Win.C1Command.C1TopicBarPageEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1TopicBar.PageExpanded"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.C1TopicBarPageEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnPageCollapsed(C1.Win.C1Command.C1TopicBarPageEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1TopicBar.PageCollapsed"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.C1TopicBarPageEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnLinkClick(C1.Win.C1Command.C1TopicBarClickEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1TopicBar.LinkClick"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Command.C1TopicBarClickEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnFontChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnLinkStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1TopicBar.LinkStyleChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicBar.OnPageStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Command.C1TopicBar.PageStyleChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicBar.VisualStyleBase">
            <summary>
            Gets or sets the base <see cref = "P:C1.Win.C1Command.C1TopicBar.VisualStyle"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.BorderStyleEnum">
            <summary>
            Use members of this enumeration to set the value of the Style property of the C1Border class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.BorderStyleEnum.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.BorderStyleEnum.Flat">
            <summary>
            Flat border at dark color.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.BorderStyleEnum.Groove">
            <summary>
            Grooved border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.BorderStyleEnum.Ridge">
            <summary>
            Ridged border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.BorderStyleEnum.Inset">
            <summary>
            Inset border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.BorderStyleEnum.Outset">
            <summary>
            Outset border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1Border">
            <summary>
            This class allows you to add borders to a C1ToolBar object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1Border.BorderTypeConverter">
            <summary>
            Provides a type converter to convert C1Border objects to and from various other representations.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.BorderTypeConverter.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.BorderTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.BorderTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.#ctor">
            <summary>
            Initializes a new instance of the C1Border class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the C1Border class.
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.Style">
            <summary>
            Gets or sets the border style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.Width">
            <summary>
            Gets or sets the border width in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.LeftEdge">
            <summary>
            Determines whether the border has a left edge.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.TopEdge">
            <summary>
            Determines whether the border has a top edge.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.RightEdge">
            <summary>
            Determines whether the border has a right edge.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.BottomEdge">
            <summary>
            Determines whether the border has a bottom edge.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.LightColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.DarkColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.InnerBounds(System.Drawing.Rectangle)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.FrameIt(System.Boolean)">
            <summary>
            Sets full border around toolbar or removes border.
            </summary>
            <param name="framed">If True, sets all borders, otherwise removes them</param>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.IsFrameOn">
            <summary>
            Checks if border is full and visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.IsFrameOff">
            <summary>
            Checks if border is not visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.OffsetSize(System.Drawing.Size)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="clientsize"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.Reset">
            <summary>
            Reset all private variables to initial values
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.IsEmpty">
            <summary>
            Return true if all private variables have their initial values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Command.C1Border.Owner">
            <summary>
            Get or set a Control with border around it
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.Draw(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1Border._linesLeftTopOuter(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Return Point array with coordinates for border lines
            </summary>
            <param name="r"></param>
            <param name="pendraw"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border._linesLeftTopInner(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Return Point array with coordinates for border lines
            </summary>
            <param name="r"></param>
            <param name="pendraw"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border._linesRightBottomInner(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Return Point array with coordinates for border lines
            </summary>
            <param name="r"></param>
            <param name="pendraw"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border._linesRightBottomOuter(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Return Point array with coordinates for border lines
            </summary>
            <param name="r"></param>
            <param name="pendraw"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.SetPens">
            <summary>
            Recreate pens and brushes
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.CheckWidth">
            <summary>
            Check width of border accordingly with other properties
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Border.OnBorderChanged">
            <summary>
            Perform actions when border properties are changed
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicLink">
            <summary>
            Represents a topic bar link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicLink"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicLink"/> class.
            </summary>
            <param name="text">The text of the link to assign.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLink.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicLink"/> class.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="toolTipText">The tooltip text for the link.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLink.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicLink"/> class.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="toolTipText">The tooltip text for the link.</param>
            <param name="imageIndex">The index of the image in the <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/>.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLink.#ctor(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicLink"/> class.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="toolTipText">The tooltip text for the link.</param>
            <param name="imageIndex">The index of the image in the <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/>.</param>
            <param name="tag">The arbitrary data that can be associated with the link.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.ImageIndex">
            <summary>
            Gets or sets the index of the link image in the ImageList of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.Index">
            <summary>
            Index of this link in the topic page. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.Text">
            <summary>
            Gets or sets the text of the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.ToolTipText">
            <summary>
            Gets or sets the tooltip text for the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.Visible">
            <summary>
            Gets or sets the value indicating whether the link is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.TopicPage">
            <summary>
            Gets the owner topicpage.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.TopicBar">
            <summary>
            Gets the owner topicbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.Tag">
            <summary>
            Gets or sets arbitrary data that can be associated with the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.Enabled">
            <summary>
            Gets or sets the value indicating whether the link is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLink.Pressed">
            <summary>
            Gets or sets the value indicating whether the link was pressed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicLinkCollection">
            <summary>
            Represents a collection of C1TopicLink objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.#ctor(C1.Win.C1Command.C1TopicPage)">
            <summary>
            Initializes a new instance of the C1TopicLinkCollection class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicLinkCollection.Item(System.Int32)">
            <summary>
            Gets or sets the link at the specified index.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.Add(C1.Win.C1Command.C1TopicLink)">
            <summary>
            Adds the specified link to the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.IndexOf(C1.Win.C1Command.C1TopicLink)">
            <summary>
            Searches for the specified link and returns the zero-based index.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.Insert(System.Int32,C1.Win.C1Command.C1TopicLink)">
            <summary>
            Inserts the link into the specified zero-based position.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.Remove(C1.Win.C1Command.C1TopicLink)">
            <summary>
            Removes the first occurrence of a specified link from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.Contains(C1.Win.C1Command.C1TopicLink)">
            <summary>
            Determines whether the collection contains a specified link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.OnInsert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.OnInsertComplete(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.OnClearComplete">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.OnRemoveComplete(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicLinkCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicPage">
            <summary>
            Summary description for CTopicPage.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor">
            <summary>
            Initializes a new instance of the C1TopicPage class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicPage"/> class.
            </summary>
            <param name="text">The caption of the page.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicPage"/> class.
            </summary>
            <param name="text">The caption of the page.</param>
            <param name="toolTipText">The tooltip text for the page.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicPage"/> class.
            </summary>
            <param name="text">The caption of the page.</param>
            <param name="toolTipText">The tooltip text for the page.</param>
            <param name="imageIndex">The index of the image in the <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/>.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor(System.String,System.String,System.Int32,System.Windows.Forms.ImageList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicPage"/> class.
            </summary>
            <param name="text">The caption of the page.</param>
            <param name="toolTipText">The tooltip text for the page.</param>
            <param name="imageIndex">The index of the image in the <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/>.</param>
            <param name="imageList">The ImageList that contains the images shown in page links.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor(System.String,System.String,System.Int32,System.Windows.Forms.ImageList,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicPage"/> class.
            </summary>
            <param name="text">The caption of the page.</param>
            <param name="toolTipText">The tooltip text for the page.</param>
            <param name="imageIndex">The index of the image in the <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/>.</param>
            <param name="imageList">The ImageList that contains the images shown in page links.</param>
            <param name="collapsed">The value indicating whether the page is collapsed or not.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.#ctor(System.String,System.String,System.Int32,System.Windows.Forms.ImageList,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.C1TopicPage"/> class.
            </summary>
            <param name="text">The caption of the page.</param>
            <param name="toolTipText">The tooltip text for the page.</param>
            <param name="imageIndex">The index of the image in the <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/>.</param>
            <param name="imageList">The ImageList that contains the images shown in page links.</param>
            <param name="collapsed">The value indicating whether the page is collapsed or not.</param>
            <param name="value">The arbitrary data that can be associated with the page.</param>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.Index">
            <summary>
            Gets the index of this page in the topic bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.Align">
            <summary>
            Gets or sets the alignment of links on the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.Collapsed">
            <summary>
            Gets or sets the value indicating whether the page is collapsed or not.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.SpecialStyle">
            <summary>
            Gets or sets the value indicating whether the page has a special dark title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.ShowButton">
            <summary>
            Gets or sets the value indicating whether the expand/collapse button is shown on the page title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.ImageList">
            <summary>
            Gets or sets the ImageList that contains the images shown in page links.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.ImageIndex">
            <summary>
            Gets or sets the index of the page title image in the topic bar’s ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.Links">
            <summary>
            Gets the collection of links on the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.Text">
            <summary>
            Gets or sets the caption of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.ToolTipText">
            <summary>
            Gets or sets the tooltip text for the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.PageVisible">
            <summary>
            Gets or sets the value indicating whether the page is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.WrapText">
            <summary>
            Gets or sets the value indicating whether wide link texts wrap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.Tag">
            <summary>
            Gets or sets arbitrary data that can be associated with the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPage.TopicBar">
            <summary>
            Gets the owner topicbar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.FindLink(System.String)">
            <summary>
            Returns the first link with the specified text, or null if such a link does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.FindLinkByTag(System.Object)">
            <summary>
            Returns the first link with the specified value, or null if such a link does not exist.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.Collapse">
            <summary>
            Collapses the page
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.Expand">
            <summary>
            Expands the page
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.OnExpand">
            <summary>
            Calls when <see cref="T:C1.Win.C1Command.C1TopicBar"/> page expanded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPage.OnCollapse">
            <summary>
            Calls when <see cref="T:C1.Win.C1Command.C1TopicBar"/> page collapsed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1TopicPageCollection">
            <summary>
            Represents a collection of C1TopicPage objects.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.#ctor(C1.Win.C1Command.C1TopicBar)">
            <summary>
            Initializes a new instance of the C1TopicPageCollection class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1TopicPageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the page at the specified index.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.Add(C1.Win.C1Command.C1TopicPage)">
            <summary>
            Adds the specified page to the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.IndexOf(C1.Win.C1Command.C1TopicPage)">
            <summary>
            Searches for the specified page and returns the zero-based index.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.Insert(System.Int32,C1.Win.C1Command.C1TopicPage)">
            <summary>
            Inserts the page into the specified zero-based position.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.Remove(C1.Win.C1Command.C1TopicPage)">
            <summary>
            Removes the first occurrence of a specified page from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.Contains(C1.Win.C1Command.C1TopicPage)">
            <summary>
            Determines whether the collection contains a specified page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.OnInsert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.OnInsertComplete(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.OnClearComplete">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.OnRemoveComplete(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.C1TopicPageCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicBarPagesStyle">
            <summary>
            Represents the TopicBar pages style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarPagesStyle.#ctor(C1.Win.C1Command.TopicPageStyle,C1.Win.C1Command.TopicPageStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.TopicBarPagesStyle"/> class.
            </summary>
            <param name="normalPage">The normal <see cref="T:C1.Win.C1Command.TopicPageStyle"/>.</param>
            <param name="specialPage">The topic <see cref="T:C1.Win.C1Command.TopicPageStyle"/>.</param>
        </member>
        <member name="P:C1.Win.C1Command.TopicBarPagesStyle.NormalPage">
            <summary>
            Gets the style of page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicBarPagesStyle.SpecialPage">
            <summary>
            Gets the style of special page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarPagesStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarPagesStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarPagesStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicBarStyle">
            <summary>
            Represents the topic bar style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarStyle.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.TopicBarStyle"/> class.
            </summary>
            <param name="normalFont">Normal font.</param>
            <param name="normalForeColor">Normal ForeColor.</param>
            <param name="mouseOverFont">The mouse over font.</param>
            <param name="mouseOverForeColor">The mouse over ForeColor.</param>
            <param name="disabledFont">The disabled font.</param>
            <param name="disabledForeColor">The disabled font ForeColor.</param>
            <param name="pressedFont">The pressed font.</param>
            <param name="pressedForeColor">The pressed font ForeColor.</param>
        </member>
        <member name="P:C1.Win.C1Command.TopicBarStyle.NormalPage">
            <summary>
            Gets the style of the links on page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicBarStyle.SpecialPage">
            <summary>
            Gets the style of the links on page with special style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicBarStyleConverter">
            <summary>
            Represents the topic bar style converter.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarStyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicBarStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicLinkStatesStyle">
            <summary>
            Represents the topic link states style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStatesStyle.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.TopicLinkStatesStyle"/> class.
            </summary>
            <param name="normalFont">Normal font.</param>
            <param name="normalForeColor">Normal ForeColor.</param>
            <param name="mouseOverFont">The mouse over font.</param>
            <param name="mouseOverForeColor">The mouse over ForeColor.</param>
            <param name="disabledFont">The disabled font.</param>
            <param name="disabledForeColor">The disabled font ForeColor.</param>
            <param name="pressedFont">The pressed font.</param>
            <param name="pressedForeColor">The pressed font ForeColor.</param>
        </member>
        <member name="P:C1.Win.C1Command.TopicLinkStatesStyle.NormalLink">
            <summary>
            Gets the style of the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicLinkStatesStyle.MouseOverLink">
            <summary>
            Gets the style of the link when mouse cursor is over link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicLinkStatesStyle.DisabledLink">
            <summary>
            Gets the style of the disabled link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicLinkStatesStyle.PressedLink">
            <summary>
            Gets the style of the pressed link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStatesStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStatesStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStatesStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicLinkStyle">
            <summary>
            Represents the topic link style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStyle.#ctor(System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.TopicLinkStyle"/> class.
            </summary>
            <param name="font">The font to assign.</param>
            <param name="foreColor">The forecolor to assign.</param>
        </member>
        <member name="P:C1.Win.C1Command.TopicLinkStyle.ForeColor">
            <summary>
            Gets or sets the foreground color of the link.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicLinkStyle.Font">
            <summary>
            Gets or sets the font of the link.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicLinkStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicPageCaptionStyle">
            <summary>
            Represents the topic page caption style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageCaptionStyle.#ctor(System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.TopicPageCaptionStyle"/> class.
            </summary>
            <param name="foreColor">The forecolor.</param>
            <param name="font">The font.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="arrowColor">The arrow color.</param>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageCaptionStyle.ForeColor">
            <summary>
            Gets or sets the foreground color of the page caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageCaptionStyle.Font">
            <summary>
            Gets or sets the font of the page caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageCaptionStyle.BackgroundColor">
            <summary>
            Gets or sets the background color of the page caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageCaptionStyle.ArrowColor">
            <summary>
            Gets or sets the color of the arrow.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageCaptionStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageCaptionStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageCaptionStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.TopicPageStyle">
            <summary>
            Represents the topic page style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageStyle.#ctor(C1.Win.C1Command.TopicPageCaptionStyle,C1.Win.C1Command.TopicPageCaptionStyle,C1.Win.C1Command.TopicPageCaptionStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.TopicPageStyle"/> class.
            </summary>
            <param name="normalTitle">The normal title.</param>
            <param name="mouseOverTitle">The mouse over title.</param>
            <param name="pressedTitle">The pressed title.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="borderColor">The border color.</param>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageStyle.NormalCaption">
            <summary>
            Gets the style of caption page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageStyle.MouseOverCaption">
            <summary>
            Gets the style of caption page when mouse cursor is over caption of page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageStyle.PressedCaption">
            <summary>
            Gets the pressed style of caption page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageStyle.BackgroundColor">
            <summary>
            Gets the background color of page.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.TopicPageStyle.BorderColor">
            <summary>
            Gets the border color of page.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Command.TopicPageStyle.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Command.C1Stack">
            <summary>
            Simple stack with indexed access, based on System.Collections.ArrayList
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Stack.Push(System.Object)">
            <summary>
            Adds an object to the end of the <see cref="T:C1.Win.C1Command.C1Stack"/> ArrayList.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to be added to the end of the <see cref="T:C1.Win.C1Command.C1Stack"/>.</param>
        </member>
        <member name="M:C1.Win.C1Command.C1Stack.Pop">
            <summary>
            Removes the element at the specified index of the <see cref="T:C1.Win.C1Command.C1Stack"/> ArrayList.
            </summary>
            <returns>The number of elements actually contained in the <see cref="T:C1.Win.C1Command.C1Stack"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Command.C1Stack.Peek">
            <summary>
            Gets the last element in <see cref="T:C1.Win.C1Command.C1Stack"/> ArrayList.
            </summary>
            <returns>The last element in <see cref="T:C1.Win.C1Command.C1Stack"/>.</returns>
        </member>
        <member name="P:C1.Win.C1Command.C1Stack.Top">
            <summary>
            The last element in <see cref="T:C1.Win.C1Command.C1Stack"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Stack.Length">
            <summary>
            The number of elements actually contained in <see cref="T:C1.Win.C1Command.C1Stack"/> ArrayList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.C1Stack.IsEmpty">
            <summary>
            Determines whether the <see cref="T:C1.Win.C1Command.C1Stack"/> is empty.
            Returns true if the <see cref="T:C1.Win.C1Command.C1Stack"/> ArrayList is empty, false otherwise.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.C1Stack.IsIndexInBounds(System.Int32)">
            <summary>
            Determines whether the index of an item is in the bound of indexes of the <see cref="T:C1.Win.C1Command.C1Stack"/> ArrayList.
            </summary>
            <param name="idx">Specified index.</param>
            <returns>True if the specified index is in the range from zero to the last index of the <see cref="T:C1.Win.C1Command.C1Stack"/>; otherwise, false.</returns>
        </member>
        <member name="T:C1.Win.C1Command.ButtonLookFlags">
            <summary>
            Use the members of this enumeration to set the values of ButtonLook, ButtonLookHorz, 
            and ButtonLookVert properties of the C1CommandLink class.
            <para>
            The members of this enumeration can be combined using the bitwise OR operation.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLookFlags.Default">
            <summary>
            Use the default value for the toolbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLookFlags.Text">
            <summary>
            Show button text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLookFlags.Image">
            <summary>
            Show button image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLookFlags.TextAndImage">
            <summary>
            Show button text and image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLookFlags.Control">
            <summary>
            Show only child control. C1CommandLink border and background will not drawn.
            </summary>
            <remarks>
            You can also use ( Control | Image | Text ) to show Text or Image without drawing C1CommandLink border and background.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Command.ButtonLayoutEnum">
            <summary>
            Specifies the relative location of text and image on toolbar buttons.
            <para>
            Use members of this enumeration to set the ButtonLayoutHorz and ButtonLayoutVert properties of C1Toolbar.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLayoutEnum.TextOnRight">
            <summary>
            Text is on the right of the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLayoutEnum.TextOnLeft">
            <summary>
            Text is on the left of the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLayoutEnum.TextBelow">
            <summary>
            Text is below the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ButtonLayoutEnum.TextAbove">
            <summary>
            Text is above the image.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CloseBoxPositionEnum">
            <summary>
            Specifies position of close box in locked mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CloseBoxPositionEnum.Default">
            <summary>
            Default position of close box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CloseBoxPositionEnum.ActivePage">
            <summary>
            Close box on the active tab.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CloseBoxPositionEnum.AllPages">
            <summary>
            Close boxes on the all tabs.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CloseTabBehavior">
            <summary>
            Defines behavior on C1DockingTabPage's CloseBox click.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CloseTabBehavior.Close">
            <summary>
            Closes the <see cref="T:C1.Win.C1Command.C1DockingTabPage"/> and removes it from <see cref="T:C1.Win.C1Command.C1DockingTabPages"/> collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CloseTabBehavior.Hide">
            <summary>
            Set the <see cref="P:C1.Win.C1Command.C1DockingTabPage.TabVisible"/> property to false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ItemStateEnum">
            <summary>
            Specifies the current state of a menu or toolbar item.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ItemStateEnum.Normal">
            <summary>
            Normal (default) state.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ItemStateEnum.Hot">
            <summary>
            Mouse is currently over the item.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ItemStateEnum.Pressed">
            <summary>
            Item has been pressed (either by the left mouse button or by the space key).
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ItemStateEnum.Open">
            <summary>
             Item contains a submenu, which is currently open.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ItemStateEnum.Dragged">
            <summary>
             Item is being dragged during customizing or at design-time.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.LargeMenuDisplayEnum">
            <summary>
            Specifies the behavior of a menu when all its items do not fit on the screen.
            <para>
            Use the members of this enumeration to set the value of the LargeMenuDisplay property in the C1CommandMenu class.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LargeMenuDisplayEnum.Wrap">
            <summary>
            When a menu does not fit on the screen, it is wrapped.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.LargeMenuDisplayEnum.Scroll">
            <summary>
            When a menu does not fit on the screen, it is scrolled.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.UIStringsEnum">
            <summary>
            Enumerates customizable user interface strings.
            Elements of this enumeration can be used to index strings in the UIStrings array. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.More">
            <summary>
            Text of the "More..." command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeToolbarOptions">
            <summary>
            Text of the "Toolbar Options" command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeAddRemoveItems">
            <summary>
            Text of the "Add or Remove Buttons" command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeReset">
            <summary>
            Text of the "Reset" command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeCustomize">
            <summary>
            Text of the "Customize..." command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeRenameToolbarDlg">
            <summary>
            Text of the Rename toolbar dialog command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeDuplicateToolbarName">
            <summary>
            Allows to translate/customize the "duplicate toolbar" message in the customizer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.MoreMdiChildren">
            <summary>
            Text of the "More Windows" menu item created by C1CommandMdiList.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeDeleteToolbarFmt">
            <summary>
            'Allows to translate/customize the "confirm toolbar delete" question in the customizer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeStatusSaving">
            <summary>
            Allows to translate/customize the status strings in the customizer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeStatusRestoring">
            <summary>
            Allows to translate/customize the status strings in the customizer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeStatusResetting">
            <summary>
            Allows to translate/customize the status strings in the customizer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.CustomizeStatusDone">
            <summary>
            Allows to translate/customize the status strings in the customizer.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.DockingTabCloseTooltip">
            <summary>
            Tooltip for the close C1DockingTab button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.DockingTabPinTooltip">
            <summary>
            Tooltip for the auto hide C1DockingTab button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.DockingTabScrollNextTooltip">
            <summary>
            Tooltip for the scroll right C1DockingTab button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.DockingTabScrollPrevTooltip">
            <summary>
            Tooltip for the scroll left C1DockingTab button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.DockingTabListTooltip">
            <summary>
            Tooltip for the tab list C1DockngTab button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarShowButtonsMenuText">
            <summary>
            Show item in the NavBar menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarHideButtonsMenuText">
            <summary>
            Hide item in the NavBar menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuText">
            <summary>
            Options item in the NavBar menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuCancelButtonText">
            <summary>
            Cancel button text in the NavBar options menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuLabelText">
            <summary>
            Label text in the NavBar options menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuMoveDownButtonText">
            <summary>
            MoveDown button text in the NavBar options menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuMoveUpButtonText">
            <summary>
            MoveUp button text in the NavBar options menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuOkButtonText">
            <summary>
            Ok button text in the NavBar options menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarOptionsMenuResetButtonText">
            <summary>
            Reset button text in the NavBar options menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarAddRemoveMenuText">
            <summary>
            Add/remove item in the NavBar menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarCustomizeButtonsToolTipText">
            <summary>
            Customize item in the NavBar menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.UIStringsEnum.NavBarCollapsedBarText">
            <summary>
            Collapsed bar text in the NavBar.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.ToolBarStyleEnum">
            <summary>
            Specifies the style of the toolbar.
            <para>
            Use members of this enumeration to set the value of the ToolBarStyle property of a C1ToolBar.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ToolBarStyleEnum.Default">
            <summary>
            Specifies a toolbar in the default state.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.ToolBarStyleEnum.DropDownMenu">
            <summary>
            Specifies drawing toolbar like DropDownMenu.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CustomizeOptionsFlags">
            <summary>
            Specifies which customization options are available at runtime.
            <para>
            Use members of this enumeration to set the value of the CustomizeOptions property of a C1ToolBar.
            </para>
            <para>
            The members of this enumeration can be combined using the bitwise OR operation.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.AllowNone">
            <summary>
            Nothing is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.AllowDelete">
            <summary>
            Toolbars can be deleted.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.AllowAddItem">
            <summary>
            A new C1CommandLink can be added to a toolbar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.AllowRemoveItem">
            <summary>
            Command links in toolbar can be removed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.AllowToggleCustomizeButton">
            <summary>
            Customize button can be enabled or disabled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.HideCustomizeOption">
            <summary>
            Hides Customize menu item from Add and Remove Buttons menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CustomizeOptionsFlags.AllowAll">
            <summary>
            Allow all actions.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.TabTextDirectionEnum">
            <summary>
            Specifies the text direction.
            <para>
            Use members of this enumeration to set the value of the TabTextDirection property of a C1DockingTab.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabTextDirectionEnum.Default">
            <summary>
            The default direction: Horizontal for tabs on the top or bottom, VerticalLeft for tabs on the left, VerticalRight for tabs on the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabTextDirectionEnum.Horizontal">
            <summary>
            Text is drawn horizontally.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabTextDirectionEnum.VerticalLeft">
            <summary>
            Text is drawn vertically, turned 90 degrees counter-clockwise.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabTextDirectionEnum.VerticalRight">
            <summary>
            Text is drawn vertically, turned 90 degrees clockwise.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.TabSizeModeEnum">
            <summary>
            Specifies how tabs of a C1DockingTab are sized.
            <para>
            Use members of this enumeration to set the value of the TabSizeMode property of a C1DockingTab.
            </para>
            </summary>
            <remarks>
            If <see cref="P:C1.Win.C1Command.C1DockingTab.TabSizeMode"/> is set to "Default", it will be overridden with Theme's TabSizeMode on Theme applying.
            If <see cref="P:C1.Win.C1Command.C1DockingTab.TabSizeMode"/> is set to any other value, Theme's TabSizeMode won't be applied.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.TabSizeModeEnum.Default">
             <summary>
             The default sizing mode.
             </summary>
            <remarks>
             If <see cref="P:C1.Win.C1Command.C1DockingTab.TabSizeMode"/> is set to "Default", 
             it will be overridden with Theme's TabSizeMode on Theme applying.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.TabSizeModeEnum.Normal">
            <summary>
            The default sizing mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabSizeModeEnum.Fit">
            <summary>
            All tabs are squeezed to fit into the width of the tab control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabSizeModeEnum.FillToEnd">
            <summary>
            Tabs are stretched to take the whole width of the tab control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabSizeModeEnum.User">
            <summary>
            The user can specify the tab size in the MeasureTab event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.TabStyleEnum">
            <summary>
            Specifies how the tabs of a C1DockingTab control look.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabStyleEnum.Classic">
            <summary>
            Classic look.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabStyleEnum.Sloping">
            <summary>
            Tabs are sloped on one side.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabStyleEnum.Rounded">
            <summary>
            Tabs are rounded.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabStyleEnum.Rectangle">
            <summary>
            Rectangular tabs.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabStyleEnum.Office2007">
            <summary>
            Tabs are drawn using the Office 2007 style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.TabStyleEnum.Office2010">
            <summary>
            Tabs are drawn using the Office 2010 style.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.OutlineModeEnum">
            <summary>
            Specifies how the window outline is drawn when the window is being moved.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.OutlineModeEnum.Transparent">
            <summary>
            Draws the outline with a checkered pattern of black and transparent pixels.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.OutlineModeEnum.Reversible">
            <summary>
            Draws a reversible line with a complimentary color.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.HotFrameEnum">
            <summary>
            Specifies how the hot frame is drawn on a command link with an embedded control.
            <para>
            Use members of this enumeration to set the value of the HotFrame property of a C1CommandControl.
            </para>
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.HotFrameEnum.Full">
            <summary>
            The frame encloses the whole link.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.HotFrameEnum.Control">
            <summary>
            The frame encloses just the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.HotFrameEnum.None">
            <summary>
            Hot frame/selection is not drawn.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.FloatHide">
            <summary>
            Defines behavior of floating windows when the application loses focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.FloatHide.Default">
            <summary>
            Default float hide behavior.
            </summary>
            <remarks>
            Same to <see cref="F:C1.Win.C1Command.FloatHide.Never"/> float hide behavior.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.FloatHide.FocusLost">
            <summary>
            Hides floating docking tabs when the application loses focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.FloatHide.Never">
            <summary>
            Never hides floating docking tabs.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarOutlookButton">
            <summary>
            Enumerates the Outlook-style navigation bar buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.None">
            <summary>
            Unspecified button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Custom">
            <summary>
            Custom button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Mail">
            <summary>
            Mail button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Calendar">
            <summary>
            Calendar button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Contacts">
            <summary>
            Contacts button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Tasks">
            <summary>
            Tasks button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Notes">
            <summary>
            Notes button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Folder">
            <summary>
            Folder button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Shortcut">
            <summary>
            Shortcut button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarOutlookButton.Journal">
            <summary>
            Journal button.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1NavBarCloseButtonEnum">
            <summary>
            Specifies the visibility and function of the navigation bar's close button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarCloseButtonEnum.None">
            <summary>
            The close button is not shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarCloseButtonEnum.CloseCurrentPanel">
            <summary>
            Clicking the close button closes the currently selected panel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1NavBarCloseButtonEnum.CloseWholeBar">
            <summary>
            Clicking the close button closes the whole navigation bar.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.CollapseDirectionEnum">
            <summary>
            Specifies the direction in which the navigation bar is collapsed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CollapseDirectionEnum.Auto">
            <summary>
            The direction in which the bar collapses is determined by the value of the control's Dock property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CollapseDirectionEnum.ToLeft">
            <summary>
            The bar collapses to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CollapseDirectionEnum.ToRight">
            <summary>
            The bar collapses to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CollapseDirectionEnum.ToTop">
            <summary>
            The bar collapses to the top.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.CollapseDirectionEnum.ToBottom">
            <summary>
            The bar collapses to the bottom.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.C1AnimationEnum">
            <summary>
            Specifies how it is determined whether to animate the menus or not.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1AnimationEnum.System">
            <summary>
            Animation is determined by the system-wide setting.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1AnimationEnum.Off">
            <summary>
            Animation is off.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.C1AnimationEnum.On">
            <summary>
            Animation is on.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.VisualStyle">
            <summary>
            Determines the visual style of a control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Custom">
            <summary>
            Custom style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.System">
            <summary>
            Standard system style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Office2010Blue">
            <summary>
            MS Office 2010 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Office2010Black">
            <summary>
            MS Office 2010 Black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Office2010Silver">
            <summary>
            MS Office 2010 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Office2007Blue">
            <summary>
            MS Office 2007 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Office2007Black">
            <summary>
            MS Office 2007 Black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Office2007Silver">
            <summary>
            MS Office 2007 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.VisualStyle.Classic">
            <summary>
            Classic color scheme.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.DockingStyle">
            <summary>
            Specifies docking behavior of C1DockingTab controls.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.DockingStyle.Default">
            <summary>
            Default docking style.
            </summary>
            <remarks>
            If the DockingStyle property is set to Default, 
            docking works without the selectors: when you drag a floating panel over another panel, 
            a gray frame appears to show you the position that the instance of C1DockingTab will 
            have once you release it.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.DockingStyle.VS2005">
            <summary>
            Visual studio 2005 - like docking style.
            </summary>
            <remarks>
            The VS2005 docking style feedback is similar to Visual Studio 2005, using docking zone 
            selectors to specify where the dragged view will be docked if you release it.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.DockingStyle.VS2008">
            <summary>
            Visual studio 2008 - like docking style.
            </summary>
            <remarks>
            The VS2008 docking style feedback is similar to Visual Studio 2008, using docking zone 
            selectors to specify where the dragged view will be docked if you release it.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.DockingStyle.VS2010">
            <summary>
            Visual studio 2010 - like docking style.
            </summary>
            <remarks>
            The VS2010 docking style feedback is similar to Visual Studio 2010, using docking zone 
            selectors to specify where the dragged view will be docked if you release it.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Command.DockingStyle.VS2012">
            <summary>
            Visual studio 2012 - like docking style.
            </summary>
            <remarks>
            The VS2012 docking style feedback is similar to Visual Studio 2012, using docking zone 
            selectors to specify where the dragged view will be docked if you release it.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Command.MenuMerge">
            <summary>
            Specifies the behavior of a menu item when it is merged with items in another menu.
            Note: it`s MS "System.Windows.Forms.MenuItem.MenuMerge" enumeration analogue for .NET5 compatibility.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MenuMerge.Add">
            <summary>
            The MenuItem is added to the collection of existing menu item objects in a merged menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MenuMerge.Replace">
            <summary>
            The menu item replaces an existing menu item at the same position in a merged menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MenuMerge.MergeItems">
            <summary>
            All submenu items of this menu item are merged with those of existing menu item objects at the same position in a merged menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Command.MenuMerge.Remove">
            <summary>
            The menu item is not included in a merged menu.
            </summary>
        </member>
        <member name="T:C1.Win.C1Command.Pair">
            <summary>
            Represents the <see cref="T:C1.Win.C1Command.C1CommandMdiList"/> data.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Pair.First">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1CommandMdiList"/> first object.
            </summary>
        </member>
        <member name="P:C1.Win.C1Command.Pair.Second">
            <summary>
            The <see cref="T:C1.Win.C1Command.C1CommandMdiList"/> second object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Pair.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.Pair"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Command.Pair.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Command.Pair"/> class.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
        </member>
        <member name="T:C1.Util.Design.Floaties.IFloatieOwnerExt">
            <summary>
            Additional stuff required (so far - Aug 2006) for C1Command only.
            </summary>
        </member>
        <member name="P:C1.Util.Design.Floaties.IFloatieOwnerExt.LogicalParent">
            <summary>
            Gets the control that is to be used instead of the real parent
            when checking that the parent is in focus etc.
            Used for popup menus.
            </summary>
        </member>
        <member name="P:C1.Util.Design.Floaties.IFloatieOwnerExt.DesignedComponent">
            <summary>
            Gets the designer component if it is distinct from what
            is returned by Control property.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.FloatieBase.FloatieConstructed">
            <summary>
            This method MUST be called by the inheritor's ctor before exiting!
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.FloatieBase.CanShow">
            <summary>
            Returns false if the floatie should not be shown for reasons such as:
            - the designer is hidden;
            - ???
            Returning true does not mean that the floatie must show, only that it can.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Util.Design.Floaties.Util.InActiveApplication">
            <summary>
            Gets the value indicating whether the caller process owns
            the current foreground window.
            </summary>
        </member>
        <member name="T:C1.Util.Design.Floaties.FloatiesStrings">
            <summary>
            Contains localizable design-time strings.
            </summary>
        </member>
        <member name="F:C1.Util.Design.Floaties.MainFloatie.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.MainFloatie.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Design.Floaties.MainFloatie.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Util.Design.Floaties.PopupFloatie.AutoPopupDelay">
            <summary>
            Gets or sets the timespan between the moment the floatie is ready to be shown
            and the moment it is actually shown.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie.#ctor(C1.Util.Design.Floaties.IFloatieOwner,System.Type)">
            <summary>
            ctor for inherited classes
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie._updateRegion">
            <summary>
            Updates the region to include just the toolbar and the help label.
            This helps avoid flickering due to whole form resizing when help string changes.
            </summary>
        </member>
        <member name="F:C1.Util.Design.Floaties.PopupFloatie.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Design.Floaties.PopupFloatie.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Design.UITypeEditorControl">
            <summary>
            UITypeEditorControl
            </summary>
        </member>
        <member name="T:C1.Util.Design.ColorPicker">
            <summary>
            ColorPicker
            Uses the Color UITypeEditor to show a form where users can pick colors
            </summary>
        </member>
        <member name="T:C1.Util.Design.FileNamePicker">
            <summary>
            FileNamePicker
            Uses the FileName UITypeEditor to show a form where users can pick filenames
            </summary>
        </member>
        <member name="T:C1.Util.Design.ImagePicker">
            <summary>
            ImagePicker
            Uses the Image UITypeEditor to show a form where users can pick images
            </summary>
        </member>
        <member name="T:C1.Util.Design.FontPicker">
            <summary>
            FontPicker
            Uses the Font UITypeEditor to show a form where users can pick fonts
            </summary>
        </member>
        <member name="T:C1.Util.Design.DockPicker">
            <summary>
            DockPicker
            Uses the Dock UITypeEditor to show a form where users can pick Dock settings
            </summary>
        </member>
        <member name="T:C1.Util.Design.AnchorPicker">
            <summary>
            AnchorPicker
            Uses the Anchor UITypeEditor to show a form where users can Anchor settings
            </summary>
        </member>
        <member name="T:C1.Util.Design.ExternalEditorWrapper">
            <summary>
            ExternalEditorWrapper
            Wraps an external UITypeEditor.
            </summary>
        </member>
        <member name="T:C1.Util.Design.CollectionEditorControl">
            <summary>
            FontPicker
            Uses the Font UITypeEditor to show a form where users can pick fonts
            </summary>
        </member>
        <member name="T:C1.Util.Design.FlagsEnumPicker">
            <summary>
            FontPicker
            Uses the Font UITypeEditor to show a form where users can pick fonts
            </summary>
        </member>
        <member name="T:C1.Util.FlagsEnumEditorControl.EnumValueDesc">
            <summary>
            Represents the one value in the enumeration.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.Owner">
            <summary>
            Gets the EnumValueDescCollection collection containing this object.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.EnumType">
            <summary>
            Gets the enumeration's type.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.BitCount">
            <summary>
            Gets the count of significant bits in EnumValue.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.EnumValue">
            <summary>
            Gets the enumeration's value.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.Value">
            <summary>
            Gets the enumeration's value as long unsigned integer.
            </summary>
        </member>
        <member name="T:C1.Util.FlagsEnumEditorControl.EnumValueDescCollection">
            <summary>
            Collection of the EnumValueDesc objects.
            </summary>
        </member>
        <member name="T:C1.Util.FlagsEnumEditor">
            <summary>
            Represents the editor of enum properties with FlagsAttribute attribute.
            </summary>
        </member>
        <member name="M:C1.Util.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.Util.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            The override for <see cref="T:C1.Util.FlagsEnumEditor"/> returns <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/>.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditor.IsDropDownResizable">
            <summary>
            Gets a value indicating whether drop-down editors should be resizable by the user. 
            The override for <see cref="T:C1.Util.FlagsEnumEditor"/> returns true;
            </summary>
        </member>
        <member name="M:C1.Util.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style 
            indicated by the <see cref="M:C1.Util.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"/> method. 
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:C1.Util.Win.AmbientComponentPropertyMonitor._pName">
            <summary>
            The target property name.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientComponentPropertyMonitor._internalChange">
            <summary>
            Prevents raising the _propertySetByUser while we adjust the
            property ourselves.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientComponentPropertyMonitor._propertySetByUser">
            <summary>
            If true, we consider the property to have a value explicitly set
            ty the user, so we do not update it anymore until reset.
            </summary>
        </member>
        <member name="M:C1.Util.Win.AmbientComponentPropertyMonitor.#ctor(System.ComponentModel.Component,System.String)">
            <summary>
            Initializes a new instance of the AmbientPropertyMonitor class.
            </summary>
            <param name="host">Control on which the ambient property will be monitored.</param>
            <param name="propertyName">The name of the monitored property.
            The type of the property MUST be an enumeration.</param>
            <remarks>
            An instance of this class must be created in the constructor 
            of the host control.
            It is assumed that the value of the ambient property that will be monitored
            by the AmbientPropertyMonitor has not been set yet (i.e. has the default value)
            at the time the AmbientPropertyMonitor is constructed.
            </remarks>
        </member>
        <member name="M:C1.Util.Win.AmbientComponentPropertyMonitor.Dispose">
            <summary>
            Clears the all references.
            </summary>
            <remarks>
            Call Dispose() in the Dispose method 
            of the host control.
            
            An instance of the AmbientComponentPropertyMonitor class holds references to the 
            host in private variables and event handles.
            Host holds reference to the instance of the AmbientComponentPropertyMonitor.
            
            If not to clear the refs then the host control and the all referenced objects (Form, etc.) may be never released to GC.
            This cause a memory leak.
            </remarks>
            <example>
            public class C1CommandMenu...
            {
             public C1CommandMenu()
             {
               ...
               _ambientVisualStyleMonitor = new AmbientComponentPropertyMonitor(this, "VisualStyle");
             }
            
             protected override void Dispose(bool disposing)
             {
              if (disposing)
              {
                // To prevent the memory leak
                if (_ambientVisualStyleMonitor != null)
                {
                    _ambientVisualStyleMonitor.Dispose();
                    _ambientVisualStyleMonitor = null;
                }
                ...
                base.Dispose(disposing);
              }
            ...
            }
            </example>
        </member>
        <member name="M:C1.Util.Win.AmbientComponentPropertyMonitor.ResetValue">
            <summary>
            Notifies the AmbientPropertyMonitor that the value of the monitored property
            has been reset. If the host control is currently parented to a container
            which itself defines the monitored property, the value from that parent
            is assigned to the property on the host.
            </summary>
            <remarks>
            It is recommended that the host defines a Reset method for the target
            property, and calls this method from that. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected void ResetVisualStyle() {
                ...
                __ambientVisualStyleMonitor.ResetValue();
            }
            </code>
            </remarks>
        </member>
        <member name="P:C1.Util.Win.AmbientComponentPropertyMonitor.IsValueAmbient">
            <summary>
            Gets the value indicating whether the monitored property
            currently has the ambient value, i.e. the value has been set
            (by the AmbientPropertyMonitor) based on the value of a parent of the host.
            </summary>
            <remarks>
            It is recommended that the host defines a ShouldSerialize method for the target
            property, tests IsValueAmbient in that method, and returns false if IsValueAmbient
            returns true. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected bool ShouldSerializeVisualStyle() {
                if (__ambientVisualStyleMonitor.IsValueAmbient)
                    return false;
                ...
            }
            </code>
            </remarks>
        </member>
        <member name="T:C1.Util.Win.AmbientPropertyMonitor">
            <summary>
            A helper class for implementing an ambient property on a control.
            </summary>
            <remarks>
            Usage:
            An instance of AmbientPropertyMonitor must be created by the host control with the reference
            to that host as the parameter.
            The AmbientPropertyMonitor subscribes to the following events:
            <list type="bullet">
            <item>ParentChanged on the host and the whole parents' chain;
            </item>
            <item>(ambient property name)Changed or INotifyPropertyChanged on the host and all parents in the chain.
            NOTE: For the AmbientPropertyMonitor to work correctly, all controls that have the target property declared
            must also provide either a property changed event, or implement INotifyPropertyChanged and fire
            it at appropriate moments.
            </item>
            </list>
            <para>The AmbientPropertyMonitor monitors changes of the ambient property value on the host and all parents,
            and if a change occurs applies the value of the ambient property on the closest parent
            to that property on the host control, unless it has been changed independently of the AmbientPropertyMonitor
            (AmbientPropertyMonitor assumes that when it is created, the ambient property on the host has default,
            unchanged value).
            </para>
            <para>It is recommended that all controls declaring the target property also provide
            the Reset(property) and ShouldSerialize(property) methods, calling the
            <see cref="M:C1.Util.Win.AmbientPropertyMonitor.ResetValue"/> and <see cref="P:C1.Util.Win.AmbientPropertyMonitor.IsValueAmbient"/> methods as needed.
            </para>
            </remarks>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._pName">
            <summary>
            The target property name.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._parentChain">
            <summary>
            At all times, should contain the up-to-date parent chain,
            starting with the host itself. Needed to keep track of
            parent changes, and changes of ambient property on the parents.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._internalChange">
            <summary>
            Prevents raising the _propertySetByUser while we adjust the
            property ourselves.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._propertySetByUser">
            <summary>
            If true, we consider the property to have a value explicitly set
            ty the user, so we do not update it anymore until reset.
            </summary>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            Initializes a new instance of the AmbientPropertyMonitor class.
            </summary>
            <param name="host">Control on which the ambient property will be monitored.</param>
            <param name="propertyName">The name of the monitored property.
            The type of the property MUST be an enumeration.</param>
            <remarks>
            An instance of this class must be created in the constructor 
            of the host control.
            It is assumed that the value of the ambient property that will be monitored
            by the AmbientPropertyMonitor has not been set yet (i.e. has the default value)
            at the time the AmbientPropertyMonitor is constructed.
            </remarks>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.Dispose">
            <summary>
            Clears the all references.
            </summary>
            <remarks>
            Call Dispose() in the Dispose method 
            of the host control.
            
            An instance of the AmbientPropertyMonitor class holds references to the 
            host in private variables and event handles.
            Host holds reference to the instance of the AmbientPropertyMonitor.
            
            If not to clear the refs then the host control and the all referenced objects (Form, etc.) may be never released to GC.
            This cause a memory leak.
            </remarks>
            <example>
            public class C1OutBar...
            {
             public C1OutBar()
             {
               ...
               _ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
             }
            
             protected override void Dispose(bool disposing)
             {
              if (disposing)
              {
                // To prevent the memory leak
                if (_ambientVisualStyleMonitor != null)
                {
                    _ambientVisualStyleMonitor.Dispose();
                    _ambientVisualStyleMonitor = null;
                }
                ...
                base.Dispose(disposing);
              }
            ...
            }
            </example>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.ResetValue">
            <summary>
            Notifies the AmbientPropertyMonitor that the value of the monitored property
            has been reset. If the host control is currently parented to a container
            which itself defines the monitored property, the value from that parent
            is assigned to the property on the host.
            </summary>
            <remarks>
            It is recommended that the host defines a Reset method for the target
            property, and calls this method from that. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected void ResetVisualStyle() {
                ...
                __ambientVisualStyleMonitor.ResetValue();
            }
            </code>
            </remarks>
        </member>
        <member name="P:C1.Util.Win.AmbientPropertyMonitor.IsValueAmbient">
            <summary>
            Gets the value indicating whether the monitored property
            currently has the ambient value, i.e. the value has been set
            (by the AmbientPropertyMonitor) based on the value of a parent of the host.
            </summary>
            <remarks>
            It is recommended that the host defines a ShouldSerialize method for the target
            property, tests IsValueAmbient in that method, and returns false if IsValueAmbient
            returns true. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected bool ShouldSerializeVisualStyle() {
                if (__ambientVisualStyleMonitor.IsValueAmbient)
                    return false;
                ...
            }
            </code>
            </remarks>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AllowedCallerAttribute">
            <summary>
            Attribute used to specify assemblies that can use this product without a license.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Design.ColorPickerUITypeEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Design.ColorPickerUITypeEditor.FormType">
            <summary>
            Gets or sets the type of the form used as the color picker.
            The form must expose the public property Color Color {get;set;}.
            </summary>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Design.ColorPickerUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Design.UITypeEditorStrings">
            <summary>
            Static class containing UI strings used by the designer.
            </summary>
        </member>
    </members>
</doc>
