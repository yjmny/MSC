<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Input.4.8</name>
    </assembly>
    <members>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://www.grapecity.com/pricing/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoHowToActivate">
            <summary>
              Goto web site http://www.grapecity.com/componentone/docs/license/online-license/overview.html.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoLicenseRenewal">
            <summary>
              Goto web site https://www.grapecity.com/sales/componentone-faq/.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.WinFormLicenseProvider`1">
            <summary>
              Represents a license provider of a Windows Forms PowerTools component.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Core.IFELanguage">
            <summary>
              Define interface for IFELanguage com object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper">
            <summary>
              Represents the IFELanguageWrapper class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper.IID_IFELANGUAGE">
            <summary>
              Indicates the GUID string forthe IFELanguage.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper.#cctor">
            <summary>
              Initializes the <see cref="T:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper.Application_ApplicationExit(System.Object,System.EventArgs)">
            <summary>
              Handles the ApplicationExit event of the Application control.
            </summary>
            <param name="sender">
              An <b>object</b> indicates the event sender.
            </param>
            <param name="e">
              The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper.CreateIFELan(System.String)">
            <summary>
              Creates the IFE lan.
            </summary>
            <param name="imeMode">
              A <b>string</b> value indicates the ime mode.
            </param>
            <returns>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Core.IFELanguage"/> object indicate the IFELanguage com object created.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper.GetConversionModeCaps(System.String)">
            <summary>
              Gets the conversion mode caps.
            </summary>
            <param name="imeMode">
              The IME mode.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Core.IFELanguageWrapper.GetConversionList(System.String,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.FELANG_REQUEST,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.FELANG_CMODE,System.String)">
            <summary>
              Gets the conversion list.
            </summary>
            <param name="imeMode">
              The IME mode.
            </param>
            <param name="request">
              The request.
            </param>
            <param name="mode">
              The mode.
            </param>
            <param name="strInput">
              The STR input.
            </param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Core.CodeAccessAuthorization">
            <summary>
              This class define the internal code access authorization for GrapeCity product.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Core.CodeAccessAuthorization.IsAuthorizationAssembly(System.Reflection.Assembly)">
            <summary>
              Validate whether the calling assembly is an authorization assembly.
            </summary>
            <remarks>
              If the calling assembly has same PublicKeyToken with this main assembly, we think
              this assembly is a authorization by now.
              So the snk file is very important If hacker get the snk file, then he can forge an
              authorization assembly. I think the pfx file is more secure.
            <seealso cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/>
            <seealso cref="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute"/>
            </remarks>
            <param name="callingAssembly">
              The calling assembly. eg,
              <code >"System.Reflection.Assembly.GetCallingAssembly()"</code>.
            </param>
            <returns>
              Return a <b>bool</b> value. <b>true</b> is an authorization assembly; otherwise,<b>false</b>.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ConvertMode">
            <summary>
              Determines how to handle the IME candidate window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ConvertMode.NoCandidate">
            <summary>
              Clears the composition string and set the status to no composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ConvertMode.ShowCandidate">
            <summary>
              Converts the composition string and show the candidate window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ConvertMode.FirstInCandidate">
            <summary>
              Converts the composition string and pick the first in the candidate window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeIsConvertingCallBack">
            <summary>
              This delegate enables asynchronous calls for getting ime is converting status.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.WindowHost">
            <summary>
              Represents a simple wrapper of window handle.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeWindowWrapper">
            <summary>
              Defines a virtual windows to help the operation of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme"/>.
            </summary>
            <remarks>
              This class only send message to the IMessageProcessor.PerProcess methods.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeWindowWrapper._owner">
            <summary>
              Indicates the owner GcIme component.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeWindowWrapper.#ctor(C1.Win.C1Input.GrapeCity.Editors.GcIme)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeWindowWrapper"/> class.
            </summary>
            <param name="owner">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme"/> component which is the owner of the wrapper.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeWindowWrapper.GetHookHandle">
            <summary>
              Gets the hook handle from the FactWindow.
            </summary>
            <returns>
              Returns the hook handle.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeWindowWrapper.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Dispatch the message to the processsor.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
            <returns>
              Return a <see langword="bool"/> indicate whether this message should be blocked.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion">
            <summary>
              Defines a class used to convert ImeMode to ImeConversionMode or convert ImeConversionMode to ImeMode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.JapaneseTable">
            <summary>
              Defines a Japanese conversion table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.KoreanTable">
            <summary>
              Defines a Korean conversion table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.ChineseTable">
            <summary>
              Defines a Chinese conversion table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.UnsupportedTable">
            <summary>
              Defines a empty conversion table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.InputLanguageTable">
            <summary>
              Gets the conversion table by current input language.
            </summary>
            <value>
              The conversion table based on the language.
            </value>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion._imeModeConversionBits">
            <summary>
              Saves the conversion bits.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.ImeModeConversionBits">
            <summary>
              Gets the conversion bigs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode,C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.SetBits">
            <summary>
              Defines the bits needed to be set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ImeModeConversion.ClearBits">
            <summary>
              Defines the bits needed to be cleared.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData">
            <summary>
              Save the data of the extended properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.Default">
            <summary>
              Defines the default value of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.SentenceMode">
            <summary>
              Save the data of the extended <see cref="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.SentenceMode"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.AutoShowSoftKeyboard">
            <summary>
              Save the data of the extended <see cref="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.AutoShowSoftKeyboard"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.ReadingStringOutput">
            <summary>
              Save the data of the extended <see cref="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.ReadingStringOutput"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.CausesImeEvent">
            <summary>
              Save the data of the extended <see cref="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.CausesImeEvent"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.KanaMode">
            <summary>
            Save the data of the extended <see cref="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.KanaMode"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.InputScope">
            <summary>
              Save the data of the extended <see cref="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.InputScope"/> property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.Equals(System.Object)">
            <summary>
              Overridden, check whether the given object equals this instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.op_Equality(C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData,C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData)">
            <summary>
              Declares the "==" operator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.op_Inequality(C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData,C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData)">
            <summary>
              Declares the "!=" operator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ExtendedPropertiesData.GetHashCode">
            <summary>
              Gets the hash code of this object.
            </summary>
            <returns>
              An <b>int</b> indicates the hash code of the ime.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.#ctor">
            <summary>
              Initialize an instance of <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.#ctor(System.Object,System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.GcIme"/> class.
            </summary>
            <param name="dummy1">
              The dummy1. Please set it to null.
            </param>
            <param name="dummy2">
              The dummy2. Please set it to null.
            </param>
            <remarks>
             These two parameters is used to differentiate the internl constructor from the pulic one.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.InitializeComponent">
            <summary>
              Initialize component.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._data">
            <summary>
              Save all the data of extended properites of controls.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._furiganaServices">
            <summary>
              Save furigana service - associated control references.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._virtualWindow">
            <summary>
              Save the virtual window used to access with the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._cachedImeSentenceMode">
            <summary>
              Saves the cached the ime sentence mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._imeDevice">
            <summary>
              Saves the ime device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._resultStringEventArgs">
            <summary>
              Caches the result string event args for firing <see cref="E:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResultString"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.WM_USER_RESULTSTR">
            <summary>
              The WM_USER constant is used by applications to help define private messages for use 
              by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.DEFAULT_ALPHABETMAPPING">
            <summary>
              The default alphabet to reading string mappings.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme._customAlphabetMapping">
            <summary>
              The user-set alphabet to reading string mappings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.GcIme.IsActive">
            <summary>
              Gets a value indicates whether IME is available for the current keyboard layout.
            </summary>
            <value>
              <see langword="true"/> if the IME is available; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.HasImeSupport(System.IntPtr)">
            <summary>
              Checks whether there's any IME associated to the specified window.
            </summary>
            <param name="handle">
              A <see cref="T:System.IntPtr"/> value indicating the window handle.
            </param>
            <returns>
              <see langword="true"/> if the window has an IME context associated with it; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.GcIme.IsConverting">
            <summary>
              Gets a value indicating whether ime is converting in current Application.
            </summary>
            <value>
              <see langword="true"/> if ime is converting in current Application; otherwise, <see langword="false"/>.
            </value>
            <remarks>
              This property is used for retrieve the state of IME converting status.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeIsConverting">
            <summary>
              Gets the IME is converting on the focused window.
            </summary>
            <returns>
              A <see langword="bool"/> value, <see langword="true"/> if ime is converting, otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeIsConverting(System.Windows.Forms.IWin32Window)">
            <summary>
              Gets whether ime is converting in given form.
            </summary>
            <param name="window">
              A  object specify the target form for checking the ime converting state.
            </param>
            <returns>
              A <see langword="bool"/> value, <see langword="true"/> if ime is converting, otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
            <summary>
              Specifies whether this object can provide its extender properties to the specified object.
            </summary>
            <param name="extendee">
              The <b>object</b> to receive the extender properties. 
            </param>
            <returns>
              <see langword="true"/> if this object can provide extender properties to the specified object; 
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeSentenceMode(System.Windows.Forms.Control)">
            <summary>
              Retrieves the IME sentence mode associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the IME sentence mode is associated on it.
            </param>
            <returns>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode"/> indicates the IME sentence mode.
            </returns>
            <remarks>
              With the <b>GetImeSentenceMode</b> method, 
              you can retrieve the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode"/> for any control. 
              To change the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetImeSentenceMode(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetImeSentenceMode(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode)">
            <summary>
              Associates the IME sentence mode with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the IME sentence mode is associated on it.
            </param>
            <param name="sentenceMode">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode"/> indicates the IME sentence mode.
            </param>
            <remarks>
              You can also use this method to specifying the Ime sentence mode for a control. 
              To get the information about Ime sentence mode, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeSentenceMode(System.Windows.Forms.Control)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <b>value</b> isn't a valid <see cref="T:GrapeCity.Win.Editors.ImeSentenceMode"/> item.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ShouldSerializeImeSentenceMode(System.Windows.Forms.Control)">
            <summary>
              Indicates whether the value of extended property ImeSentenceMode should be serialized.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
            <returns>
              If the ImeSentenceMode property should be serialized, return ture, otherwise return false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResetImeSentenceMode(System.Windows.Forms.Control)">
            <summary>
              Reset the value of extended property ImeSentenceMode associated to special control to default.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetAutoShowSoftKeyboard(System.Windows.Forms.Control)">
            <summary>
              Retrieves the <b>AutoShowSoftKayboard</b> associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <b>AutoShowSoftKayboard</b> is associated on it.
            </param>
            <returns>
              A <see langword="bool"/> indicates whether open soft keyboard when control get focus or lose.
            </returns>
            <remarks>
              With the <b>GetAutoShowSoftKeyboard</b> method, you can retrieve the setting about show soft keyboard automatically or not for any control. 
              To change the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetAutoShowSoftKeyboard(System.Windows.Forms.Control,System.Boolean)"/> method.
              <br/>
              This method is obsoleted in this version.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetAutoShowSoftKeyboard(System.Windows.Forms.Control,System.Boolean)">
            <summary>
              Associates the <b>AutoShowSoftKayboard</b> with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <b>AutoShowSoftKayboard</b> is to be associated on it.
            </param>
            <param name="autoShowSoftKeyboard">
              A <see langword="bool"/> indicates whether open soft keyboard when control get focus or lose. 
            </param>
            <remarks>
              You can also use this method to specifying whether to show the soft keyboard automatically or not for a control. 
              To get the information about showing the soft keyboard automatically, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetAutoShowSoftKeyboard(System.Windows.Forms.Control)"/> method.
              <br/>
              This method is obsoleted in this version.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetReadingStringOutput(System.Windows.Forms.Control)">
            <summary>
              Retrieves the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> is associated on it.
            </param>
            <returns>
              A <see langword="ReadingStringOutput"/> value indicates what is the output manner of the reading string.
            </returns>
            <remarks>
              With the <b>GetReadingStringOutput</b> method, you can retrieve the value of <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> for any control. To change the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetReadingStringOutput(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetReadingStringOutput(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)">
            <summary>
              Associates the <b>ReadingStringOutPut</b> with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> is to be associated on it.
            </param>
            <param name="readingStringOutput">
              A <see langword="ReadingStringOutput"/> value indicates what is the output manner of the reading string. 
            </param>
            <remarks>
              You can also use this method to specifying the reading string output for a control. 
              To get the information about the reading string output, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetReadingStringOutput(System.Windows.Forms.Control)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <b>control</b> isn't valid.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ShouldSerializeReadingStringOutput(System.Windows.Forms.Control)">
            <summary>
              Indicates whether the value of extended property ReadingStringOutput should be serialized.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
            <returns>
              If the ReadingStringOutput property should be serialized, return ture, otherwise return false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResetReadingStringOutput(System.Windows.Forms.Control)">
            <summary>
              Reset the value of extended property ReadingStringOutput associated to special control to default.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetCausesImeEvent(System.Windows.Forms.Control)">
            <summary>
              Retrieves the <b>CausesImeEvent</b> associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <b>CausesImeEvent</b> is associated on it.
            </param>
            <returns>
              A <see langword="bool"/> indicates whether the control cause the ime event.
            </returns>
            <remarks>
              With the <b>GetCausesImeEvent</b> method, you can retrieve the setting about enable to raise the <see cref="E:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResultString"/> event or not for any control. 
              To change the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetCausesImeEvent(System.Windows.Forms.Control,System.Boolean)"/> method.
              The result string event will never occurs if this property is not set to <see langword="true"/> on the control that handling IME input.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetCausesImeEvent(System.Windows.Forms.Control,System.Boolean)">
            <summary>
              Associates the <b>CausesImeEvent</b> with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, <b>CausesImeEvent</b> is to be associated on it.
            </param>
            <param name="causesImeEvent">
              A <see langword="bool"/> indicates whether the control cause the ime event. 
            </param>
            <remarks>
              You can also use this method to specifying whether to causes the Ime event or not for a control. 
              To get the information about whether to cause the Ime events, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetCausesImeEvent(System.Windows.Forms.Control)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetConversionList(System.String)">
            <summary>
              Gets candidate list from a specified reading string.
            </summary>
            <param name="readingString">
              A <b>string</b> which represents the reading string.
            </param>
            <returns>
              A string array which represents the candidate list. 
              Returns string[0] if readingString is <see langword="null"/> or <see cref="F:System.String.Empty"/>.
            </returns>
            <remarks>
              User can retrieve a <see cref="T:System.String"/> array from the candidate list by using this method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
            <seealso cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetReverseConversionList(System.String)"/>      
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetReverseConversionList(System.String)">
            <summary>
              Get reading strings from a specified result string.
            </summary>
            <param name="resultString">
              A <b>string</b> which represents the result string.
            </param>
            <returns>
              A string array which represents the reading strings.
              Returns string[0] if resultString is <see langword="null"/> or <see cref="F:System.String.Empty"/>
            </returns>
            <remarks>
              User can retrieve a <see cref="T:System.String"/> array from the candidate list by using this method.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetConversionList(System.String)"/>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Convert(System.String,C1.Win.C1Input.GrapeCity.Editors.ConvertMode)">
            <summary>
              Converts the specified string and determines how the candidate
              window should appear.
            </summary>
            <param name="convertString">
              A <see cref="T:System.String"/> value to be convert.
            </param>
            <param name="mode">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ConvertMode"/> enumeration that represents how
              to process the candidate window.
            </param>
            <remarks>
              User can use this method to convert a string by a <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ConvertMode"/>.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Convert(System.Windows.Forms.Control,System.String,C1.Win.C1Input.GrapeCity.Editors.ConvertMode)"/>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Convert(System.Windows.Forms.Control,System.String,C1.Win.C1Input.GrapeCity.Editors.ConvertMode)">
            <summary>
              Converts the specified string and determines how the candidate
              window should appear.
            </summary>
            <param name="target">
              A <see cref="T:System.Windows.Forms.Control"/> the convert based on it.
            </param>
            <param name="convertString">
              A <see cref="T:System.String"/> value to be convert.
            </param>
            <param name="mode">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ConvertMode"/> enumeration that represents how
              to process the candidate window.
            </param>
            <remarks>
              User can use this method to convert a string by a <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ConvertMode"/> for on a specified control.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Convert(System.String,C1.Win.C1Input.GrapeCity.Editors.ConvertMode)"/>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetKanaMode(System.Windows.Forms.Control)">
            <summary>
              Retrieves the kana mode setting associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <see cref="T:GrapeCity.Win.Editors.KataMode"/> is associated on it.
            </param>
            <returns>
              A <see cref="T:GrapeCity.Win.Editors.KataMode" /> value indicates the format of reading string output will convert to.
            </returns>
            <remarks>
              With the <b>GetKanaMode</b> method, you can retrieve the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.KanaMode"/> for any control. To change the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetKanaMode(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.KanaMode)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetKanaMode(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.KanaMode)">
            <summary>
              Associates the kana mode setting associated to the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <see cref="T:GrapeCity.Win.Editors.KataMode"/> is associated on it.
            </param>
            <param name="value">
              A <see cref="T:GrapeCity.Win.Editors.KataMode" /> value indicates the format of reading string output will convert to.
            </param>
            <remarks>
              You can also use this method to specifying the kana mode for a control. 
              To get the information about the kana mode, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetKanaMode(System.Windows.Forms.Control)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <b>control</b> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <b>value</b> isn't a valid <see cref="T:GrapeCity.Win.Editors.KataMode"/> item.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Dispose(System.Boolean)">
            <summary>
              Dispose the unmanged and manged resource.
            </summary>
            <param name="disposing">
              A <see langword="bool"/> indicates whther the dispoing action is not caused by finalizer.
            </param>
            <remarks>
              Call <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Dispose(System.Boolean)"/> when you are finished using the <see cref="T:System.ComponentModel.Component"/>. 
              The <b>Dispose</b> method leaves the <see cref="T:System.ComponentModel.Component"/> in an unusable state. 
              After calling <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Dispose(System.Boolean)"/>, you must release all references to the <see cref="T:System.ComponentModel.Component"/> 
              so the garbage collector can reclaim the memory that the <see cref="T:System.ComponentModel.Component"/> was occupying.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.UpdateImeSentenceMode(System.Windows.Forms.Control,System.Boolean)">
            <summary>
              Updates the IME sentence mode when control has focus and change the ImeSentenceMode of it or its parent.
            </summary>
            <param name="focusedControl">
              The focused control.
            </param>
            <param name="cacheImeSentenceMode">
              A <see langword="bool"/> value, if set to <see langword="true"/> we will cache the IME sentence mode before set new one, otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.InternalGetImeSentenceMode(System.Windows.Forms.Control)">
            <summary>
              Retrieves the IME sentence mode associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the IME sentence mode is associated on it.
            </param>
            <returns>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode"/> indicates the IME sentence mode.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Add(System.Windows.Forms.Control)">
            <summary>
              Addes a control into the data.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.AttachEvent(System.Windows.Forms.Control)">
            <summary>
              Attaches events for a specified control and its child controls.
            </summary>
            <param name="control">
              The specified <see cref="T:System.Windows.Forms.Control"/>.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.Remove(System.Windows.Forms.Control)">
            <summary>
              Removes a control from the data.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.DetachEvent(System.Windows.Forms.Control)">
            <summary>
              Detaches events for a specified control and its child controls.
            </summary>
            <param name="control">
              The specified <see cref="T:System.Windows.Forms.Control"/>.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.OnAssociatedControlGotFocus(System.Object,System.EventArgs)">
            <summary>
              Processes the GotFocus message of the associated control.
            </summary>
            <param name="sender">
              An <b>object</b> indicate the control that send the event.
            </param>
            <param name="e">
              An <see cref="T:System.EventArgs"/> indicates the message.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.OnAssociatedControlLostFocus(System.Object,System.EventArgs)">
            <summary>
              Processes the LostFocus message of the associated control.
            </summary>
            <param name="sender">
              An <b>object</b> indicate the control that send the event.
            </param>
            <param name="e">
              An <see cref="T:System.EventArgs"/> indicates the message.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.OnImeDeviceCompositionWindowCompositionChanged(System.Object,C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs)">
            <summary>
              Processes the CompositionChanged event of the ime.
            </summary>
            <param name="sender">
              An <b>object</b> indicate the control that send the event.
            </param>
            <param name="e">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs"/> indicates the arguments of the event.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.OnImeDeviceStatusWindowOpening(System.Object,System.EventArgs)">
            <summary>
              Recieves the Opening of the status window.
            </summary>
            <param name="sender">
              An <b>object</b> indicates the sender of the event.
            </param>
            <param name="e">
              An <see cref="T:System.EventArgs"/> indicates the arguments of the event.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.OnImeDeviceStatusWindowClosing(System.Object,System.EventArgs)">
            <summary>
              Receives the Closing of the status window.
            </summary>
            <param name="sender">
              An <b>object</b> indicates the sender of the event.
            </param>
            <param name="e">
              An <see cref="T:System.EventArgs"/> indicates the arguments of the event.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.BeginControlSentenceMode">
            <summary>
              Start up the controling of sentence mode of ime device.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.EndControlSentenceMode">
            <summary>
              Finish the controling of sentence mod of the ime device.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.BeginControlSoftKeyoard">
            <summary>
              Start up the controling of soft keyoard.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.EndControlSoftKeyoard">
            <summary>
              Finish the controling of the softKeyoard.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.TargetControl_Disposed(System.Object,System.EventArgs)">
            <summary>
              Handles the Disposed event of the TargetControl control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetImeSentenceModeToImeDevice(C1.Win.C1Input.GrapeCity.Framework.Input.Ime,C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode)">
            <summary>
              Set the special sentence mode to ime device.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <param name="sentenceMode">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode"/> indicates the sentence mode.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeSentenceModeFromImeDevice(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Get the sentence mode from the ime device.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <returns>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode"/> indicates the sentence mode.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetImeModeFromImeDevice(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Gets the IME mode from the ime device..
            </summary>
            <param name="device">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <returns>
              The ImeMode status.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetImeModeToImeDevice(C1.Win.C1Input.GrapeCity.Framework.Input.Ime,System.Windows.Forms.ImeMode)">
            <summary>
              Sets the ime mode to the ime device.
            </summary>
            <param name="device">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <param name="imeMode">
              A <see cref="T:System.Windows.Forms.ImeMode"/> indicates the ime mode.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ConvertString(System.String,C1.Win.C1Input.GrapeCity.Editors.KanaMode)">
            <summary>
            Converts the string based on the required KanaMode.
            </summary>
            <param name="text">The text need to convert,  .</param>
            <param name="kanaMode">The kana mode to which is want to convert.</param>
            <returns></returns>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.SBCS_SPACE">
            <summary>
              An const <b>char</b> value indicates the SBCS space character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.GcIme.DBCS_SPACE">
            <summary>
              An const <b>char</b> value indicates the DBCS space character.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResultString">
            <summary>
              Occurs when there is a result string available during the input process by IME.
            </summary>
            <remarks>
              This event is raised when there is a result string during IME input in any input controls on the form.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.OnResultString(C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResultString"/> event.
            </summary>
            <param name="e">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs"/> that contains the 
              event data. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetInputScope(System.Windows.Forms.Control)">
            <summary>
              Retrieves the input scope setting associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <see cref="T:GrapeCity.Win.Editors.InputScopeNameValue"/> is associated on it.
            </param>
            <returns>
              One of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue"/> enumeration value, indicates the input scope of the associated control.
            </returns>
            <remarks>
              With the <b>GetInputScope</b> method, you can retrieve the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue"/> for any control. To change the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetInputScope(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              The <b>control</b> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.SetInputScope(System.Windows.Forms.Control,C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue)">
            <summary>
              Associates the input scope setting associated with the specified control.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/>, the <see cref="T:GrapeCity.Win.Editors.InputScopeNameValue"/> is associated on it.
            </param>
            <param name="value">
              One of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue"/> enumeration value, indicates the input scope of the associated control.
            </param>
            <remarks>
              With the <b>SetInputScope</b> method, you can change the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue"/> for any control. To retrieve the setting, use the <see cref="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.GetInputScope(System.Windows.Forms.Control)"/> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              The <b>control</b> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              The <b>value</b> isn't a valid <see cref="T:GrapeCity.Win.Editors.KataMode"/> item.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.GcIme.ResetInputScope(System.Windows.Forms.Control)">
            <summary>
              Resets the value of extended property ImeSentenceMode associated with the specified control to default.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the associated control.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode">
            <summary>
              Determines how the IME should handle sentences.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.Inherit">
            <summary>
              Inherit the IME sentence mode of the parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.NoControl">
            <summary>
              Do not control the IME sentence mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.Normal">
            <summary>
              Use phrase information to predict the next character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.BiasForNames">
            <summary>
              The IME uses plural clause information to carry out conversion processing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.BiasForSpeech">
            <summary>
              The IME uses conversation mode. This is useful for chat applications.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ImeSentenceMode.Direct">
            <summary>
              No information for sentence.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput">
            <summary>
              A class is used to control the output behavior of the reading string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.None">
            <summary>
              Gets a empty output.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput._outputTarget">
            <summary>
              Saves the data of the <see cref="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.TargetControl"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput._outputMode">
            <summary>
              Saves the data of the <see cref="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.OutputMode"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput._enableAlphabetReadingMapping">
            <summary>
              Saves the data of the <see cref="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.EnableAlphabetReadingMapping"/> property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.#ctor(System.Object,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> class.
            </summary>
            <param name="outputTarget">
              A <see cref="T:System.Object"/> indicates the target object.
            </param>
            <param name="outputMode">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode"/> controls the output behaviors.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.#ctor(System.Object,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> class.
            </summary>
            <param name="outputTarget">
              A <see cref="T:System.Object"/> indicates the target object.
            </param>
            <param name="outputMode">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode"/> controls the output behaviors.
            </param>
            <param name="enableAlphabetReadingMapping">
              A <see langword="bool"/> value, indatates whether alphabet character should be converted to reading.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.TargetControl">
            <summary>
              Gets or sets a control used to receive the output.
            </summary>
            <value>
              A <see cref="T:System.Windows.Forms.Control"/> indicates the target control.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.Target">
            <summary>
              Gets or sets an object used to receieve the output string.
            </summary>
            <value>
              An object indicates the output target.
            </value>
            <remarks>
              To make sure the string could be receieved, the output target object should either have a public property named 'Text' or 'Value'.
              In addition, a string typed property is valid.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.OutputMode">
            <summary>
              Gets or sets the output mode.
            </summary>
            <value>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode"/> controls the output behaviors.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.EnableAlphabetReadingMapping">
            <summary>
              Gets or sets whether or not enable converting alphabets to its reading.
            </summary>
            <value>
              A <b>bool</b> value, <see langword="true"/> indicates the alphabets will convert to its reading, 
              according to the default mapping table or user defined mapping rules; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.Equals(System.Object)">
            <summary>
              Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
              <see langword="true"/> if <b>obj</b> and this instance are the same type and represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.op_Equality(C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)">
            <summary>
              Declares the "==" operator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.op_Inequality(C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput,C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput)">
            <summary>
              Declares the "!=" operator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput.GetHashCode">
            <summary>
              Gets the hash code of this object.
            </summary>
            <returns>
              An <see cref="T:System.Int32"/> indicates the hash code of the ime.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter">
            <summary>
              Defines the type converter for the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutput"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
              Returns whether this converter can convert an object to the given 
              destination type using the context.
            </summary>
            <param name="context">
              An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. 
            </param>
            <param name="destType">
              A <see cref="T:System.Type"/> that represents the type to which you want to convert.
            </param>
            <returns>
              <see langword="true"/> if this converter can perform the conversion; otherwise, 
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
              Converts the given value object to the specified destination type 
              using the specified context and arguments.
            </summary>
            <param name="context">
              An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. 
            </param>
            <param name="culture">
              A <see cref="T:System.Globalization.CultureInfo"/> that provides the language to convert to. 
            </param>
            <param name="value">
              The <see cref="T:System.Object"/> to convert.
            </param>
            <param name="destinationType">
              The <see cref="T:System.Type"/> to which to convert the value.
            </param>
            <returns>
              An Object that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              The <b>destinationType</b> is a null reference (<b>Nothing</b> in 
              Visual Basic).
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether changing a value on this object requires a call to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
              to create a new value, using the specified context.
            </summary>
            <param name="context">
              An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            </param>
            <returns>
              true if changing a property on this object requires a call to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
              to create a new value; otherwise, false.  
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
              Creates an instance of the type that this System.ComponentModel.TypeConverter
              is associated with, using the specified context, given a set of property
              values for the object.
            </summary>
            <param name="context">
              An System.Collections.IDictionary of new property values.
            </param>
            <param name="propertyValues">
              An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            </param>
            <returns>
              An System.Object representing the given System.Collections.IDictionary, or
              null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
              Returns a collection of properties for the type of array specified by the 
              value parameter, using the specified context and attributes.
            </summary>
            <param name="context">
              An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. 
            </param>
            <param name="value">
              An <see cref="T:System.Object"/> that specifies the type of array for which to get 
              properties. 
            </param>
            <param name="attributes">
              An array of type <see cref="T:System.Attribute"/> that is used as a filter. 
            </param>
            <returns>
              A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that 
              are exposed for this data type, or a null reference if there are no 
              properties.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">
              An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. 
            </param>
            <returns>
              <see langword="true"/> if <see cref="M:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])"/> should be called to find the 
              properties of this object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode">
            <summary>
              Indicates the output mode of the reading string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode.Append">
            <summary>
              Adds the new text at the end of the old text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode.Replace">
            <summary>
              Replaces all text of the target control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ReadingStringOutputMode.Intelligence">
            <summary>
              Maintain the reading string output automatically.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs">
            <summary>
              Provides the <see cref="T:System.EventArgs"/> data for the <b>ResultString</b> event.
            </summary>
            <remarks>
              The <b>ResultString</b> takes place when there has been changes
              made in the IME conversion window.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs._readString">
            <summary>
              Indicates the reading string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs._sourceControl">
            <summary>
              Indicates the source control that creates the reading string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs.SourceControl">
            <summary>
              Gets the control that creates the reading string.
            </summary>
            <value>
              A <see cref="T:System.Windows.Forms.Control"/> indicates the source control.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs.ReadString">
            <summary>
              Gets the reading string.
            </summary>
            <value>
              A <see cref="T:System.String"/> value indicating the reading string.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.ResultStringEventArgs"/> 
              class with the specified reading string.
            </summary>
            <param name="sourceControl">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the source control that creates the reading string.
            </param>
            <param name="readString">
              A <b>string</b> indicates the specified reading string.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.AlphabetReadingMapEntry">
            <summary>
              Stores the alpha-reading string mapping data.
            </summary>
            
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.AlphabetReadingMapEntry.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.AlphabetReadingMapEntry"/> struct.
            </summary>
            <param name="alphabet">The alphabet.</param>
            <param name="reading">The reading.</param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.AlphabetReadingMapEntry.Alphabet">
            <summary>
            Gets the alphabet.
            </summary>
            <value>The alphabet.</value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.AlphabetReadingMapEntry.Reading">
            <summary>
            Gets the reading.
            </summary>
            <value>The reading.</value>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue">
            <summary>
              Specifies the input scope name which modifies how input from alternative input methods is interpreted.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.AlphanumericFullWidth">
            <summary>
              The text input pattern for alphanumeric full-width characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.AlphanumericHalfWidth">
            <summary>
              The text input pattern for alphanumeric half-width characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.Default">
            <summary>
              The default handling of input commands.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.EmailSmtpAddress">
            <summary>
              The text input pattern for a Simple Mail Transfer Protocol (SMTP) email address.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.Hanja">
            <summary>
              The text input pattern for Hanja characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.HanjaFullWidth">
            <summary>
              The text input pattern for Hangul full-width characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.HanjaHalfWidth">
            <summary>
              The text input pattern for Hangul half-width characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.Hiragana">
            <summary>
              The text input pattern for the Hiragana writing system.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.KatakanaFullWidth">
            <summary>
              The text input pattern for full-width Katakana characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.KatakanaHalfWidth">
            <summary>
              The text input pattern for half-width Katakana characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.Number">
            <summary>
              The text input pattern for a number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.NumberFullWidth">
            <summary>
              The text input pattern for a full-width number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.Search">
            <summary>
              The text input patternf or a search query.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.TelephoneNumber">
            <summary>
              The text input pattern for a telephone number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputScopeNameValue.Url">
            <summary>
              The text input pattern for a Uniform Resource Locator (URL).
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1">
            <summary>
              Represents a <b>CollectionBase</b> class, which is a base class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.#ctor(C1.Win.C1Input.GrapeCity.Editors.CollectionBase{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:CollectionEx&lt;T&gt;"></see> class 
              containing the elements of the specified source collection.
            </summary>
            <param name="value">
              A <see cref="T:CollectionEx&lt;T&gt;"></see> with which to initialize the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:CollectionEx&lt;T&gt;"></see> class
              containing the specified array of <typeparamref name="T"/> objects.
            </summary>
            <param name="value">
              An array of <typeparamref name="T"/> objects with which to initialize the collection. 
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Item(System.Int32)">
            <summary>
              Gets or sets the <typeparamref name="T"/> at the specified index in the collection.
            </summary>
            <returns>
              A <typeparamref name="T"/> at each valid index.
            </returns>
            <param name="index">
              The zero-based index of the collection to access. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The index parameter is outside the valid range of indexes for the collection. 
            </exception>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.IsLocked">
            <summary>
              Gets a value indicating whether this instance is locked.
            </summary>
            <value>
            	<b>true</b> if this instance is locked; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.CollectionChanging">
            <summary>
              A <see cref="T:System.ComponentModel.CollectionChangeEventHandler"/> object that indicates the handler of the CollectionChanging event.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.CollectionChanged">
            <summary>
              A <see cref="T:System.ComponentModel.CollectionChangeEventHandler"/> object that indicates the handler of the CollectionChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Add(`0)">
            <summary>
              Adds the specified <typeparamref name="T"/> to the collection.
            </summary>
            <returns>
              The index at which the new element was inserted.
            </returns>
            <param name="value">
              The <typeparamref name="T"/> to add. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.AddRange(`0[])">
            <summary>
              Copies the elements of the specified array to the end of the collection.
            </summary>
            <param name="value">
              An array of type <typeparamref name="T"/> containing the objects to add to the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
              Adds the contents of another <see cref="T:IList&lt;T&gt;"></see> to the end of the collection.
            </summary>
            <param name="value">
              A <see cref="T:IList&lt;T&gt;"></see> containing the objects to add to the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.AddRange(C1.Win.C1Input.GrapeCity.Editors.CollectionBase{`0})">
            <summary>
              Adds the contents of another <see cref="T:CollectionEx&lt;T&gt;"></see> to the end of the collection.
            </summary>
            <param name="value">
              A <see cref="T:CollectionEx&lt;T&gt;"></see> containing the objects to add to the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Contains(`0)">
            <summary>
              Gets a value that indicates whether the collection contains the specified <typeparamref name="T"/>.
            </summary>
            <returns>
              true if the collection contains the specified object; otherwise, false.
            </returns>
            <param name="value">
              The <typeparamref name="T"/> to search for in the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the collection objects to a one-dimensional <see cref="T:System.Array"></see> instance beginning at the specified index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"></see> that is the destination of the values copied from the collection. 
            </param>
            <param name="index">
              The index of the array at which to begin inserting. 
            </param>
            <exception cref="T:System.ArgumentNullException">
              The array parameter is null. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The index parameter is less than the target array's minimum index. 
            </exception>
            <exception cref="T:System.ArgumentException">
              The destination array is multidimensional.-or- The number of elements in the <see cref="T:Collection&lt;T&gt;"></see> is greater than
              the available space between the index of the target array specified by the index parameter and the end of the target array.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.IndexOf(`0)">
            <summary>
              Gets the index in the collection of the specified <typeparamref name="T"/>, if it exists in the collection.
            </summary>
            <returns>
              The index in the collection of the specified object, if found; otherwise, -1.
            </returns>
            <param name="value">
              The <typeparamref name="T"/> to locate in the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
              Inserts the specified <typeparamref name="T"/> into the collection at the specified index.
            </summary>
            <param name="value">
              The <typeparamref name="T"/> to insert. 
            </param>
            <param name="index">
              The zero-based index where the specified object should be inserted. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Remove(`0)">
            <summary>
              Removes the specified <typeparamref name="T"/> from the collection.
            </summary>
            <param name="value">
              The <typeparamref name="T"/> to remove from the collection. 
            </param>
            <exception cref="T:System.ArgumentException">
              The specified object is not found in the collection. 
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.InnerAddRange(System.Object[])">
            <summary>
              Copies the elements of the specified array to the end of the collection.
            </summary>
            <param name="value">
              An array of type <see cref="T:object"></see> that contains the objects to add to the collection. 
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnAddRange(System.Object[])">
            <summary>
              Performs additional custom processes before inserting a new element array into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="value">
              The new value of the element array.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnAddRangeComplete(System.Object[])">
            <summary>
              Performs additional custom processes after inserting a new element array into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="value">
              The new value of the element.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnInsert(System.Int32,System.Object)">
            <summary>
              Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">
              The zero-based index at which to insert the value.
            </param>
            <param name="value">
              The new value of the element at the index.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnRemove(System.Int32,System.Object)">
            <summary>
              Performs additional custom processes when removing an element from the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">
              The zero-based index at which the value can be found.
            </param>
            <param name="value">
              The value of the element to remove from the index.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
              Performs additional custom processes before setting a value in the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">
              The zero-based index at which oldValue can be found.
            </param>
            <param name="oldValue">
              The value to replace with newValue.
            </param>
            <param name="newValue">
              The new value of the element at the index.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnClear">
            <summary>
              Performs additional custom processes when clearing the contents of the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnInsertComplete(System.Int32,System.Object)">
            <summary>
              Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">
              The zero-based index at which to insert the value.
            </param>
            <param name="value">
              The new value of the element at the index.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
              Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">
              The zero-based index at which the value can be found.
            </param>
            <param name="value">
              The value of the element to remove from the index.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
              Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">
              The zero-based index at which oldValue can be found.
            </param>
            <param name="oldValue">
              The value to replace with newValue.
            </param>
            <param name="newValue">
              The new value of the element at the index.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnClearComplete">
            <summary>
              Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.CollectionChanging"/> event.
            </summary>
            <param name="e">
              The <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> instance that contains the event data.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.CollectionChanged"/> event.
            </summary>
            <param name="e">
              The <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> instance that contains the event data.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.OnValidate(System.Object)">
            <summary>
              Performs additional custom processes when validating a value.
            </summary>
            <param name="value">
              The object to validate.
            </param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:InvalidOperationException">The collection is locked.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Lock">
            <summary>
              Locks this instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Unlock">
            <summary>
              Unlocks this instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.DefaultPredicate``1(``0)">
            <summary>
              Represents a default predicate.
            </summary>
            <returns>
              A <b>bool</b> value.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Exists``1">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.List`1"></see> contains elements that
              match the conditions defined by the specified predicate.
            </summary>
            <returns>
              true if the <see cref="T:System.Collections.Generic.List`1"></see> contains one or more elements that
              match the conditions defined by the specified predicate; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Exists``1(System.Predicate{``0})">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.List`1"></see> contains elements that
              match the conditions defined by the specified predicate.
            </summary>
            <returns>
              true if the <see cref="T:System.Collections.Generic.List`1"></see> contains one or more elements that
              match the conditions defined by the specified predicate; otherwise, false.
            </returns>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the elements to search for.
            </param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Find``1">
            <summary>
              Searches for a <typeparamref name="T"/> that matches the specified type TTarget,
              and returns the first occurrence within the entire collection.
            </summary>
            <returns>
              The first <typeparamref name="T"/> that matches the conditions defined by the specified predicate, if found;
              otherwise, the default value for type TTarget.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.Find``1(System.Predicate{``0})">
            <summary>
              Searches for a <typeparamref name="T"/> that matches the specified type TTarget and matches the conditions defined by the specified predicate,
              and returns the first occurrence within the entire collection.
            </summary>
            <returns>
              The first <typeparamref name="T"/> that matches the conditions defined by the specified predicate, if found;
              otherwise, the default value for type TTarget.</returns>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the <typeparamref name="T"/> to search for.
            </param>
            <exception cref="T:System.ArgumentNullException">
              match is null.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindAll``1">
            <summary>
              Retrieves all the <typeparamref name="T"/> that match the specified type TTarget.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1"></see> that contains all the <typeparamref name="T"/> that
              match the specified type TTarget and match the conditions defined by the specified predicate, if found;
              otherwise, an empty <see cref="T:System.Collections.Generic.List`1"></see>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindAll``1(System.Predicate{``0})">
            <summary>
              Retrieves all the <typeparamref name="T"/> that match the specified type TTarget and match the conditions defined by the specified predicate.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1"></see> that contains all the <typeparamref name="T"/> that
              match the specified type TTarget and match the conditions defined by the specified predicate, if found;
              otherwise, an empty <see cref="T:System.Collections.Generic.List`1"></see>.
            </returns>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the <typeparamref name="T"/> to search for.
            </param>
            <exception cref="T:System.ArgumentNullException">
              match is null.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindLast``1">
            <summary>
              Searches for an <typeparamref name="T"/> that matches the specified type TTarget and  matches the conditions defined by the specified predicate, 
              and returns the last occurrence within the entire collection.
            </summary>
            <returns>
              The last <typeparamref name="T"/> that matches the conditions defined by the specified predicate, if found; 
              otherwise, the default value for type TTarget.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindLast``1(System.Predicate{``0})">
            <summary>
              Searches for an <typeparamref name="T"/> that matches the specified type TTarget and  matches the conditions defined by the specified predicate, 
              and returns the last occurrence within the entire collection.
            </summary>
            <returns>
              The last <typeparamref name="T"/> that matches the conditions defined by the specified predicate, if found; 
              otherwise, the default value for type TTarget.
            </returns>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the <typeparamref name="T"/> to search for.
            </param>
            <exception cref="T:System.ArgumentNullException">
              match is null.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindIndex``1">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based
              index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindIndex``1(System.Predicate{``0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, false.
            </returns>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.
            </param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindIndex``1(System.Int32,System.Predicate{``0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1"></see> that extends from the specified index to the last element.
            </summary>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, false.
            </returns>
            <param name="startIndex">
              The zero-based starting index of the search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              startIndex is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1"></see>.
            </exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindIndex``1(System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1"></see> that starts at the specified index and contains the specified number of elements.
            </summary>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, false.
            </returns>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <param name="startIndex">
              The zero-based starting index of the search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindLastIndex``1">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns 
              the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by match,
              if found; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindLastIndex``1(System.Predicate{``0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by match,
              if found; otherwise, false.
            </returns>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.
            </param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindLastIndex``1(System.Int32,System.Predicate{``0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate,
              and returns the zero-based index of the last occurrence within the range of elements in
              the <see cref="T:System.Collections.Generic.List`1"></see> that extends from the first 
              element to the specified index.
            </summary>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions 
              defined by match, if found; otherwise, false.
            </returns>
            <param name="startIndex">
              The zero-based starting index of the backward search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              startIndex is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1"></see>.
            </exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.CollectionBase`1.FindLastIndex``1(System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate,
              and returns the zero-based index of the last occurrence within the range of elements in the 
              <see cref="T:System.Collections.Generic.List`1"></see> that contains the specified number of
              elements and ends at the specified index.</summary>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions
              defined by match, if found; otherwise, false.
            </returns>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <param name="startIndex">
              The zero-based starting index of the backward search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the element to search for.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment">
            <summary>
                Specifies how to position and align the attached element 
                to the core element.
            </summary>
            <remarks>
                This is used when alignment and positioning needs to take
                place between 2 elements, such as an image and a text.
                Usually, the text will become the core element 
                with the image being the attached element in this case.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.Left">
            <summary>
              The attached element is at the left of the core element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.LeftTop">
            <summary>
              The attached element is at the left of the core element in horizontal, 
              and two element's top edges have same vertial coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.LeftMiddle">
            <summary>
              The attached element is at the left of the core element in horizontal, 
              and two element's center points have same vertial coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.LeftBottom">
            <summary>
              The attached element is at the left of the core element in horizontal, 
              and two element's bottom edges have same vertial coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.Top">
            <summary>
              The attached element is at the top of the core element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.TopLeft">
            <summary>
              The attached element is at the top of the core element in vertical, 
              and two element's left edges have same horizontal coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.TopCenter">
            <summary>
              The attached element is at the top of the core element in vertical, 
              and two element's center points have same horizontal coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.TopRight">
            <summary>
              The attached element is at the top of the core element in vertical, 
              and two element's right edges have same horizontal coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.Right">
            <summary>
              The attached element is at the right of the core element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.RightTop">
            <summary>
              The attached element is at the right of the core element in horizontal, 
              and two element's top edges have same vertial coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.RightMiddle">
            <summary>
              The attached element is at the right of the core element in horizontal, 
              and two element's center points have same vertial coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.RightBottom">
            <summary>
              The attached element is at the right of the core element in horizontal, 
              and two element's bottom edges have same vertial coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.Bottom">
            <summary>
              The attached element is at the bottom of the core element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.BottomLeft">
            <summary>
              The attached element is at the bottom of the core element in vertical, 
              and two element's left edges have same horizontal coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.BottomCenter">
            <summary>
              The attached element is at the bottom of the core element in vertical, 
              and two element's center points have same horizontal coordinate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AttachAlignment.BottomRight">
            <summary>
              The attached element is at the bottom of the core element in vertical, 
              and two element's right edges have same horizontal coordinate.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.AllowSpace">
            <summary>
              Defines what kind of space is allowed in the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSpace.None">
            <summary>
             No space character is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSpace.Narrow">
            <summary>
             Only SBCS space character is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSpace.Wide">
            <summary>
              Only DBCS space char character allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSpace.Both">
            <summary>
              Both DBCS and SBCS space characters are allowed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Hour12Mode">
            <summary>
              Specifies the type of 12-hour mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Hour12Mode.Hour12As0">
            <summary>
              12-hour mode ranges from 00:00:00 to 11:59:59.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Hour12Mode.Hour0As12">
            <summary>
              12-hour mode ranges from 01:00:00 to 12:59:59.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.YearDigitType">
            <summary>
              Represents the different year digit type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.YearDigitType.FourDigitYear">
            <summary>
              The <b>FourDigitYear</b> mode ranges from 0000 - 9999.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.YearDigitType.TwoDigitYear">
            <summary>
              The <b>TwoDigitYear</b> mode ranges from 00 - 99.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ValidateMode">
            <summary>
              Specifies the validate type of input.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValidateMode.ValidateNone">
            <summary>
              No validate mode, fields behavior independent.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValidateMode.Validate">
            <summary>
              Normal validate mode, fields behavior independent checking.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ValidateModeEx">
            <summary>
              Specifies the input validation type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValidateModeEx.ValidateNone">
            <summary>
              Specifies no validate mode, field behavior is independent.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValidateModeEx.Validate">
            <summary>
              Specifies normal validate mode, field behavior uses independent checking.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValidateModeEx.ValidateEx">
            <summary>
              Specifies extended validate mode, adjusts when needed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.NumberSpinMode">
            <summary>
              Defines the number spin mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NumberSpinMode.Field">
            <summary>
              Spins by the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NumberSpinMode.Value">
            <summary>
              Spins by the specified field value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NumberSpinMode.Digits">
            <summary>
              Spins by digits.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DateSpinMode">
            <summary>
              Defines the date spin increment mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DateSpinMode.Field">
            <summary>
              Specifies to spin using the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DateSpinMode.Value">
            <summary>
              Specifies to spin using the value of the specified field.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ClipContent">
            <summary>
              Specifies how the literal in the content is handled in the clipboard.
            </summary>
            <remarks>
              Inserting or replacing text includes or excludes literals.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ClipContent.IncludeLiterals">
            <summary>
              Specifies that literals are included.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ClipContent.ExcludeLiterals">
            <summary>
              Specifies that literals are excluded.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.WrapMode">
            <summary>
              Represents how to wrap the line when it is beyond the width of the view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WrapMode.NoWrap">
            <summary>
              Does not wrap.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WrapMode.WordWrap">
            <summary>
              Wraps the text by words.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WrapMode.CharWrap">
            <summary>
              Wraps the text by characters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.EditMode">
            <summary>
              Specifes the edit mode.
            </summary>
            <remarks>
              Use the members of this enumeration to control the INSERT or REPLACE mode of the editor.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EditMode.Insert">
            <summary>
              Indicates the <b>Insert</b> mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EditMode.Overwrite">
            <summary>
              Indicates the <b>Overwrite</b> mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EditMode.FixedInsert">
            <summary>
              Indicates the fixed <b>Insert</b> mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EditMode.FixedOverwrite">
            <summary>
              Indicates the fixed <b>Overwrite</b> mode.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.HighlightText">
            <summary>
              Highlights the type of text selection in the control.
            </summary>
            <remarks>
              After getting focus, none, specified fields, or all text in the editor is highlighted.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.HighlightText.None">
            <summary>Specifies no highlight.</summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.HighlightText.Field">
            <summary>Highlights the specified field.</summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.HighlightText.All">
            <summary>Highlights all the text.</summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ShowLiterals">
            <summary>
              Specifies how the literals are displayed during user input.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ShowLiterals.Always">
            <summary>Always show the literals.</summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ShowLiterals.PostDisplay">
            <summary>The literals are post displayed as the user types.</summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ShowLiterals.PreDisplay">
            <summary>The literals are displayed before the user types.</summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.KeyGroups">
            <summary>
              Specifies the key groups.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.NumKeys">
            <summary>
              Reresents the number input keys.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.MemoryKeys">
            <summary>
              Represents the memory operation keys.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.MathKeys">
            <summary>
              Represents the math operation keys.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.ResetKeys">
            <summary>
              Represnts the reset keys.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.EditKeys">
            <summary>
              Represents the keys for editing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.Output">
            <summary>
              Represents the key for output.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyGroups.Indicator">
            <summary>
              Represents the indicator keys.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.TabAction">
            <summary>
              Specifies how the tab key works.
            </summary>
            <remarks>
              The Tab key moves focus among controls or fields.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TabAction.Control">
            <summary>
              Used to move focus between controls.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TabAction.Field">
            <summary>
              Used to move the cursor position between fields in the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.EraPattern">
            <summary>
              Defines what kind of pattern is displayed in the DateEraField.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EraPattern.EraName">
            <summary>
              Displays a full era name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EraPattern.AbbreviatedEraName">
            <summary>
              Displays an abbreviated era name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EraPattern.Symbol">
            <summary>
              Displays a symbol.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.MonthPattern">
            <summary>
              Defines what kind of pattern is displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MonthPattern.MonthName">
            <summary>
              Displays a full month name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MonthPattern.AbbreviatedMonthName">
            <summary>
              Displays an abbreviated month name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MonthPattern.Number">
            <summary>
              Displays a number.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.AmPmPattern">
            <summary>
              Defines what kind of pattern is displayed in the DateAmPmField.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AmPmPattern.AmPmDesignator">
            <summary>
              Displays a full AMDesignator or PMDesignator.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AmPmPattern.AbbreviatedAmPmDesignator">
            <summary>
              Displays an abbreviated AMDesignator or PMDesignator.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.WeekdayPattern">
            <summary>
              Defines what kind of pattern is displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekdayPattern.WeekdayName">
            <summary>
              Displays a full weekday name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekdayPattern.AbbreviatedWeekdayName">
            <summary>
              Displays an abbreviated weekday name.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ValueSignControl">
            <summary>
              Determines what sign the value is.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValueSignControl.NoControl">
            <summary>
              Indicates not control sign of value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValueSignControl.Positive">
            <summary>
               Indicates keep value positive.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValueSignControl.Negative">
            <summary>
              Indicates keep value negative.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.SignState">
            <summary>
              Represent the sign type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SignState.None">
            <summary>
              Represent there is none sign. eg, value == <see langword="null"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SignState.Positive">
            <summary>
              Represent the value is positive. eg, value = +0.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SignState.Negative">
            <summary>
              Represent the value is negative. eg, value = -0.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ExitOnLeftRightKey">
            <summary>
              Specifies the action for the left or right arrow key.
            </summary>
            <remarks>
              The left or right key causes focus to be lost when the caret is at the left-most or right-most position.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ExitOnLeftRightKey.None">
            <summary>
              Specifies no action.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ExitOnLeftRightKey.Left">
            <summary>
              Specifies to move to the previous control when pressing left or Ctrl+left keys on the first character of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ExitOnLeftRightKey.Right">
            <summary>
              Specifies to move to the next control when pressing right or Ctrl+right keys on the last character of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ExitOnLeftRightKey.Both">
            <summary>
              Specifies to move to the previous or next control when pressing the left or right or Ctrl+left or Ctrl+right keys on the first or last character of the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx">
            <summary>
              Specifies the appearance of a control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Flat">
            <summary>
              Specifies that the control appears flat.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Popup">
            <summary>
              Specifies that the control appears flat until the mouse pointer moves over it, at which point
              it appears three-dimensional.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Standard">
            <summary>
              Specifies that the control appears three-dimensional.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.System">
            <summary>
              Specifies that the appearance of the control is determined by the user's operating system.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.ActiveFlat">
            <summary>
              Specifies that the control uses the active flat style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Professional">
            <summary>
              Specifies that the control uses the professional appearance style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Office2007Blue">
            <summary>
              Specifies that the control uses the office2007 blue appearance style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Office2007Black">
            <summary>
              Specifies that the control uses the office2007 black appearance style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FlatStyleEx.Office2007Silver">
            <summary>
              Specifies that the control uses the office2007 silver appearance style.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.EllipsisMode">
            <summary>
              Represents an enumeration that defines the ellipsis mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EllipsisMode.None">
            <summary>
              Specifies no ellipsis trim.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EllipsisMode.EllipsisEnd">
            <summary>
              Specifies to trim the end of the string with characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EllipsisMode.EllipsisPath">
            <summary>
              Specifies to trim the center of the string with charactors.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.TextEffect">
            <summary>
              Specifies the effect for how the text is drawn on a graphics surface, such as: Flat, 3D, and so on.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TextEffect.Flat">
            <summary>
              Text is drawn with no 3D effect (default).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TextEffect.Inset">
            <summary>
              Text is drawn with a heavy inset effect.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TextEffect.Raised">
            <summary>
              Text is drawn with a heavy raised effect.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TextEffect.InsetLite">
            <summary>
              Text is drawn with a light inset effect.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TextEffect.RaisedLite">
            <summary>
              Text is drawn with a light raised effect.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Symbols">
            <summary>
              Represents useful symbols.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.None">
            <summary>
              Specifies an empty symbol.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.Arrow">
            <summary>
              Specifies an arrow.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ArrowUnderline">
            <summary>
              Specifies an arrow with an underline.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ArrowDoubleUnderline">
            <summary>
              Specifies an arrow with a double underline.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ArrowThickUnderline">
            <summary>
              Specifies an arrow with a thick underline.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ArrowOverline">
            <summary>
              Specifies an arrow with an over line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ArrowDoubleOverline">
            <summary>
              Specifies an arrow with a double over line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ArrowThickOverline">
            <summary>
              Specifies an arrow with a thick over line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.DoubleArrow">
            <summary>
              Specifies a double arrow.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.Dot">
            <summary>
              Specifies a dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ZoomIn">
            <summary>
              Specifies a zoom in symbol.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Symbols.ZoomOut">
            <summary>
              Specifies a zoom out symbol.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.SymbolDirection">
            <summary>
              Represents the direction of the symbol.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SymbolDirection.Left">
            <summary>
              Specifies the left direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SymbolDirection.Up">
            <summary>
              Specifies the up direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SymbolDirection.Right">
            <summary>
              Specifies the right direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SymbolDirection.Down">
            <summary>
              Specifies the down direction.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ButtonPosition">
            <summary>
              Specifies the side button position.
            </summary>
            <remarks>
              Use the members of this enumeration to set the side buttons'
              position when both buttons are inside or outside of the control border. 
              The left or right information is defined in the enumeration.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonPosition.LeftInside">
            <summary>
              Side buttons are at the left side and inside the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonPosition.LeftOutside">
            <summary>
              Side buttons are at the left and outside the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonPosition.RightInside">
            <summary>
              Side buttons are at the right and inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonPosition.RightOutside">
            <summary>
              Side buttons are at the right and outside of the border.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ButtonVisibility">
            <summary>
              Specifies the visibility of side buttons.
            </summary>
            <remarks>
              The members of this enumeration allow users to set the timing of spin and 
              drop-down button visibility.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonVisibility.NotShown">
            <summary>
              Side buttons are not shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonVisibility.ShowAlways">
            <summary>
              Side buttons are always shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ButtonVisibility.ShowOnFocus">
            <summary>
              Side buttons are shown when the button container gets focus.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection">
            <summary>
               Specifies the direction in which a drop-down
               control is displayed relative to its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.AboveLeft">
            <summary>
              Uses the mouse position to specify that the drop-down control
              is displayed above and to the left of its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.AboveRight">
            <summary>
              Uses the mouse position to specify that the drop-down control
              is displayed above and to the right of its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.BelowLeft">
            <summary>
              Uses the mouse position to specify that the drop-down control
              is displayed below and to the left of its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.BelowRight">
            <summary>
              Uses the mouse position to specify that the drop-down control
              is displayed below and to the right of its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.Left">
            <summary>
              Compensates for nested drop-down controls and specifies that the drop-down control
              is displayed to the left of its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.Right">
            <summary>
              Compensates for nested drop-down controls and specifies that the drop-down control
              is displayed to the right of its parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.Default">
            <summary>
              Compensates for nested drop-down controls and responds to the <see cref="T:System.Windows.Forms.RightToLeft"/>
              setting, specifying either <see cref="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.Left"/>
              or <see cref="F:C1.Win.C1Input.GrapeCity.Editors.DropDownDirection.Right"/> accordingly.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ScrollBarMode">
            <summary>
              Specifies how to show the scroll bar(s).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ScrollBarMode.Fixed">
            <summary>
              Specifies that scroll bars are always shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ScrollBarMode.Automatic">
            <summary>
              Specifies that scroll bars are shown when the content is out of range.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DataDisplayType">
            <summary>
              Specifies the mode of display data.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DataDisplayType.Text">
            <summary>
              Show item as text
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DataDisplayType.Image">
            <summary>
              Shown item as image
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.InputStatus">
            <summary>
              Represents the status of the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputStatus.Empty">
            <summary>
              Without input, the field is empty.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputStatus.Part">
            <summary>
              With input, but not finished yet.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.InputStatus.Full">
            <summary>
              The input is finished.
            </summary>
            <remarks>
              A field status of full does not mean the field cannot accept input.
              There is a case where the field is full, but the field has not reached the maximum limit and can still accept input.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.IPMode">
            <summary>
              The IP address input mode 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.IPMode.IPv4">
            <summary>
              IPv4 Mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.IPMode.IPv6">
            <summary>
              IPv6 Mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.IPMode.MixedIPv6">
            <summary>
              Mixed IPv6 Mode
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.KeyActions">
            <summary>
              Specifies the action of shortcut keys
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.NextControl">
            <summary>
              Moves the focus to the next control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.PreviousControl">
            <summary>
              Moves the focus to the previous control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.NextField">
            <summary>
              Moves the cursor to the next field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.PreviousField">
            <summary>
              Moves the cursor to the previous field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.Clear">
            <summary>
              Clears the content of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.DropDown">
            <summary>
              Shows the dropdown window of the control
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.SpinUp">
            <summary>
              Do spin up
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.SpinDown">
            <summary>
              Do spin down
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.Now">
            <summary>
              Sets the control's value to current date and time.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.ThreeZero">
            <summary>
              Adds three zeros.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KeyActions.PopUp">
            <summary>
              Shows the popup calculation window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.AllowSelection">
            <summary>
              Specifies the type of dates that can be selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSelection.Anyday">
            <summary>
              Specifies that any dates can be selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSelection.Workday">
            <summary>
              Specifies that only workdays can be selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AllowSelection.Holiday">
            <summary>
              Specifies that only holidays and weekend days can be selected.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.CalendarType">
            <summary>
              Defines the type of the calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarType.MonthDay">
            <summary>
              Shows the calendar by Month-Day type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarType.YearMonth">
            <summary>
              Shows the calendar by Year-Month type.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.CalendarYear">
            <summary>
              Specifies the <see cref="F:C1.Win.C1Input.GrapeCity.Editors.CalendarType.YearMonth"/> display type of the calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarYear.Normal">
            <summary>
              Displays as the normal year.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarYear.Fiscal">
            <summary>
              Displays as the Fiscal year.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Months">
            <summary>
              Specifies the month of a year.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.Default">
            <summary>
              Indicates the month is not defined
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.January">
            <summary>
              Indicates January
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.February">
            <summary>
              Indicates February
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.March">
            <summary>
              Indicates March
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.April">
            <summary>
              Indicates April
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.May">
            <summary>
              Indicates May
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.June">
            <summary>
              Indicates June
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.July">
            <summary>
              Indicates July
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.August">
            <summary>
              Indicates August
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.September">
            <summary>
              Indicates September
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.October">
            <summary>
              Indicates October
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.November">
            <summary>
              Indicates November
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Months.December">
            <summary>
              Indicates December
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DayType">
            <summary>
              Defines the type of days (workday, holiday, etc.)
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayType.Normal">
            <summary>
              Indicates a normal non-holiday day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayType.Holiday">
            <summary>
              Indicates a holiday that appears yearly.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayType.ForcedWorkday">
            <summary>
              Indicates a normal day which originally was a holiday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayType.ForcedHoliday">
            <summary>
              Indicates a holiday that appears for a 
              specific date.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayType.OverriddenHoliday">
            <summary>
              Indicates a holiday that appears when a holiday
              lands on a weekend and automatically moves onto the next day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayType.DayOfWeekHoliday">
            <summary>
              Indicates the weekday is a holiday.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.HolidayOverride">
            <summary>
              Defines how a holiday is handled when it lands on a weekday 
              that is specified as a holiday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.HolidayOverride.None">
            <summary>
              No holiday override takes place.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.HolidayOverride.NextDay">
            <summary>
              Holiday overrides to the next day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.HolidayOverride.NextWorkDay">
            <summary>
              Holiday overrides to the next work day.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.FocusRectangle">
            <summary>
            Specifies the type of the selection indicator.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FocusRectangle.Normal">
            <summary>
            Shows the selection indicator as a focus rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FocusRectangle.Box">
            <summary>
            Shows the selection indicator as a box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FocusRectangle.ThreeD">
            <summary>
            Shows the selection indicator as 3D (reverse).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FocusRectangle.FlatButton">
            <summary>
            Shows the selection indicator as 3D when the mouse moves over the focus item; otherwise, shown as flat.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.NavigatorOrientation">
            <summary>
              Specifies the position of the navigation bar in a calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NavigatorOrientation.Left">
            <summary>
              Specifies the navigation bar is positioned at the left side of the calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NavigatorOrientation.Top">
            <summary>
              Specifies the navigation bar is positioned at the top of the calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NavigatorOrientation.Right">
            <summary>
              Specifies the navigation bar is positioned at the right side of the calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.NavigatorOrientation.Bottom">
            <summary>
              Specifies the navigation bar is positioned at the bottom of the calendar.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.EmptyRows">
            <summary>
              Specifies how to show the empty week rows in the <see cref="T:C1.Win.C1Input.DropDownCalendar"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EmptyRows.StartEmpty">
            <summary>
              Specifies that the empty rows appear at the beginning.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.EmptyRows.AllAtEnd">
            <summary>
              Specifies that all empty rows are at the end.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.CalendarNavigators">
            <summary>
              Specifies which type of navigator bar is shown in the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarNavigators.None">
            <summary>
              Specifies that no navigator bar is shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarNavigators.Buttons">
            <summary>
              Specifies that the button style navigator bar is shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarNavigators.ScrollBar">
            <summary>
              Specifies that the scroll bar style navigator bar is shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CalendarNavigators.Outlook">
            <summary>
              Specifies that the outlook style navigator bar is shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.WeekFlags">
            <summary>
              Defines flags for the different weeks.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.None">
            <summary>
              Specifies no weeks.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.FirstWeek">
            <summary>
              Specifies the first week in the month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.SecondWeek">
            <summary>
              Specifies the second week in the month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.ThirdWeek">
            <summary>
              Specifies the third week in the month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.FourthWeek">
            <summary>
              Specifies the fourth week in the month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.FifthWeek">
            <summary>
              Specifies the fifth week in the month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.LastWeek">
            <summary>
              Specifies the last week in the month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.WeekFlags.All">
            <summary>
              Specifies all weeks in the month.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Templates">
            <summary>
              Specifies the style of the template.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Templates.Outlook">
            <summary>
              Specifies the outlook style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Templates.MonthCalendar">
            <summary>
              Specifies the MonthCalendar style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Templates.System">
            <summary>
              Specifies the System style.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.PickDays">
            <summary>
              Specifies which type of <b>PickDays</b> to use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.PickDays.NormalDay">
            <summary>
              Specifies only the days in the current month.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.PickDays.TrailingDay">
            <summary>
              Specifies to include the trailling days in the view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.PickDays.MinMaxDay">
            <summary>
              Specifies the minimum or maximum day.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek">
            <summary>
              Specifies the day of the week.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.NotSet">
            <summary>
              Indicates the weekday is not defined.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Sunday">
            <summary>
              Indicates Sunday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Monday">
            <summary>
              Indicates Monday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Tuesday">
            <summary>
              Indicates Tuesday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Wednesday">
            <summary>
              Indicates Wednesday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Thursday">
            <summary>
              Indicates Thursday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Friday">
            <summary>
              Indicates Friday.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DayOfWeek.Saturday">
            <summary>
              Indicates Saturday.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ToolBarDockPositionStyle">
            <summary>
              Specifies the position and manner in which a toolbar is docked. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolBarDockPositionStyle.Left">
            <summary>
             The toolbar's left edge is docked to the left edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolBarDockPositionStyle.Right">
            <summary>
             The toolbar's right edge is docked to the right edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolBarDockPositionStyle.Top">
            <summary>
             The toolbar's top edge is docked to the top edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolBarDockPositionStyle.Bottom">
            <summary>
             The toolbar's bottom edge is docked to the bottom edge of its containing control. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction">
            <summary>
              Specifies the action that the toolstirp action button perform.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Copy">
            <summary>
              Copies the richtextbox text to clipbord.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Paste">
            <summary>
             Pastes the clipbord content to richtextbox.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Cut">
            <summary>
             Cuts the selction of richtextbox.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Delete">
            <summary>
             Deletes the selction of richtextbox.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Undo">
            <summary>
             Performs the undo operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Redo">
            <summary>
             Performs the redo operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.InsertImage">
            <summary>
             Inserts a iamge.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.AlignmentLeft">
            <summary>
             Alignments to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.AlignmentCenter">
            <summary>
             Ailgnments to the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.AlignmentRight">
            <summary>
             Ailgnments to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Bullet">
            <summary>
             Bullet style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.IndentIncrease">
            <summary>
             Indent increasement.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.IndentDecrease">
            <summary>
             Indent decreasement.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Bold">
            <summary>
             Bold style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Italic">
            <summary>
             Italic style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Underline">
            <summary>
             Unerline style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.Strikeout">
            <summary>
             Strikeout style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.LoadFile">
            <summary>
             Loads file style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.SaveFile">
            <summary>
             Saves file style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ToolStripButtonAction.None">
            <summary>
              No operation.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.SystemSoundType">
            <summary>
              Enumerate all system sound types.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SystemSoundType.Asterisk">
            <summary>
              One type of Systemsound,<see cref="P:System.Media.SystemSounds.Asterisk"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SystemSoundType.Beep">
            <summary>
              One type of Systemsound,<see cref="P:System.Media.SystemSounds.Beep"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SystemSoundType.Exclamation">
            <summary>
              One type of Systemsound,<see cref="P:System.Media.SystemSounds.Exclamation"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SystemSoundType.Hand">
            <summary>
              One type of Systemsound,<see cref="P:System.Media.SystemSounds.Hand"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SystemSoundType.Question">
            <summary>
              One type of Systemsound,<see cref="P:System.Media.SystemSounds.Question"/>
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator">
            <summary>
              Specifies the operator of compare action.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator.Equals">
            <summary>
              The difference of target control value and related control value equals difference value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator.NotEquals">
            <summary>
              The difference of target control value and related control value not equals difference value
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator.GreaterThan">
            <summary>
              The difference of target control value and related control value greater than difference value
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator.GreaterThanOrEquals">
            <summary>
              The difference of target control value and related control value greater than or equals difference value
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator.SmallerThan">
            <summary>
              The difference of target control value and related control value smaller than difference value
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ComparedOperator.SmallerThanOrEquals">
            <summary>
              The difference of target control value and related control value smaller than or equals difference value
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ScrollTipAlignment">
            <summary>
              Specifies the position of the scroll tip window within the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ScrollTipAlignment.Default">
            <summary>
              The scroll tip window is positioned at the default location.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ScrollTipAlignment.TopLeft">
            <summary>
              The scroll tip window is positioned at the top or left side of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ScrollTipAlignment.BottomRight">
            <summary>
              The scroll tip window is positioned at the bottom or right side of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ScrollTipAlignment.Center">
            <summary>
              The scroll tip window is positioned at the center of the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.LengthUnit">
            <summary>
               Defines the <b>LengthUnit</b> enumeration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LengthUnit.Char">
            <summary>
              Indicates the calculational unit is a .Net character when calculating the length of the string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LengthUnit.Byte">
            <summary>
              Indicates the calculational unit is a byte when calculating the length of the string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LengthUnit.TextElement">
            <summary>
              Indicates the calculational unit is a TextElment when calculating the length of the string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.ValueProcessOption">
            <summary>
              Defines the <b>ValueProcessOption</b> enumeration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValueProcessOption.Keep">
            <summary>
              Keeps the current value.  
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValueProcessOption.Clear">
            <summary>
              Clears the current.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.ValueProcessOption.Restore">
            <summary>
              Restores the previous value. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.FieldsEditMode">
            <summary>
              Defines the <b>FieldsEditMode</b> enumeration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FieldsEditMode.LeftSide">
            <summary>
              Specifies the input is from the left side in each field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FieldsEditMode.RightSide">
            <summary>
              Specifies the input is from the right side in each field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.FieldsEditMode.Unfixed">
            <summary>
              Specifies that the field does not show the empty prompt character, but the width of the field is fixed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DisplayAlignment">
            <summary>
             Defines the <b>DisplayAlignment</b> enumeration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DisplayAlignment.None">
            <summary>
              Specifies to never make a horizontal alignment effect.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DisplayAlignment.Distributed">
            <summary>
            Specifies that the alignment is distributed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DisplayAlignment.DistributedWithWhiteSpace">
            <summary>
            Specifies that the alignment is distributed with white space.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation">
            <summary>
              Defines the dropdown animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.None">
            <summary>
              Indicates no animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.Scroll">
            <summary>
              Indicates the scroll animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.Slide">
            <summary>
              Indicates the slide animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.Fade">
            <summary>
              Indicates the fade animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.Center">
            <summary>
              Indicates the center animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.Extend">
            <summary>
              Indicates the extend animation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DropDownAnimation.Drag">
            <summary>
              Indicates the drag animation.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.KanaMode">
            <summary>
              Defines the Japanese char converting mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KanaMode.KatakanaHalf">
            <summary>
              Converts the Japanese character to the Half Width Katakana mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KanaMode.Katakana">
            <summary>
              Convert the Japanese character to the Full Width Katakana mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.KanaMode.Hiragana">
            <summary>
              Converts the Japanese character to the Hiragana mode.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.CrLfMode">
            <summary>
              Defines the CrLf mode which describes how to process the CrLf char.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CrLfMode.NoControl">
            <summary>
              Accepts all CrLf characters in copied, cut, or pasted strings.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CrLfMode.Filter">
            <summary>
              Removes all CrLf characters in copied, cut, or pasted strings.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CrLfMode.Cut">
            <summary>
              Cuts the following strings from the first CrLf character in copied, cut, and pasted strings.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle">
            <summary>
              Specifies the style of dashed liness
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle.None">
            <summary>
              Specifies no line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle.Solid">
            <summary>
              Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle.Dashed">
            <summary>
              Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle.Dotted">
            <summary>
              Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.LineDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.RoundPattern">
            <summary>
              Specifies the round pattern of the specified number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.RoundPattern.Ceiling">
            <summary>
              When a number is halfway between two others, it is rounded toward the smallest integer greater than or equal to the specified number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.RoundPattern.Floor">
            <summary>
              When a number is halfway between two others, it is rounded toward the largest integer less than or equal to the specified number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.RoundPattern.MidpointRoundAwayFromZero">
            <summary>
              When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.RoundPattern.MidpointRoundToEven">
            <summary>
              When a number is halfway between two others, it is rounded toward the nearest even number. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.MaxMinBehavior">
            <summary>
            Defines how to process the GcDateTime.Value, 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MaxMinBehavior.AdjustToMaxMin">
            <summary>
              Adjusts the value to the valid range between the minimum and maximum.
            </summary>
            <remarks>
             If the value is less than the minimum, adjusts to the minimum. If the Value is greater than the maximum, adjusts to the maximum.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MaxMinBehavior.Clear">
            <summary>
              Clears the value to <see langword="null"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MaxMinBehavior.Restore">
            <summary>
              Restores the backup value to the specified property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MaxMinBehavior.CancelInput">
            <summary>
             Cancels the last input and holds the old text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.MaxMinBehavior.Keep">
            <summary>
             Keeps the last input and holds the old text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.EnumHelper.ValidateEnum(System.Type,System.Object)">
            <summary>
              Helper method for validating Enum.
            </summary>
            <param name="enumType">
              the type of the Enum.
            </param>
            <param name="value">
              the validating value.
            </param>
            <returns>
              valid value of Enum.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.TabCharMode">
            <summary>
              Defines the Tab character mode which describes how to process the Tab character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TabCharMode.NoControl">
            <summary>
              Accepts all Tab characters in copied, cut, or pasted strings.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TabCharMode.Filter">
            <summary>
              Removes all Tab characters in copied, cut, or pasted strings.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TabCharMode.Cut">
            <summary>
              Cuts the following strings from the first Tab character in copied, cut, and pasted strings.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.SideButtonBehavior">
            <summary>
            Defines behavior used when click SideButton.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SideButtonBehavior.None">
            <summary>
             No specific behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SideButtonBehavior.SpinUp">
            <summary>
             SideButton will do spin up behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.SideButtonBehavior.SpinDown">
            <summary>
             SideButton will do spin down behavior.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.TouchToolBarDisplayOptions">
            <summary>
            Defines how to show the TouchToolBar when touch tap target control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TouchToolBarDisplayOptions.None">
            <summary>
            Not show the TouchToolBar by touch device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TouchToolBarDisplayOptions.PressAndHold">
            <summary>
            Show the TouchToolBar to take place of showing <see cref="P:System.Windows.Forms.Control.ContextMenu"/> or <see cref="P:System.Windows.Forms.Control.ContextMenuStrip"/> when executing touch PressAndHolder operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TouchToolBarDisplayOptions.TapSelection">
            <summary>
            Show the TouchToolBar by tap the selection region of target control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.TouchToolBarDisplayOptions.TapGripper">
            <summary>
            Show the TouchToolBar by tap the selection gripper.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.PasswordRevelationMode">
            <summary>
              Represents the mode of revealing the typed password in the password protected editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.PasswordRevelationMode.None">
            <summary>
              Never reveal the typed password.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.PasswordRevelationMode.ShowEyeButton">
            <summary>
             Shows an eye button and press it to reveal the typed password. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.PasswordRevelationMode.ShowLastTypedChar">
            <summary>
            Shows the last typed char for a short period and then hidden with password char.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.DecimalMode">
            <summary>
              Repesents the decimal part of the numeric value handling mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DecimalMode.Filter">
            <summary>
             The decimal point will be filtered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.DecimalMode.Cut">
            <summary>
             Cut off the decimal part, only kepts the integer part value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.CompareStringOperator">
            <summary>
            Defines the <b>CompareStringOperator</b> enumeration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CompareStringOperator.Equals">
            <summary>
              The difference of string value and related control value equals difference value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CompareStringOperator.NotEquals">
            <summary>
             The difference of string control value and related control value not equals difference value
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CompareStringOperator.Contains">
            <summary>
             The control value contain the string
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CompareStringOperator.StartsWith">
            <summary>
             The control value starts with the string
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.CompareStringOperator.EndsWith">
            <summary>
             The control value end with the string
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.AutoHideTouchKeyboard">
            <summary>
              Defines the action options of hide the touch keyboard when user opens the drop-down window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AutoHideTouchKeyboard.None">
            <summary>
            Not hide the touch keyboard. Both dropdown and touch keyboard are shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AutoHideTouchKeyboard.AutoHide">
            <summary>
             The touch keyboard will be hidden when the drop-down window is shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.AutoHideTouchKeyboard.HideAndReshow">
            <summary>
             The touch keyboard will be hidden when the drop-down window is shown, and it will be shown again after the drop-down window is closed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.Field">
            <summary>
              Represnts a <b>Field</b> class to define a base field.
            </summary>
            <remarks>
              This class will implement view function for single segment. And some input behavior will exposed to user, too.
              This is final interface for our user.
              When a field is created, it will create a segment and value module for it. Then configuration will be done on the
              segment and the value module.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.Field.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.Field"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.Field._name">
            <summary>
              A <see cref="T:System.String"/> object indicates the name property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.Field.Name">
            <summary>
              Gets or sets the name of the object.
            </summary>
            <value>
              A <see cref="T:System.String"/> value indicating the name of the object.
              <br/> The default is <see cref="F:System.String.Empty"/>.
            </value>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons">
            <summary>
              Defined the mask format lexicons.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern">
            <summary>
              A patter used to parse define character sub set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern._keywords">
            <summary>
              Indicates the keywords.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern._texts">
            <summary>
              Indicates the content of the keyowrds.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern.#ctor(System.String[],System.String[])">
            <summary>
              Initialize a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern"/>
            </summary>
            <param name="keywords">
              Indicates the keywords.
            </param>
            <param name="texts">
              Indicates the content of the keyowrds.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharacterSetPattern.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filter.
            </param>
            <returns>
              The text after filter.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexAscIIPattern">
            <summary>
              Define a pattern used to parse hex AscII.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexAscIIPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexAscIIPattern.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filter.
            </param>
            <returns>
              The text after filter.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexAscIIPattern.IsHexChar(System.Char)">
            <summary>
              To judge the character whether is a hex digital
            </summary>
            <param name="c">
              the character
            </param>
            <returns>
              if the character is hex digital return true,else return false
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexUnicodePattern">
            <summary>
              Define a pattern used to parse hex Unicode.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexUnicodePattern.Match(System.String,System.Int32)">
            <summary>
              Match the text.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexUnicodePattern.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filter.
            </param>
            <returns>
              The text after filter.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.HexUnicodePattern.IsHexChar(System.Char)">
            <summary>
              To judge the character whether is a hex digital
            </summary>
            <param name="c">
              the character
            </param>
            <returns>
              if the character is hex digital return true,else return false
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.OctalAscIIPattern">
            <summary>
              Define a pattern used to parse octal AscII
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.OctalAscIIPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.OctalAscIIPattern.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filter.
            </param>
            <returns>
              The text after filter.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.OctalAscIIPattern.IsOctalChar(System.Char)">
            <summary>
              To judge the character whether is a octal digital
            </summary>
            <param name="c">
              the character
            </param>
            <returns>
              if the character is octal digital return true,else return false
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords">
            <summary>
              Defines the keywords form mask format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.EscapeChar">
            <summary>
              Defines the escape character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.HyphenChar">
            <summary>
              Defines the hyphen character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.VerticalBarChar">
            <summary>
              Defines the vertical bar character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.CommaChar">
            <summary>
              Defines the comma character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.ArrowChar">
            <summary>
              Defines the arrow character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.Literials">
            <summary>
              Defines the literials id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.Separator">
            <summary>
              Defines the separator id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.Hyphen">
            <summary>
              Defines the hyphen id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.CharSubset">
            <summary>
              Defines the char subset id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.Quantifier">
            <summary>
              Defines the quantifier id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.EnumGroup">
            <summary>
              Defines the enum group id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.DefinedCharacterSet">
            <summary>
              Defines the defined char id.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Keywords.Unknow">
            <summary>
              Defines the unknow id.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.#cctor">
            <summary>
              Initializes the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.Lexicon">
            <summary>
              Gets a lexicon used to parse the maske format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CharSubsetLexicon">
            <summary>
              Gets a lexicon used to parse the character subset.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.QuantifierLexicon">
            <summary>
              Gets a lexicon used to parse the quantifier.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.EnumGroupLexicon">
            <summary>
              Gets a lexicon used to parse the enum group. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFormatLexicons.CreateLexicons">
            <summary>
              Creates the lexicons.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatterns">
            <summary>
              Defined the mask pattern collection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFieldsBuilder">
            <summary>
              Represents a builder to build some specify the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskField"/> by a format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskFieldsBuilder.FetchMaxMinValue(System.String,System.Int32@,System.Int32@)">
            <summary>
              To analyse the quantifier string.
            </summary>
            <param name="pattern">
              the pattern string
            </param>
            <param name="min">
              return the quantifier minimum
            </param>
            <param name="max">
              return the quantifier maximum
            </param>
            <remarks>
              the subset string is a string that start with '{' character and end with '}'character.
              And maximum and minimum are split by ',' character.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder">
            <summary>
              Defined a character filter builder to builder a specify character filter with a pattern.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper">
            <summary>
              A class use to parse the char sub set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper._filters">
            <summary>
              Save the filters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper._includes">
            <summary>
              Save the include characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper._isWorking">
            <summary>
              Indicates if the helper is working.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper._character">
            <summary>
              Cache a character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper._hasCachedCharacter">
            <summary>
              Indicates if has cached a character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper._hasHyphen">
            <summary>
              Indicates if has cached a Hyphen.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.BeginParsing">
            <summary>
              Begin the parsing
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.FeedHyphen">
            <summary>
              Feed a Hyphen to the helper.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.FeedCharacter(System.Char)">
            <summary>
              Feed a character to the helper.
            </summary>
            <param name="character">
              The character.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.ProcessCharacterCache">
            <summary>
              Process the character saved in the cache.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.AddIncludeCharacter(System.Char)">
            <summary>
              Adds a include character into the include.
            </summary>
            <param name="character">
              The included character.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.FeedFilter(C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter)">
            <summary>
              Feed a filter.
            </summary>
            <param name="filter">
              The filter.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CharSubsetParsingHelper.EndParing">
            <summary>
              Ends the paraing.
            </summary>
            <returns>
              Returns the filters saved in the helper.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.BuildCharacterFilter(System.String)">
            <summary>
              Builds a character filter with the specified pattern.
            </summary>
            <param name="pattern">
              The specify format defined by MaskPatternField.
            </param>
            <returns>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter"/> object indicate the build result.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CreateFilterByCharSubset(System.String)">
            <summary>
              Create the character filter by special char subset pattern.
            </summary>
            <param name="charSubset">
              The apecial char subset pattern.
            </param>
            <returns>
              The character filter.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.CharacterFilterBuilder.CreateFilterByDefinedChar(System.Char)">
            <summary>
              Create the filter by defined char.
            </summary>
            <param name="definedChar">
              The defined character.
            </param>
            <returns>
              The character filter.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField"/> class.
            </summary>
            <param name="pattern">
              A <see cref="T:System.String"/> value indicates the pattern.</param>
            <param name="minLength">
              An <see cref="T:System.Int32"/> value indicates the minimum length.
            </param>
            <param name="maxLength">
              An <see cref="T:System.Int32"/> value indicates the maximum length.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField.MinLength">
            <summary>
              Gets or sets the minimum length of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField"/>.
            </summary>
            <value>
              An <see cref="T:System.Int32"/> value indicates the minimum length.
              <br/> The default is 1.
            </value>
            <remarks>
              The property determines the minimum length of input characters.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField.MaxLength">
            <summary>
              Gets or sets the maximum length of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField"/>.
            </summary>
            <value>
              An <see cref="T:System.Int32"/> value indicates the maximum length.
              <br/> The default is <see cref="F:System.UInt16.MaxValue"/>.
            </value>
            <remarks>
              The property determines the maximum length of input characters.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskPatternField.AutoConvert">
            <summary>
              Gets or sets a value indicating whether the field can auto convert.
            </summary>
            <value>
              <see langword="true"/> if can perform auto convert; otherwise, <see langword="false"/>.
            </value>
            <remarks>
              If set the <b>AutoConvert</b> property to <see langword="true"/>, all convertible characters will be 
              automatically converted accordingly to the input mask. For example, if set 
              the input mask to "A", by hitting a lower case character the control automatically 
              converts the character into an upper case. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskLiteralField.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskLiteralField"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskLiteralField.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskLiteralField"/> class.
            </summary>
            <param name="literalText">
              A <see cref="T:System.String"/> value indicates the literal.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskLiteralField.Text">
            <summary>
              Gets or sets the literal text of the field.
            </summary>
            <value>
              A <see cref="T:System.String"/> value indicates the literal text of the field.
              <br/> The default is White-Space char.
            </value>
            <remarks>
              The property retrieves the text of the <see cref="T:C1.Win.C1Input.GrapeCity.Editors.Fields.MaskLiteralField"/>.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageWindow">
            <summary>
              Defines an interface that abstractes a window, user can add message processors to it.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageWindow.AddMessageProcessor(C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor)">
            <summary>
              Addes the an <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> into the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageWindow"/>.
            </summary>
            <param name="processor">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> indicates the message processor.
            </param>
            <remarks>
              Last added processor has the hightest priority.
              A duplicate processor or null will cause an exception.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageWindow.RemoveMessageProcessor(C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor)">
            <summary>
              Removes the an <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> from the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageWindow"/>.
            </summary>
            <param name="processor">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> indicates the message processor.
            </param>
            <remarks>
              A no found processor or null will cause an exception.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor">
            <summary>
              Defines the message processor interface.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor.PreProcess(System.Windows.Forms.Message@)">
            <summary>
              Process the message before other processors.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
            <returns>
              A <b>bool</b> value indicates whether the message will be processed by other processors.
              <b>true</b> the message will not be process any.
              <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor.PostProcess(System.Windows.Forms.Message@)">
            <summary>
              Process the message after other processors.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow">
            <summary>
              Defines a virtual windows to help the operation of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/>.
            </summary>
            <remarks>
              This class only send message to the IMessageProcessor.PerProcess methods.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow._factWindow">
            <summary>
              Save the fact window object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow._processors">
            <summary>
              Saves the processors.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.FactWindow">
            <summary>
              Gets or sets the fact window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.OnFactWindowChanged(System.EventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.FactWindowChanged"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the arguments of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.FactWindowChanged">
            <summary>
              A event raised when the value of <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.FactWindow"/> property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.C1#Win#C1Input#GrapeCity#Framework#Input#IMessageWindow#AddMessageProcessor(C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor)">
            <summary>
              Add a message proccessor to the virtual window.
            </summary>
            <param name="processor">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> indicates the message processor.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.C1#Win#C1Input#GrapeCity#Framework#Input#IMessageWindow#RemoveMessageProcessor(C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor)">
            <summary>
              Remove a message processor from the virtual window.
            </summary>
            <param name="processor">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> indicates the message processor.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.System#Windows#Forms#IWin32Window#Handle">
            <summary>
              Gets the handle of the vritual window.
            </summary>
            <value>
              An <see cref="T:System.IntPtr"/> indicates the handle of the virtual window.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
              Dispatch the message to the processsor.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
            <returns>
              Return a <b>bool</b> indicate whether this message should be blocked.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.VirtualWindow.Dispose">
            <summary>
              Hang up the link between this class and the Application.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper">
            <summary>
              Defines a virtual windows to help the operation of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/>.
            </summary>
            <remarks>
              This class only send message to the IMessageProcessor.PerProcess methods.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Hook">
            <summary>
              A hook used to accept the window message.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Hook._owner">
            <summary>
              Saves the owner.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Hook.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Hook"/> class.
            </summary>
            <param name="owner">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper"/> indicates the owner.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Hook.WndProc(System.Windows.Forms.Message@)">
            <summary>
              Process the message.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Hook.DetachOwner">
            <summary>
              Detach the owner to prevent msg process again.
            </summary>
            <remarks>
              This method is often used when its owner is been destroyed.
              And this method will break relationship with its owner.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper._factWindow">
            <summary>
              Save the fact window object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper._hookDictionary">
            <summary>
              A dictionary keeps all of the related hook window wrappers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper._processors">
            <summary>
              Saves the processors.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.FactWindow">
            <summary>
              Gets or sets the fact window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.GetAssociatedWindowHandle">
            <summary>
              Gets the associated window handle that related to the FactWindow instance.
            </summary>
            <returns>
              The associated window handle related to the FactWindow instance.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.GetHookHandle">
            <summary>
              Gets the hook handle from the FactWindow.
            </summary>
            <returns>
              Returns the hook handle.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.OnFactWindowChanged(System.EventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.FactWindowChanged"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the arguments of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.FactWindowChanged">
            <summary>
              A event raised when the value of <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.FactWindow"/> property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.C1#Win#C1Input#GrapeCity#Framework#Input#IMessageWindow#AddMessageProcessor(C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor)">
            <summary>
              Add a message proccessor to the virtual window.
            </summary>
            <param name="processor">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> indicates the message processor.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.C1#Win#C1Input#GrapeCity#Framework#Input#IMessageWindow#RemoveMessageProcessor(C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor)">
            <summary>
              Remove a message processor from the virtual window.
            </summary>
            <param name="processor">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.IMessageProcessor"/> indicates the message processor.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.System#Windows#Forms#IWin32Window#Handle">
            <summary>
              Gets the handle of the vritual window.
            </summary>
            <value>
              An <see cref="T:System.IntPtr"/> indicates the handle of the virtual window.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Dispatch the message to the processsor.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
            <returns>
              Return a <b>bool</b> indicate whether this message should be blocked.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.PostProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Dispatch the message to the processsor.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
            <returns>
              Return a <b>bool</b> indicate whether this message should be blocked.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.WindowWrapper.Dispose">
            <summary>
              Hang up the link between this class and the Application.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost">
            <summary>
              Defines the window that implements the IWin32Window interface.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost._handle">
            <summary>
              Saves the handle of the window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost"/> class.
            </summary>
            <param name="handle">
              An <see cref="T:System.IntPtr"/> indicates the handle of the window.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost.#ctor(System.Windows.Forms.NativeWindow)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost"/> class.
            </summary>
            <param name="window">
              A <see cref="T:System.Windows.Forms.NativeWindow"/> indicates the handle of the window.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHost.Handle">
            <summary>
              Gets the handle of the window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeType">
            <summary>
              Defines the type of the ime device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeType.Unidirection">
            <summary>
              User can control the ime device, but can not receive the event from ime device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeType.Bidirection">
            <summary>
              User can not only control the ime device, but also receive the event from ime device.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys">
            <summary>
              Defines the hot keys for ime.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.SimplifiedChineseNonImeToggle">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.SimplifiedChineseShapeToggle">
            <summary>
              For simplified Chinese, toggles the shape conversion mode of IME.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.SimplifiedChineseSymbolToggle">
            <summary>
              For simplified Chinese, toggles the symbol conversion mode of IME. 
              Symbol mode indicates that the user can input Chinese punctuation and symbols 
              by mapping to the punctuation and symbols on the keyboard.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.JanpaneseOpenClose">
            <summary>
              For Japanese, alternately opens and closes the IME.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.KoreanShapeToggle">
            <summary>
              For Korean, toggles the shape conversion mode of IME.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.KoreanHanjaConvert">
            <summary>
              For Korean, switches to Hanja conversion.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.KoreanEnglish">
            <summary>
              Switches to from Korean to English.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.TraditionalChineseNonImeToggle">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.TraditionalChineseShapeToggle">
            <summary>
              For traditional Chinese, toggles the shape conversion mode of IME.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.TraditionalChineseSymbolToggle">
            <summary>
              For traditional Chinese, toggles the symbol conversion mode of IME.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.TraditionalChineseTriggerReconversion">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.PrivateResendResultString">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.PrivatePreviousComposition">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.PrivateUIStyleToggle">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys.PrivateTriggerReconversion">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime">
            <summary>
              Defines the ime device that is a bridge between application and ime.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext">
            <summary>
              Defines the ime context for all ime operations.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext._ime">
            <summary>
              Saves the device of the ime window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext._handle">
            <summary>
              Saves the handle of the ime window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext._originalHandle">
            <summary>
              Saves the orignal handle of ime window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext._enable">
            <summary>
              Saves a flag indicating whether the ime context is used by ime device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext._modified">
            <summary>
              Saves a flag indicating whether the ime context have beed modified by ourself.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Initializes a new instance of the <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Ime"/> class. 
            </summary>
            <param name="device">
              An <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Ime"/> indicates the device.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Finalize">
            <summary>
              Ensure to release <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Ime">
            <summary>
              Gets the device of the ime context.
            </summary>
            <value>
              An <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Ime"/> indicates the ime device that is owner of the ime context.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Handle">
            <summary>
              Gets the handle of the ime context.
            </summary>
            <value>
              An <see cref="T:System.IntPtr"/> indicates the handle of the ime.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.IsValid">
            <summary>
              Gets a <b>bool</b> indicating whether the ime context is valid.
            </summary>
            <value>
              A <b>bool</b> indicates whether this context is valid.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Dispose">
            <summary>
              Release the handle of the ime context.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Dispose(System.Boolean)">
            <summary>
              Release the handle of the ime context.
            </summary>
            <param name="disposing">
              Ignore this params, this method use to ensure release handle of the ime context.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeContext.Enable">
            <summary>
              Gets or sets wehther the ime context is used by ime device.
            </summary>
            <value>
              <b>true</b>, the ime context is used by ime device.
              <b>false</b>, the ime context is not used by ime device.
            </value>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatus">
            <summary>
              Defines the ime status.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatus.Off">
            <summary>
              Indicates the ime function is closed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatus.On">
            <summary>
              Indicates the ime function is opened.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode">
            <summary>
              Defines the conversion mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Language">
            <summary>
              Language mask.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Alphanumeric">
            <summary>
              Alphanumeric mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Native">
            <summary>
              Native mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Chinese">
            <summary>
              Chinese mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Hangeul">
            <summary>
              Hangeul mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Hangul">
            <summary>
              Hangul mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Japanese">
            <summary>
              Japanese mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Katakana">
            <summary>
              Katakana mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.FullShape">
            <summary>
              Full shape mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Roman">
            <summary>
              Roman input mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.CharCode">
            <summary>
              Character code input mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Hanja">
            <summary>
              Hanja convert mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.SoftBoard">
            <summary>
              Soft Keyboard mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.NoConversion">
            <summary>
              Prevent processing of conversions by IME
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Eudc">
            <summary>
              Eudc conversion mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode.Symbol">
            <summary>
              Symbol conversion mode
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode">
            <summary>
              Defines the sentence mode
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode.None">
            <summary>
              No information for sentence.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode.PluralClause">
            <summary>
              The IME uses plural clause information to carry out conversion processing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode.SingleConvert">
            <summary>
              The IME carries out conversion processing in single-character mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode.Automatic">
            <summary>
              The IME carries out conversion processing in automatic mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode.PhrasePredict">
            <summary>
              The IME uses phrase information to predict the next character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode.Conversation">
            <summary>
              The IME uses conversation mode. This is useful for chat applications.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow">
            <summary>
              Defines the base class of all ime window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow._ime">
            <summary>
              Saves the device of the ime window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow"/> class.
            </summary>
            <param name="device">
              An <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Ime"/> indicates the device.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Ime">
            <summary>
              Gets the device of the ime window.
            </summary>
            <value>
              An <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Ime"/> indicates the ime device that is owner of the ime window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Visible">
            <summary>
              Gets or sets a <b>bool</b> indicates whether the ime window is visible.
            </summary>
            <value>
              A <b>bool</b> indicates whether the window is visible.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Position">
            <summary>
              Gets or sets the position of the ime window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> indicates the position of the ime window.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.ProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message coming from the ime window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the ime message.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Show">
            <summary>
              Shows the ime window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeWindow.Hide">
            <summary>
              Hides the ime window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow">
            <summary>
              Defines the ime status window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow"/> class.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the device.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Visible">
            <summary>
              Gets or sets a <b>bool</b> indicates whether the ime window is visible.
            </summary>
            <value>
              A <b>bool</b> indicats whether the ime window is visible.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Position">
            <summary>
              Gets or sets the position of the ime window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> indicates position of the ime window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Status">
            <summary>
              Gets or sets a <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatus"/> indicating the ime is opened or closed.
            </summary>
            <value>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatus"/> indicates the status of the ime.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.ConversionMode">
            <summary>
              Gets or sets the conversion mode.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode"/> indicates the conversion mode of the ime.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.SentenceMode">
            <summary>
              Gets or sets the sentence mode.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeSentenceMode"/> indicates the sentence mode of the ime.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.ProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message coming from the ime status window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the ime message.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Opening">
            <summary>
               When the ime window is about created.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.RaiseOpeningEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Opening"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Closing">
            <summary>
              When the ime window is about closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.RaiseClosingEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.Closing"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.ConversionModeChanged">
            <summary>
              When the ConversionMode is changed by user from ime bar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.RaiseConversionModeChangedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.ConversionModeChanged"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.SentenceModeChanged">
            <summary>
              When the SentenceMode is changed by user from ime bar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.RaiseSentenceModeChangedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.SentenceModeChanged"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.StatusChanged">
            <summary>
              When the Status is changed by user from ime bar or by code.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.RaiseStatusChangedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow.StatusChanged"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails">
            <summary>
              An <b>enum</b> indicates the details of the composition.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ReadingString">
            <summary>
              The reading string of the current composition. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ReadingAttribute">
            <summary>
              The attributes of the reading string of the current composition.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ReadingClause">
            <summary>
              The clause information of the reading string of the composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.String">
            <summary>
              The current composition string. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.Attribute">
            <summary>
              The attribute of the composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.Clause">
            <summary>
              The clause information of the composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.CursorPosition">
            <summary>
              The cursor position in composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.DeltaStart">
            <summary>
              The starting position of any changes in composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ResultReadingString">
            <summary>
              The reading string. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ResultReadingClause">
            <summary>
              The clause information of the reading string. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ResultString">
            <summary>
              The string of the composition result. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails.ResultClause">
            <summary>
              The clause information of the result string. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs">
            <summary>
              Define a class used for the arguments of the <b>CompositionChanged</b> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs._latestCharacter">
            <summary>
              Saves the value of the <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs.LatestCharacter"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs._details">
            <summary>
              Saves the value of the <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs.Details"/> property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs.#ctor(System.Char,C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs"/> class.
            </summary>
            <param name="lastestCharacter">
              A <see cref="T:System.Char"/> indicates the lastest change to 
              the composition string.
            </param>
            <param name="detials">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails"/> indicates the detials of the composition.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs.LatestCharacter">
            <summary>
              Gets the lastest change to the composition string.
            </summary>
            <value>
              A <b>char</b> indicates the lastest change to the composition string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs.Details">
            <summary>
              Gets the detials of the composition.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionDetails"/> indicates the detials of the composition.
            </value>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventHandler">
            <summary>
              Defines a the deleget for handling the ime <b>CompositionChanged</b> event.
            </summary>
            <param name="sender">
              A <b>object</b> indicates the event sender.
            </param>
            <param name="e">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute">
            <summary>
              Defines the attribute of the characthers in the ime composition.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute.Input">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute.TargetConverted">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute.Converted">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute.TargetNotConverted">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute.InputError">
            <summary>
              
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute.FixedConverted">
            <summary>
              
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause">
            <summary>
              Defines a clause of the composition.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause._start">
            <summary>
              Saves the start of the clause.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause._length">
            <summary>
              Saves the length of the clause.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause"/> class.
            </summary>
            <param name="start">
              An <b>int</b> indicates the start of the clause.
            </param>
            <param name="length">
              An <b>int</b> indicates the end of the cluase.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause.Start">
            <summary>
              Gets an <b>int</b> indicating the start of the clause.
            </summary>
            <value>
              An <b>int</b> indicating the start of the clause.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause.Length">
            <summary>
              Gets an <b>int</b> indicating the start of the clause.
            </summary>
            <value>
              An <b>int</b> indicating the start of the clause.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause.GetClauseString(System.String)">
            <summary>
              Gets the string of the clause from the given composition string.
            </summary>
            <param name="compositionString">
              A <b>string</b> indicates the composition string.
            </param>
            <returns>
              Return the string of the clause.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow">
            <summary>
              Defines the ime composition window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow"/> class.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the device.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Visible">
            <summary>
              Gets or sets a <b>bool</b> indicates whether the ime window is visible.
            </summary>
            <value>
              A <b>bool</b> indicates whether the ime window is visible. 
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Position">
            <summary>
              Gets or sets the position of the ime window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> indicates the position of the ime window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.WorkArea">
            <summary>
              Gets or sets the work area of the composition window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Rectangle"/> indicates the work area.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.IsFloating">
            <summary>
              Gets a <b>bool</b> indicating whether the composition window is floating.
            </summary>
            <value>
              A <b>bool</b> indicates whther the composition window is int floation window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.IsSingleLine">
            <summary>
              Gets whether the compsition form is single line or not.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.CursorPosition">
            <summary>
              Gets the cursor position.
            </summary>
            <value>
              An <b>int</b> indicates the caret position of the composition window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.DeltaStart">
            <summary>
              Gets the delta start.
            </summary>
            <value>
              An <b>int</b> indicate the start of the composition window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.String">
            <summary>
              Gets or sets the string
            </summary>
            <value>
              A <b>string</b> indicates the composition string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ReadingString">
            <summary>
              Gets or sets the reading string
            </summary>
            <value>
              A <b>string</b> indicates the reading string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ResultString">
            <summary>
              Gets the result string
            </summary>
            <value>
              A <b>string</b> indicates the result string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ResultReadingString">
            <summary>
              Gets the result reading string
            </summary>
            <value>
              A <b>string</b> indicates the result reading string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Attributes">
            <summary>
              Gets the ime composition attributes.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute"/> array indicates the attributes of the composition string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ReadingAttributes">
            <summary>
              Gets the ime composition reading attributes.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionAttribute"/> array indicates the attributes of the reading string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Clauses">
            <summary>
              Gets the ime composition clauses.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause"/> array indicates the clauses of the composition string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ReadingClauses">
            <summary>
              Gets the ime composition reading clauses.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause"/> array indicates the clauses of the reading string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ResultClauses">
            <summary>
              Gets the ime composition result clauses.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause"/> array indicates the clauses of the result string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ResultReadingClauses">
            <summary>
              Gets the ime composition result reading clauses.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionClause"/> array indicates the clauses of the result reading string.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Float">
            <summary>
              Makes composition sit at a floating window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.GetCompositionString(System.Int32)">
            <summary>
              Gets the composition string by given index.
            </summary>
            <param name="index">
              An <b>int</b> indicates the composition string.
            </param>
            <returns>
              A <b>string</b> is the result.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.GetCompositionAttributes(System.Int32)">
            <summary>
              Gets the composition attributes by given index.
            </summary>
            <param name="index">
              An <b>int</b> indicates the composition string.
            </param>
            <returns>
              A <b>ImeCompositionAttribute</b> array is the result.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.GetCompositionClauses(System.Int32)">
            <summary>
              Gets the composition clauses by given index.
            </summary>
            <param name="index">
              An <b>int</b> indicates the composition string.
            </param>
            <returns>
              A <b>ImeCompositionClause</b> array is the result.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Cancel">
            <summary>
              Clear the composition string and set the status to no composition string
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Complete">
            <summary>
              Set the composition string as the result string.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Convert">
            <summary>
              Convert the composition string.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Revert">
            <summary>
              Cancel the current composition string and set the composition string to be the unconverted string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.LogicalFont">
            <summary>
              Gets or sets the logical font.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.CanReconvert">
            <summary>
              A <b>bool</b> indicates whether the ime can do reconverting now.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Reconvert(System.String)">
            <summary>
              Provides support for IME reconversion.
            </summary>
            <param name="convertString">
              A <b>string</b> to be reconverted.
            </param>
            <returns>
              Return a <b>bool</b> indicates whether the reconverting is successful.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.ProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message coming from the ime status window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the ime message.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.PositionWindow(System.Drawing.Point)">
            <summary>
              Adjustes the window position.
            </summary>
            <param name="position">
              A <see cref="T:System.Drawing.Point"/> indicates the position of the window.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.PositionWindow(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
              Adjustes the window position, and workArea.
            </summary>
            <param name="position">
              A <see cref="T:System.Drawing.Point"/> indicates the position of the window.
            </param>
            <param name="workArea">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the work area of the window.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Opened">
            <summary>
               When the ime window is opened.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.RaiseOpenedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Opened"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Closed">
            <summary>
              When the ime window is closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.RaiseClosedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.Closed"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.RaiseStartCompositionEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.StartComposition"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.StartComposition">
            <summary>
              Raised immediately before the ime generates the composition string as a result of a keystroke.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.RaiseEndCompositionEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.EndComposition"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.EndComposition">
            <summary>
              Raised when the IME ends composition.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.RaiseCompositionFullEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.CompositionFull"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.CompositionFull">
            <summary>
              Raised when the IME window finds no space to extend the area for the composition window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.RaiseCompositionChanged(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.CompositionChanged"/> event.
            </summary>
            <param name="e">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionChangedEventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow.CompositionChanged">
            <summary>
              Raised when the composition is changed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle">
            <summary>
              Defines the style of the candidate list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle.Unknown">
            <summary>
              Candidates are in a style other than listed here.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle.Read">
            <summary>
              Candidates are in same reading.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle.Code">
            <summary>
              Candidates are in a code range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle.Meaning">
            <summary>
              Candidates are in same meaning.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle.Radical">
            <summary>
              Candidates use same radical character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle.Stroke">
            <summary>
              Candidates are in same number of strokes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList">
            <summary>
              Defines a indicates the candidate list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList.Empty">
            <summary>
              Defines a empty <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList._style">
            <summary>
              Saves the date of the <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList.Style"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList._candidates">
            <summary>
              Saves the candidates.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle,System.String[])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList"/> class.
            </summary>
            <param name="style">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle"/> indicates the style.
            </param>
            <param name="candidates">
              A <b>string</b> array indicates the candidates.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList.Style">
            <summary>
              Gets the style of the candidate list.
            </summary>
            <value>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateListStyle"/> indicates the style.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList.Count">
            <summary>
              Gets the count of the candidates.
            </summary>
            <value>
              An <b>int</b> indicates the count of the candidates.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList.Item(System.Int32)">
            <summary>
              Gets the candidate at given index.
            </summary>
            <param name="index">
              An <b>int</b> indicates the given index.
            </param>
            <returns>
              A <b>string</b> indicates the candidate.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow">
            <summary>
              Defines the ime candidate window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow._index">
            <summary>
              Saves the index of the candidate window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow"/> class.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the device.
            </param>
            <param name="index">
              An <b>int</b> indicates the index of the candidate window.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Index">
            <summary>
              Gets the index of the candidate window.
            </summary>
            <value>
              An <see cref="T:System.Int32"/> indicates the index of the candidate window. The valid range is 0-3.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Position">
            <summary>
              Gets or sets the position of the candidate window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> indicates the position of the candidate window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Visible">
            <summary>
              Gets or sets the visible of the candidate window.
            </summary>
            <value>
              A <b>bool</b> indicats whether the candidate window is visible.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Candidates">
            <summary>
              Gets the candidate list of the candidate window.
            </summary>
            <value>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateList"/> contains the candidates.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.PageStart">
            <summary>
              Gets the page start.
            </summary>
            <value>
              An <b>int</b> indicates the page start.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.PageSize">
            <summary>
              Gets the page size.
            </summary>
            <value>
              An <b>int</b> indicates the page size.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.SelectedCandidateIndex">
            <summary>
              Gets or sets the selected candidate index.
            </summary>
            <value>
              An <b>int</b> indicates the index of the selected candidate.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.GetCandidateInfo(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              A private methods used get the information from the system.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.ProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message coming from the ime status window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the ime message.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Opening">
            <summary>
               When the ime window is about created.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.RaiseOpeningEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Opening"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Closing">
            <summary>
              When the ime window is about closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.RaiseClosingEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.Closing"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.RaiseContentChangingEvent(System.EventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.ContentChanging"/> event.
            </summary>
            <param name="e">
              A <see cref="T:System.EventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow.ContentChanging">
            <summary>
              Raised when an ime is about to change the content of the candidate window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs">
            <summary>
              Define a class used for the arguments of the <b>ImeCandidateWindowsEventHandler</b> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs._indices">
            <summary>
              Saves the index of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs.#ctor(System.Int32[])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs"/> class.
            </summary>
            <param name="indices">
              An <b>int</b> array indicates the indices of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow"/>.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs.Indices">
            <summary>
              Gets an <b>int</b> array indicating the indices of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow"/>.
            </summary>
            <value>
              An <b>int</b> array indicating the indices of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow"/>.
            </value>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventHandler">
            <summary>
              Defines a the deleget for handling the ime events of ImeCandidateWindows event.
            </summary>
            <param name="sender">
              A <b>object</b> indicates the event sender.
            </param>
            <param name="e">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection">
            <summary>
              Defines the collection of the candidate window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection._ime">
            <summary>
              Saves the device of the ime window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection"/> class.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the device.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.Item(System.Int32)">
            <summary>
              Gets the candidate window by the given index.
            </summary>
            <param name="index">
              An <b>int</b> indicates the index.(0-3)
            </param>
            <returns>
              Returns an <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindow"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.ProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message coming from the ime window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the ime message.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.RaiseCandidateWindowsOpeningEvent(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.CandidateWindowsOpening"/> event.
            </summary>
            <param name="e">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.CandidateWindowsOpening">
            <summary>
               When the ime candidate windows are about opened.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.RaiseCandidateWindowsClosingEvent(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.CandidateWindowsClosing"/> event.
            </summary>
            <param name="e">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs"/> indicates the argument of the event.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.CandidateWindowsClosing">
            <summary>
              When the ime candidate windows is closing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.RaiseCandidateWindowsContentChangingEvent(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.CandidateWindowsContentChanging"/> event.
            </summary>
            <param name="e">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowsEventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection.CandidateWindowsContentChanging">
            <summary>
              Raised when an ime is about to change the content of the candidate window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeMessageProcessor">
            <summary>
              Defines a class used to listen the message of ime host.
            </summary>
            <remarks>
              Just used to dispatch the message to Ime.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeMessageProcessor._ime">
            <summary>
              Saves the ime device.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeMessageProcessor.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeMessageProcessor"/> class.
            </summary>
            <param name="device">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the device.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeMessageProcessor.PreProcess(System.Windows.Forms.Message@)">
            <summary>
              Process the message before other processors.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeMessageProcessor.PostProcess(System.Windows.Forms.Message@)">
            <summary>
              Process the message after other processors.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._window">
            <summary>
              Saves the window that uses the ime device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._imeType">
            <summary>
              Saves the type of the ime device.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._disposed">
            <summary>
              A <b>bool</b> indicates whether the device is disposed. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._processor">
            <summary>
              A processor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._statusWindow">
            <summary>
              Saves the status window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._compositionWindow">
            <summary>
              Saves the composition window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._candidateWindows">
            <summary>
              Saves the candidate windows.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._candidateWindowCollection">
            <summary>
              Saves the candidate window collection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.Ime._disabledImeContext">
            <summary>
              Saves the ime context.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> class.
            </summary>
            <param name="imeHost">
              An <see cref="T:System.Windows.Forms.IWin32Window"/> indicates the window that uses the ime device.
            </param>
            <remarks>
              The device type is ImeType.Unidirection.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.#ctor(System.Windows.Forms.IWin32Window,C1.Win.C1Input.GrapeCity.Framework.Input.ImeType)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> class.
            </summary>
            <param name="imeHost">
              An <see cref="T:System.Windows.Forms.IWin32Window"/> indicates the window that uses the ime device.
            </param>
            <param name="imeType">
              An <see cref="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeType"/> indicates the device type user hoped.
            </param>
            <remarks>
              If can created the device as the special type, is decided by imhost.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeType">
            <summary>
              Gets the type of the ime device.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Language">
            <summary>
              Gets or sets the language of the ime device.
            </summary>
            <value>
              A <see cref="T:System.Windows.Forms.InputLanguage"/> indicates the language of ime device.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.IsActive">
            <summary>
              Gets a <b>bool</b> indicates the ime device is active.
            </summary>
            <value>
              A <b>bool</b> indicates whether the ime device is active.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.IsEditing">
            <summary>
              Gets a flag indicates whether the ime is opening and has inputed string.
            </summary>
            <value>
              <b>true</b>, indicates the ime is opening and has inputed string, otherwise, <b>false</b>;
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.StatusWindow">
            <summary>
              Gets the status window of current ime device.
            </summary>
            <value>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeStatusWindow"/> indicates the status window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.CompositionWindow">
            <summary>
              Gets the composition window of current ime device.
            </summary>
            <value>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCompositionWindow"/> indicates the composition window.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.CandidateWindows">
            <summary>
              Gets the collection of candiate window.
            </summary>
            <value>
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeCandidateWindowCollection"/> indicates the candidate windows.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Enable">
            <summary>
              Gets or sets the enable status of the ime device.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ConvertToConversionList(System.String)">
            <summary>
              Fetch the result strings from a specified reading string.
            </summary>
            <param name="readingString">
              A <b>string</b> which represents the reading string.
            </param>
            <returns>
              A string array which represents the candidate list.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ConvertToReverseConversionList(System.String)">
            <summary>
              Fecth reading strings from a specified result string.
            </summary>
            <param name="resultString">
              A <b>string</b> which represents the result string.
            </param>
            <returns>
              A string array which represents the reading strings.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ConvertToConversionListImplementation(System.String,System.Boolean)">
            <summary>
              Wraps the API method ImmGetConversionList to provide the function
              getting candidate list from a specified reading string or getting
              reading strings from a specified result string.
            </summary>
            <param name="source">
              A source <b>string</b> which can be result string or reading string.
            </param>
            <param name="reverse">
              A flag which indicates whether to get the candidate list from a
              reading string or to get the reading strings from a result string.
            </param>
            <returns>
              A string array that contains the candidate list or reading strings.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.SimulateHotKey(C1.Win.C1Input.GrapeCity.Framework.Input.ImeHotKeys)">
            <summary>
              Simulates the specified IME hot key, causing the same response as if the user 
              had pressed the hot key in the related window.
            </summary>
            <param name="hotKey">
              Specifies the identifier of the IME hot key
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.PerProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message before other processors.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
            <returns>
              A <b>bool</b> value indicates whether the message will be processed by other processors.
              <b>true</b> the message will not be process any.
              <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.PostProcessMessage(System.Windows.Forms.Message@)">
            <summary>
              Process the message after other processors.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/> indicates the window message.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Dispose">
            <summary>
              Dispose the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.RaiseActivatedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Activated"/> event.
            </summary>
            <param name="e">
              An <see cref="T:System.EventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Activated">
            <summary>
              An event raised when the ime has been activated.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.RaiseDeactivatedEvent(System.EventArgs)">
            <summary>
              Raise the <see cref="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Deactivated"/> event.
            </summary>
            <param name="e">
              An <see cref="T:System.EventArgs"/> indicates the event arguments.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.GrapeCity.Framework.Input.Ime.Deactivated">
            <summary>
              An event raised when the ime has been deactivated.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode">
            <summary>
              Determines how the IME should handle sentences.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode.Inherit">
            <summary>
              Inherit the IME sentence mode of the parent control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode.NoControl">
            <summary>
              Do not control the IME sentence mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode.Normal">
            <summary>
              Use phrase information to predict the next character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode.BiasForNames">
            <summary>
              The IME uses plural clause information to carry out conversion processing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode.BiasForSpeech">
            <summary>
              The IME uses conversation mode. This is useful for chat applications.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode.Direct">
            <summary>
              No information for sentence.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ConvertMode">
            <summary>
              Determines how to handle the IME candidate window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ConvertMode.NoCandidate">
            <summary>
              Clear the composition string and set the status to no composition string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ConvertMode.ShowCandidate">
            <summary>
              Convert the composition string and show the candidate window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ConvertMode.FirstInCandidate">
            <summary>
              Convert the composition string and pick the first in the candidate window.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper">
            <summary>
              A helper class is used to provides some the helps.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion">
            <summary>
              Defines a class used to convert ImeMode to ImeConversionMode or convert ImeConversionMode to ImeMode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.JapaneseTable">
            <summary>
              Defines a Japanese conversion table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.KoreanTable">
            <summary>
              Defines a Korean conversion table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.ChineseTable">
            <summary>
              Defines a Chinese conversion table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.UnsupportedTable">
            <summary>
              Defines a empty conversion table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.InputLanguageTable">
            <summary>
              Gets the conversion table by current input language.
            </summary>
            <value>
              The conversion table based on the language.
            </value>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion._imeModeConversionBits">
            <summary>
              Saves the conversion bits.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.ImeModeConversionBits">
            <summary>
              Gets the conversion bigs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.#ctor(C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode,C1.Win.C1Input.GrapeCity.Framework.Input.Ime.ImeConversionMode)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.SetBits">
            <summary>
              Defines the bits needed to be set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.ImeModeConversion.ClearBits">
            <summary>
              Defines the bits needed to be cleared.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.GetImeMode(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Gets the IME mode from the ime device..
            </summary>
            <param name="ime">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <returns>
              The ImeMode status.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.SetImeMode(C1.Win.C1Input.GrapeCity.Framework.Input.Ime,System.Windows.Forms.ImeMode)">
            <summary>
              Sets the ime mode to the ime device.
            </summary>
            <param name="ime">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <param name="imeMode">
              A <see cref="T:System.Windows.Forms.ImeMode"/> indicates the ime mode.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.SetImeSentenceMode(C1.Win.C1Input.GrapeCity.Framework.Input.Ime,C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode)">
            <summary>
              Set the special sentence mode to ime device.
            </summary>
            <param name="ime">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <param name="sentenceMode">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode"/> indicates the sentence mode.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.GetImeSentenceMode(C1.Win.C1Input.GrapeCity.Framework.Input.Ime)">
            <summary>
              Get the sentence mode from the ime device.
            </summary>
            <param name="ime">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <returns>
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.ImeSentenceMode"/> indicates the sentence mode.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Framework.Input.ImeHelper.Convert(C1.Win.C1Input.GrapeCity.Framework.Input.Ime,System.String,C1.Win.C1Input.GrapeCity.Framework.Input.ConvertMode)">
            <summary>
              Converts the specified string and determines how the candidate
              window should appear.
            </summary>
            <param name="ime">
              An <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.Ime"/> indicates the ime device.
            </param>
            <param name="convertString">
              A string to convert.
            </param>
            <param name="mode">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Framework.Input.ConvertMode"/> enumeration that represents how
              to process the candidate window.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods">
            <summary>
              Defines the native methods based on Win32 SDK.
            </summary>
            <remarks>
              The NativeMethods class defines some basic data structures 
              and constants, which is given in Win32 SDK.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_NULL">
            <summary>
             Windows Message.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SIZE">
            <summary>
              The SIZE structure specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SIZE.cx">
            <summary>
              Specifies the rectangle's width. The units depend on which function uses this.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SIZE.cy">
            <summary>
              Specifies the rectangle's height. The units depend on which function uses this.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the SIZE structure.
            </summary>
            <param name="width">Specifies the size's width.</param>
            <param name="height">Specifies the size's height.</param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.LOGFONT.Equals(C1.Win.C1Input.GrapeCity.Platform.NativeMethods.LOGFONT)">
            <summary>
              Add this methods in order to recudce the warning count of Fon32 class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MakeLong(System.UInt16,System.UInt16)">
            <summary>
            make long method.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KeyState(System.Windows.Forms.Keys)">
            <summary>
            KeyState, bool indicate pressed
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.LoWord(System.UInt32)">
            <summary>
            Get the lower word from a unsigned integer value.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <returns>The lower word as result.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.HiWord(System.UInt32)">
            <summary>
            Get the higher word from a unsigned integer value.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <returns>The higher word as result.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.LoWord(System.Int32)">
            <summary>
            Get the lower word from a integer value.
            </summary>
            <param name="value">The integer value.</param>
            <returns>The lower word as result.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.HiWord(System.Int32)">
            <summary>
            Get the higher word from a integer value.
            </summary>
            <param name="value">The integer value.</param>
            <returns>The higher word as result.</returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT">
            <summary>
              The POINT structure defines the x and y coordinates of a point.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT.X">
            <summary>
              Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT.Y">
            <summary>
              Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="x">
              Specifies the x-coordinate of the point.
            </param>
            <param name="y">
              Specifies the y-coordinate of the point.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT.#ctor(System.Drawing.Point)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="point">
              A point whith another type.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT">
            <summary>
              The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Left">
            <summary>
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Top">
            <summary>
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Right">
            <summary>
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Bottom">
            <summary>
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs the RECT structure.
            </summary>
            <param name="left">
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="top">
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="right">
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </param>
            <param name="bottom">
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
              Constructs the RECT structure.
            </summary>
            <param name="rectangle">
              Specifies the rectangle
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Offset(System.Int32,System.Int32)">
            <summary>
              Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">
              The horizontal offset.
            </param>
            <param name="y">
              The vertical offset.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Width">
            <summary>
              Gets the width.
            </summary>
            <value>
              The width of RECT.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT.Height">
            <summary>
              Gets the height.
            </summary>
            <value>
              The height of RECT.
            </value>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC">
            <summary>
              The TEXTMETRIC structure contains basic information about a physical font. 
              All sizes are specified in logical units; that is, they depend on 
              the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Height">
            <summary>
              Specifies the height (ascent + descent) of characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Ascent">
            <summary>
              Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Descent">
            <summary>
              Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.InternalLeading">
            <summary>
              Specifies the amount of leading (space) inside the bounds set by 
              the tmHeight member. Accent marks and other diacritical characters 
              may occur in this area. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.ExternalLeading">
            <summary>
              Specifies the amount of extra leading (space) that the application 
              adds between rows. Since this area is outside the font, it contains 
              no marks and is not altered by text output calls in either OPAQUE or 
              TRANSPARENT mode. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.AveCharWidth">
            <summary>
              Specifies the average width of characters in the font 
              (generally defined as the width of the letter x). This value 
              does not include the overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.MaxCharWidth">
            <summary>
              Specifies the width of the widest character in the font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Weight">
            <summary>
              Specifies the weight of the font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Overhang">
            <summary>
              Specifies the extra width per string that may be added to 
              some synthesized fonts. When synthesizing some attributes, 
              such as bold or italic, graphics device interface (GDI) or 
              a device may have to add width to a string on both a 
              per-character and per-string basis.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.DigitizedAspectX">
            <summary>
              Specifies the horizontal aspect of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.DigitizedAspectY">
            <summary>
              Specifies the vertical aspect of the device for which the font was designed. 
              The ratio of the tmDigitizedAspectX and tmDigitizedAspectY members is 
              the aspect ratio of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.FirstChar">
            <summary>
              Specifies the value of the first character defined in the font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.LastChar">
            <summary>
              Specifies the value of the last character defined in the font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.DefaultChar">
            <summary>
              Specifies the value of the character to be substituted for 
              characters not in the font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.BreakChar">
            <summary>
              Specifies the value of the character that will be used to 
              define word breaks for text justification.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Italic">
            <summary>
              Specifies an italic font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.Underlined">
            <summary>
              Specifies an underlined font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.StruckOut">
            <summary>
              Specifies a strikeout font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.PitchAndFamily">
            <summary>
              Specifies information about the pitch, the technology, 
              and the family of a physical font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC.CharSet">
            <summary>
              Specifies the character set of the font. The character set 
              can be one of the following values.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG">
            <summary>
              The MSG structure contains message information from a thread's message queue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.hWnd">
            <summary>
              Handle to the window whose window procedure receives the message.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.Message">
            <summary>
              Specifies the message identifier. Applications can only use the low word;
              the high word is reserved by the system.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.wParam">
            <summary>
              Specifies additional information about the message. The exact meaning
              depends on the value of the message member.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.lParam">
            <summary>
              Specifies additional information about the message. The exact meaning
              depends on the value of the message member.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.Time">
            <summary>
              Specifies the time at which the message was posted.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.Point_X">
            <summary>
              Specifies the cursor position, x direction in screen coordinates,
              when the message was posted.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG.Point_Y">
            <summary>
              Specifies the cursor position, y direction in screen coordinates,
              when the message was posted.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_COMMAND">
            <summary>
              The WM_COMMAND message is sent when the user selects a command 
              item from a menu, when a control sends a notification message 
              to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_USER">
            <summary>
              The WM_USER constant is used by applications to help define private 
              messages for use by private window classes, usually of the form 
              WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_SETFOCUS">
            <summary>
              The WM_SETFOCUS message is sent to a window after it has gained 
              the keyboard focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_KILLFOCUS">
            <summary>
              The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_KEYFIRST">
            <summary>
              This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_CHAR">
            <summary>
              The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by 
              the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_MDIACTIVATE">
            <summary>
              An application sends the WM_MDIACTIVATE message to a multiple-
              document interface (MDI) client window to instruct the client 
              window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_WINDOWPOSCHANGED">
            <summary>
              The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, 
              or place in the Z order has changed as a result of a call to the 
              SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_LBUTTONDOWN">
            <summary>
              The WM_LBUTTONDOWN message is posted when the user presses the left mouse button 
              while the cursor is in the client area of a window. If the mouse is not captured,
              the message is posted to the window beneath the cursor. Otherwise, the message is
              posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_LBUTTONDBCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, 
            the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_DESTROY">
            <summary>
              The WM_DESTROY message is sent when a window is being destroyed. 
              It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
              This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. 
              During the processing of the message, it can be assumed that all child windows still exist.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_SETREDRAW">
            <summary>
              An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn 
              or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_RBUTTONUP">
            <summary>
              The WM_RBUTTONUP is sent when the right mouse button is up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_MBUTTONUP">
            <summary>
              The WM_RBUTTONUP is sent when the right mouse button is up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_MOUSEACTIVATE">
             <summary>
            The framework calls this member function when the cursor is in an inactive window and the user presses a mouse button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_XBUTTONUP">
            <summary>
              The WM_XBUTTONUP is sent when the right mouse button is up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_THEMECHANGED">
            <summary>
             This messgae indicates the theme of current application is changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_CONTEXTMENU">
            <summary>
             This WM_CONTEXTMENU is sent when the control need show contextmenu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_CLEAR">
            <summary>
             This message indicates clear the selected text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WM_NCLBUTTONDOWN">
            <summary>
              This message indicates mouse left button down on NC area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.PM_NOREMOVE">
            <summary>
              Messages are not removed from the queue after processing by PeekMessage.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.LoIntPtrToInt(System.IntPtr)">
            <summary>
              Gets a int value from the IntPtr'LoWord.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.S_OK">
            <summary>
              Indicates the result is OK.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.S_FALSE">
            <summary>
              Indicates the reuslt has some problem.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TOOLINFO.targetHandle">
            <summary>
            The Handle of target control
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TOOLINFO.rect">
            <summary>
            The client rectangle of target control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WDD">
            <summary>
            Word Descriptor
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.WDDFLAG">
            <summary>
              implementation-defined
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.CharFormat2">
            <summary>
              The CharFormat2 sturcut. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.CHARFORMATA">
            <summary>
             The CHARFORMATA class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.ScrollBarTypes">
            <summary>
              The ScrollBarTypes enum.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.ScrollBarInfoFlags">
            <summary>
              The ScrollBarInfoFlags enum.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SCROLLINFO">
            <summary>
              The SCROLLINFO struct.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.EM_HIDESELECTION">
            <summary>
              This message is used for show selction text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.EM_SETCHARFORMAT">
            <summary>
              This message is used for set char format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.EM_GETCHARFORMAT">
            <summary>
              This message is used for get char format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.EM_GETPARAFORMAT">
            <summary>
              This message is used for get parafomat.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.PFA_LEFT">
            <summary>
              AlignmentLeft.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.PFA_RIGHT">
            <summary>
              AlignmentRight.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.PFA_CENTER">
            <summary>
              AlignmentCenter.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.PFM_STARTINDENT">
            ParaFormat        
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.InputScope">
            <summary>
              The inputScope enumeration contains values that specify which input scope(s) are applied to a given field.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.AsynchronousWindowPosition">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues, 
            the system posts the request to the thread that owns the window. This prevents the calling thread from 
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to 
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE 
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DoNotActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the 
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter 
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DoNotCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid 
            contents of the client area are saved and copied back into the client area after the window is sized or 
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.IgnoreMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DoNotChangeOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DoNotRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent 
            window uncovered as a result of the window being moved. When this flag is set, the application must 
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DoNotReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.DoNotSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.IgnoreResize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.IgnoreZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SetWindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KBDLLHOOKSTRUCT">
            <summary>
              The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KBDLLHOOKSTRUCT.vkCode">
            <summary>
              Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KBDLLHOOKSTRUCT.scanCode">
            <summary>
              Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KBDLLHOOKSTRUCT.flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state 
            flag. This member is specified as follows. An application can use the following values 
            to test the keystroke flags. Value Purpose 
              LLKHF_EXTENDED Test the extended-key flag.  
              LLKHF_INJECTED Test the event-injected flag.  
              LLKHF_ALTDOWN Test the context code.  
              LLKHF_UP Test the transition-state flag.  
              0  : Specifies whether the key is an extended key, such as a function key or a key on 
                   the numeric keypad. The value is 1 if the key is an extended key; otherwise, it is 0.
              1-3: Reserved.
              4  : Specifies whether the event was injected. The value is 1 if the event was injected; 
                   otherwise, it is 0.
              5  : Specifies the context code. The value is 1 if the ALT key is pressed; otherwise, it is 0.
              6  : Reserved.
              7  : Specifies the transition state. The value is 0 if the key is pressed and 1 if it is 
                   being released.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KBDLLHOOKSTRUCT.time">
            <summary>
              Specifies the time stamp for this message, equivalent to what GetMessageTime would return for this message.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.KBDLLHOOKSTRUCT.dwExtraInfo">
            <summary>
              Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSLLHOOKSTRUCT">
            <summary>
              The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSLLHOOKSTRUCT.pt">
            <summary>
              Specifies a POINT structure that contains the x- and y-coordinates of the cursor, 
              in screen coordinates.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSLLHOOKSTRUCT.mouseData">
            <summary>
              If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel 
              delta. The low-order word is reserved. A positive value indicates that the wheel 
              was rotated forward, away from the user; a negative value indicates that the wheel 
              was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, 
              which is 120. 
              If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, 
              WM_NCXBUTTONUP, or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button 
              was pressed or released, and the low-order word is reserved. This value can be one 
              or more of the following values. Otherwise, mouseData is not used. 
              
              XBUTTON1
                The first X button was pressed or released.
              XBUTTON2
                The second X button was pressed or released.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSLLHOOKSTRUCT.flags">
            <summary>
              Specifies the event-injected flag. An application can use the following value to 
              test the mouse flags. 
                  Value                     Purpose 
              LLMHF_INJECTED            Test the event-injected flag.  
              0     :  Specifies whether the event was injected. The value is 1 if the event 
                       was injected; otherwise, it is 0.
              1-15  :  Reserved.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSLLHOOKSTRUCT.time">
            <summary>
              Specifies the time stamp for this message. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSLLHOOKSTRUCT.dwExtraInfo">
            <summary>
              Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods">
            <summary>
              Defines the methods based on Win32 API library.
            </summary>
            <remarks>
              The UnsafeNativeMethods class defines functions, which is 
              given in Win32 SDK.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ShowWindow(System.IntPtr,System.UInt32)">
            <summary>
              The ShowWindow Function.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.DrawFrameControl(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@,System.Int32,System.Int32)">
            <summary>
              The DrawFrameControl function draws a frame control of the specified type and style.
            </summary>
            <param name="hdc">
              Handle to the device context of the window in which to draw the control.
            </param>
            <param name="rect">
              Pointer to a RECT structure that contains the logical coordinates of the 
              bounding rectangle for frame control.
            </param>
            <param name="type">
              Specifies the type of frame control to draw.
            </param>
            <param name="state">
              the initial state of the frame control.
            </param>
            <returns>
              If the function succeeds, the return value is nonzero.
              If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@)">
            <summary>
              Draws the background image defined by the visual style for the specified control part.
            </summary>
            <param name="hTheme">
              [in] Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.
            </param>
            <param name="hDC">
              [in] Handle to a device context (HDC) used for drawing the theme-defined background image.
            </param>
            <param name="partID">
              [in] Value of type int that specifies the part to draw. See Parts and States.
            </param>
            <param name="stateID">
              [in] Value of type int that specifies the state of the part to draw. See Parts and States.
            </param>
            <param name="rect">
              [in] Pointer to a RECT structure that contains the rectangle, in logical coordinates, 
              in which the background image is drawn. 
            </param>
            <param name="clipRect">
              [in] Pointer to a RECT structure that contains a clipping rectangle. This parameter may be set to NULL.
            </param>
            <returns>
              Returns S_OK if successful, or an error value otherwise.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.DrawThemeParentBackground(System.IntPtr,System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@)">
            <summary>
              Draws the part of a parent control that is covered by a partially-transparent or alpha-blended child control.
            </summary>
            <param name="hWnd">
              [in] Handle of the child control.
            </param>
            <param name="hDC">
              [in] Handle to the child control's device context (DC).
            </param>
            <param name="rect">
              [in] Pointer to a RECT structure that defines the area to be drawn. 
              The rectangle is in the child window's coordinates. This parameter may be set to NULL.
            </param>
            <returns>
              Returns S_OK if successful, or an error value otherwise.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.IsThemeBackgroundPartiallyTransparent(System.IntPtr,System.Int32,System.Int32)">
            <summary>
              Retrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces.
            </summary>
            <param name="hTheme">
              [in] Handle to a window's specified theme data. Use OpenThemeData to create an HTHEME.
            </param>
            <param name="partID">
              [in] Value of type int that specifies the part. See Parts and States.
            </param>
            <param name="stateID">
              [in] Value of type int that specifies the state of the part. See Parts and States.
            </param>
            <returns>
              TRUE : The theme-specified background for a particular iPartId 
              and iStateId has transparent pieces or alpha-blended pieces.
              FALSE : The theme-specified background for a particular iPartId 
              and iStateId does not have transparent pieces or alpha-blended pieces. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.LoadImage(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             This function loads an icon, cursor, or bitmap.
             </summary>
             <param name="hinst">
               Handle to an instance of the module that contains the image to be loaded. 
             </param>
             <param name="lpszName">Pointer to a null-terminated string that contains the name of the image resource 
             in the hinst module that identifies the image to load.</param>
             <param name="uType">Specifies the type of image to be loaded. This parameter can be one of the following 
             values.</param>
             <param name="cxDesired">
               Specifies the width, in pixels, of the icon or cursor. If this parameter is zero, the function uses the 
             SM_CXICON or SM_CXCURSOR system metric value to set the width. If uType is IMAGE_BITMAP, this parameter 
             must be zero.
             </param>
             <param name="cyDesired">
               Specifies the height, in pixels, of the icon or cursor. If this parameter is zero, the function uses the 
             SM_CYICON or SM_CYCURSOR system metric value to set the height. If uType is IMAGE_BITMAP, this parameter 
             must be zero.
             </param>
             <param name="fuLoad">
               Set to zero. 
               Windows CE behaves as though the LR_DEFAULTCOLOR and LR_DEFAULTSIZE values are set. LR_DEFAULTCOLOR 
             means not monochrome. LR_DEFAULTSIZE means that the system uses the width or height specified by the system 
             metric values for cursors or icons if the cxDesired or cyDesired values are set to zero. If the resource 
             contains multiple images, the function uses the size of the first image.
             </param>
             <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ValidateRgn(System.IntPtr,System.IntPtr)">
            <summary>
              The ValidateRgn function validates the client area within a region by removing the region from the current update region of the specified window. 
            </summary>
            <param name="HWnd">
              Handle to the window whose update region is to be modified. 
            </param>
            <param name="hRgn">
              Handle to a region that defines the area to be removed from the update region. If this parameter is NULL, the entire client area is removed.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetLayeredWindowAttributes(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
              The SetLayeredWindowAttributes function sets the opacity and transparency 
              color key of a layered window.
            </summary>
            <param name="hwnd">
              Handle to the layered window.
            </param>
            <param name="crKey">
              COLORREF structure that specifies the transparency color key to be used 
              when composing the layered window. All pixels painted by the window in 
              this color will be transparent.
            </param>
            <param name="bAlpha">
              Alpha value used to describe the opacity of the layered window.
            </param>
            <param name="dwFlags">
              Specifies an action to take.
            </param>
            <returns>
              If the function succeeds, the return value is nonzero. 
              If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetStretchBltMode(System.IntPtr,System.Int32)">
            <summary>
            Sets the stretch BLT mode.
            </summary>
            <param name="hdc">The HDC.</param>
            <param name="stretchMode">The stretch mode.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>The BitBlt Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>The StretchBlt Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>The SendMessage Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.IsWindow(System.IntPtr)">
            <summary>The IsWindow Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>The SetWindowPos Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.DestroyWindow(System.IntPtr)">
            <summary>The DestroyWindow Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetCapture(System.IntPtr)">
            <summary>The SetCapture Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ReleaseCapture">
            <summary>The ReleaseCapture Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.InvalidateRect(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@,System.Boolean)">
            <summary>The InvalidateRect Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.InvalidateRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>The InvalidateRgn Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetTextColor(System.IntPtr,System.Int32)">
            <summary>The SetTextColor Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetTextColor(System.IntPtr)">
            <summary>The GetTextColor Function</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetBkColor(System.IntPtr,System.Int32)">
            <summary>The SetBkColor Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetBkMode(System.IntPtr,System.Int32)">
            <summary>The SetBKMode Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetBkColor(System.IntPtr)">
            <summary>The GetBkColor Function</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.RealChildWindowFromPoint(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT)">
            <summary>
            Reals the child window from point.
            </summary>
            <param name="hwndParent">The HWND parent.</param>
            <param name="pt">The point.</param>
            <returns>the handle at the point.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GradientFill(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TRIVERTEX[],System.Int32,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.GRADIENT_RECT[],System.Int32,System.Int32)">
            <summary>The GradientFill Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GradientFill(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TRIVERTEX[],System.Int32,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.GRADIENT_TRIANGLE[],System.Int32,System.Int32)">
            <summary>The GradientFill Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The CreateRectRgn Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetClipRgn(System.IntPtr,System.IntPtr)">
            <summary>The GetClipRgn Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SelectClipRgn(System.IntPtr,System.IntPtr)">
            <summary>The SelectClipRgn Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.OpenThemeData(System.IntPtr,System.String)">
            <summary>The OpenThemeData Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.CloseThemeData(System.IntPtr)">
            <summary>The CloseThemeData Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.IsThemeActive">
            <summary>The IsThemeActive Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SystemParametersInfo(System.UInt32,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>The SystemParametersInfo Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetDC(System.IntPtr)">
            <summary>The GetDC Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.PatBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            PatBlt method.
            </summary>
            <param name="hdc"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="rop"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetScrollInfo(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.ScrollBarTypes,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.SCROLLINFO@)">
            <summary>
              The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, 
              the page size, and the position of the scroll box (thumb).
            </summary>
            <param name="hWnd">
              [in] Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the fnBar parameter.
            </param>
            <param name="fnBar">
              [in] Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values. 
              SB_CTL
                Retrieves the parameters for a scroll bar control. The hwnd parameter must be the handle to the scroll bar control. 
              SB_HORZ
                Retrieves the parameters for the window's standard horizontal scroll bar. 
              SB_VERT
                Retrieves the parameters for the window's standard vertical scroll bar. 
            </param>
            <param name="lpsi">
              [in, out] Pointer to a SCROLLINFO structure. Before calling GetScrollInfo, set the cbSize member to sizeof(SCROLLINFO), 
              and set the fMask member to specify the scroll bar parameters to retrieve.
              Before returning, the function copies the specified parameters to the appropriate members of the structure.
              The fMask member can be one or more of the following values.
              SIF_PAGE
                Copies the scroll page to the nPage member of the SCROLLINFO structure pointed to by lpsi.
              SIF_POS
                Copies the scroll position to the nPos member of the SCROLLINFO structure pointed to by lpsi.
              SIF_RANGE
                Copies the scroll range to the nMin and nMax members of the SCROLLINFO structure pointed to by lpsi.
              SIF_TRACKPOS
                Copies the current scroll box tracking position to the nTrackPos member of the SCROLLINFO structure pointed to by lpsi
            </param>
            <returns>
              If the function retrieved any values, the return value is nonzero.
              If the function does not retrieve any values, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetFocus(System.IntPtr)">
            <summary>The SetFocus Function.</summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SendMessageA(System.IntPtr,System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>
              The SendMessage function sends the specified message to a window or windows. 
              It calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
              [in] Handle to the window whose window procedure will receive the message. 
              If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system,
              including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
              but the message is not sent to child windows.
            </param>
            <param name="msg">
              [in] Specifies the message to be sent.
            </param>
            <param name="wParam">
              [in] Specifies additional message-specific information.
            </param>
            <param name="lParam">
              [in] Specifies additional message-specific information.
            </param>
            <returns>
              The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SendMessageA(System.IntPtr,System.Int32,System.Int32,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.CharFormat2@)">
            <summary>
              The SendMessage function sends the specified message to a window or windows. 
              It calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
              [in] Handle to the window whose window procedure will receive the message. 
              If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system,
              including disabled or invisible unowned windows, overlapped windows, and pop-up windows; 
              but the message is not sent to child windows.
            </param>
            <param name="Msg">
              [in] Specifies the message to be sent.
            </param>
            <param name="wParam">
              [in] Specifies additional message-specific information.
            </param>
            <param name="lParam">
              [in] Specifies additional message-specific information.
            </param>
            <returns>
              The return value specifies the result of the message processing; it depends on the message sent.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.LockWindowUpdate(System.IntPtr)">
            <summary>
              The LockWindowUpdate function disables or enables drawing in the specified window. Only one window can be locked at a time. 
            </summary>
            <param name="hWndLock">
              [in] Specifies the window in which drawing will be disabled. If this parameter is NULL, drawing in the locked window is enabled. 
            </param>
            <returns>
              If the function succeeds, the return value is nonzero.
              If the function fails, the return value is zero, indicating that an error occurred or another window was already locked. 
              Windows NT/2000/XP: To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindow(System.IntPtr,System.UInt32)">
            <summary>
              The GetWindow function retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window. 
            </summary>
            <param name="hWnd">
              [in] Handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter. 
            </param>
            <param name="uCmd">
             [in] Specifies the relationship between the specified window and the window whose handle is to be retrieved. This parameter can be one of the following values. 
             GW_CHILD
               The retrieved handle identifies the child window at the top of the Z order, if the specified window is a parent window;
               otherwise, the retrieved handle is NULL. The function examines only child windows of the specified window. It does not examine descendant windows.
             GW_ENABLEDPOPUP
               Windows 2000/XP: The retrieved handle identifies the enabled popup window owned by the specified window (the search uses the first such window found using GW_HWNDNEXT);
               otherwise, if there are no enabled popup windows, the retrieved handle is that of the specified window
             GW_HWNDFIRST
               The retrieved handle identifies the window of the same type that is highest in the Z order. If the specified window is a topmost window, the handle identifies the topmost window that is highest in the Z order.
               If the specified window is a top-level window, the handle identifies the top-level window that is highest in the Z order. 
               If the specified window is a child window, the handle identifies the sibling window that is highest in the Z order.
             GW_HWNDLAST
               The retrieved handle identifies the window of the same type that is lowest in the Z order.
               If the specified window is a topmost window, the handle identifies the topmost window that is lowest in the Z order.
               If the specified window is a top-level window, the handle identifies the top-level window that is lowest in the Z order. 
               If the specified window is a child window, the handle identifies the sibling window that is lowest in the Z order.
             GW_HWNDNEXT
               The retrieved handle identifies the window below the specified window in the Z order. 
               If the specified window is a topmost window, the handle identifies the topmost window below the specified window. 
               If the specified window is a top-level window, the handle identifies the top-level window below the specified window. 
               If the specified window is a child window, the handle identifies the sibling window below the specified window.
             GW_HWNDPREV
               The retrieved handle identifies the window above the specified window in the Z order.
               If the specified window is a topmost window, the handle identifies the topmost window above the specified window. 
               If the specified window is a top-level window, the handle identifies the top-level window above the specified window. 
               If the specified window is a child window, the handle identifies the sibling window above the specified window.        ///
             GW_OWNER
               The retrieved handle identifies the specified window's owner window, if any. For more information, see Owned Windows. 
            </param>
            <returns>
               If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ImmIsIME(System.IntPtr)">
            <summary>
              The ImmIsIME function determines whether the specified input locale has an IME.
            </summary>
            <param name="hkl">
              Input locale identifier.
            </param>
            <returns>
              If the specified hKL has an IME, the return value is a nonzero value.
              Otherwise the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetKeyboardLayout(System.Int32)">
            <summary>
              The GetKeyboardLayout function retrieves the active input locale identifier 
              (formerly called the keyboard layout) for the specified thread. If the idThread 
              parameter is zero, the input locale identifier for the active thread is returned.
            </summary>
            <param name="idThread">
              Identifies the thread to query or is zero for the current thread.
            </param>
            <returns>
              The return value is the input locale identifier for the thread. The low word 
              contains a Language Identifier for the input language and the high word 
              contains a device handle to the physical layout of the keyboard.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ImmGetDefaultIMEWnd(System.IntPtr)">
            <summary>
              The ImmGetDefaultIMEWnd function retrieves the default window handle 
              for the IME class.
            </summary>
            <param name="hWnd">
              Handle to the window for the application.
            </param>
            <returns>
              If the function succeeds, the return value is the default window handle 
              to the IME class. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.FindWindow(System.String,System.String)">
            <summary>
              The FindWindow function retrieves a handle to the top-level window whose 
              class name and window name match the specified strings. This function 
              does not search child windows. This function does not perform a case-
              sensitive search.
            </summary>
            <param name="lpClassName">
              Pointer to a null-terminated string that specifies the class name or 
              a class atom created by a previous call to the RegisterClass or 
              RegisterClassEx function. The atom must be in the low-order word of 
              lpClassName; the high-order word must be zero. 
              If lpClassName points to a string, it specifies the window class name. 
              The class name can be any name registered with RegisterClass or 
              RegisterClassEx, or any of the predefined control-class names. 
              If lpClassName is NULL, it finds any window whose title matches the 
              lpWindowName parameter.
            </param>
            <param name="lpWindowName">
              Pointer to a null-terminated string that specifies the window name 
              (the window's title). If this parameter is NULL, all window names match.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.IsWindowVisible(System.IntPtr)">
            <summary>
              The IsWindowVisible function retrieves the visibility state of the 
              specified window.
            </summary>
            <param name="hWnd">
              Handle to the window to test.
            </param>
            <returns>
              If the specified window, its parent window, its parent's parent window, 
              and so forth, have the WS_VISIBLE style, the return value is nonzero. 
              Otherwise, the return value is zero. 
              Because the return value specifies whether the window has the WS_VISIBLE 
              style, it may be nonzero even if the window is totally obscured by other 
              windows.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
              The PostMessage function places (posts) a message in the message queue 
              associated with the thread that created the specified window and returns 
              without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
              Handle to the window whose window procedure is to receive the message. 
              The following values have special meanings.
              HWND_BROADCAST
                The message is posted to all top-level windows in the system, including 
                disabled or invisible unowned windows, overlapped windows, and pop-up 
                windows. The message is not posted to child windows.
              NULL
                The function behaves like a call to PostThreadMessage with the dwThreadId 
                parameter set to the identifier of the current thread.
            </param>
            <param name="message">
              Specifies the message to be posted.
            </param>
            <param name="wparam">
              Specifies additional message-specific information.
            </param>
            <param name="lparam">
              Specifies additional message-specific information.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetFocus">
            <summary>
              The GetFocus function retrieves the handle to the window that has the keyboard 
              focus, if the window is attached to the calling thread's message queue.
            </summary>
            <returns>
              The return value is the handle to the window with the keyboard focus. 
              If the calling thread's message queue does not have an associated window 
              with the keyboard focus, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.IsChild(System.IntPtr,System.IntPtr)">
            <summary>
              The IsChild function tests whether a window is a child window or descendant 
              window of a specified parent window. A child window is the direct descendant 
              of a specified parent window if that parent window is in the chain of parent 
              windows; the chain of parent windows leads from the original overlapped or 
              pop-up window to the child window.
            </summary>
            <param name="hWndParent">
              Handle to the parent window.
            </param>
            <param name="hWnd">
              Handle to the window to be tested.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.keybd_event(System.Byte,System.Byte,System.UInt32,System.IntPtr)">
            <summary>
              The keybd_event function synthesizes a keystroke. The system can use such a 
              synthesized keystroke to generate a <b>WM_KEYUP</b> or <b>WM_KEYDOWN</b> message. 
              The keyboard driver's interrupt handler calls the keybd_event function.
            </summary>
            <param name="bVk">
              Specifies a virtual-key code. The code must be a value in the range 1 to 254.
            </param>
            <param name="bScan">
              This parameter is not used.
            </param>
            <param name="dwFlags">
              Specifies various aspects of function operation. This parameter can be one 
              or more of the following values. 
              KEYEVENTF_EXTENDEDKEY
                If specified, the scan code was preceded by a prefix byte having the value 0xE0 (224).
              KEYEVENTF_KEYUP
                If specified, the key is being released. If not specified, the key is being depressed.
            </param>
            <param name="dwExtraInfo">
              Specifies an additional value associated with the key stroke.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetKeyState(System.Int32)">
            <summary>
              The GetKeyState function retrieves the status of the specified virtual key. 
              The status specifies whether the key is up, down, or toggled 
              (on, off��alternating each time the key is pressed).
            </summary>
            <param name="virtualKey">
              Specifies a virtual key. If the desired virtual key is a letter or digit 
              (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII 
              value of that character. For other keys, it must be a virtual-key code. 
              If a non-English keyboard layout is used, virtual keys with values in the 
              range ASCII A through Z and 0 through 9 are used to specify most of the 
              character keys. For example, for the German keyboard layout, the virtual key 
              of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the 
              "o with umlaut" key.
            </param>
            <returns>
              The return value specifies the status of the specified virtual key, as follows: 
              If the high-order bit is 1, the key is down; otherwise, it is up.
              If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, 
              is toggled if it is turned on. The key is off and untoggled if the low-order bit 
              is 0. A toggle key's indicator light (if any) on the keyboard will be on when 
              the key is toggled, and off when the key is untoggled.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetTextMetrics(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.TEXTMETRIC@)">
            <summary>
              The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font. 
            </summary>
            <param name="hDC">
              Handle to the device context. 
            </param>
            <param name="tm">
              Pointer to the TEXTMETRIC structure that receives the text metrics.
            </param>
            <returns>
              If the function succeeds, the return value is nonzero.
              If the function fails, the return value is zero. 
              Windows NT/2000/XP: To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
              This function selects an object into a specified device context. The new object replaces the previous object of the same type. 
            </summary>
            <param name="hDC">
              Handle to the device context.
            </param>
            <param name="gdiObject">
              Handle to the gdi object to be selected.
            </param>
            <returns>
              If the selected object is not a region, the handle of the object being replaced indicates success. 
              If the selected object is a region, one of the following values indicates success.
              -------------------------------------------------------------------
              | Value            | Description                                  |
              |-----------------------------------------------------------------|
              | SIMPLEREGION     | Region consists of a single rectangle.       |
              | COMPLEXREGION    | Region consists of more than one rectangle.  |
              | NULLREGION       | Region is empty.                             |
              -------------------------------------------------------------------
              NULL indicates that an error occurred and the selected object is not a region. Otherwise, a GDI_ERROR value is returned. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.DeleteObject(System.IntPtr)">
            <summary>
              The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, 
              freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid. 
            </summary>
            <param name="gdiObject">
              Handle to a logical pen, brush, font, bitmap, region, or palette. 
            </param>
            <returns>
              If the function succeeds, the return value is nonzero.
              If the specified handle is not valid or is currently selected into a DC, the return value is zero. 
              Windows NT/2000/XP: To get extended error information, call GetLastError.
            </returns>
            <remarks>
              Do not delete a drawing object (pen or brush) while it is still selected into a DC.
              When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.PeekMessage(C1.Win.C1Input.GrapeCity.Platform.NativeMethods.MSG@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
             <summary>
               The PeekMessage function dispatches incoming sent messages, checks the thread message queue for a posted message, 
               and retrieves the message (if any exist).
             </summary>
             <param name="message">
               Pointer to an MSG structure that receives message information.
             </param>
             <param name="hWnd">
               Handle to the window whose messages are to be examined. 
               The window must belong to the current thread. If hWnd is NULL, PeekMessage retrieves messages for any window that 
               belongs to the current thread. If hWnd is INVALID_HANDLE_VALUE, PeekMessage retrieves messages whose hWnd value 
               is NULL, as posted by the PostThreadMessage function.
             </param>
             <param name="msgFilterMin">
               Specifies the value of the first message in the range of messages to be examined. Use WM_KEYFIRST to specify 
               the first keyboard message or WM_MOUSEFIRST to specify the first mouse message. If wMsgFilterMin and wMsgFilterMax
               are both zero, PeekMessage returns all available messages (that is, no range filtering is performed).
             </param>
             <param name="msgFilterMax">
               Specifies the value of the last message in the range of messages to be examined. Use WM_KEYLAST to specify the last
               keyboard message or WM_MOUSELAST to specify the last mouse message. If wMsgFilterMin and wMsgFilterMax are both 
               zero, PeekMessage returns all available messages (that is, no range filtering is performed).
             </param>
             <param name="removeMsg">
               Specifies how messages are handled. This parameter can be one of the following values.
               PM_NOREMOVE
               Messages are not removed from the queue after processing by PeekMessage.
               PM_REMOVE
               Messages are removed from the queue after processing by PeekMessage.
               You can optionally combine the value PM_NOYIELD with either PM_NOREMOVE or PM_REMOVE. This flag prevents the system from releasing any thread that is waiting for the caller to go idle (see WaitForInputIdle).
            
               By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.
            
               PM_QS_INPUT
               Windows 98/Me, Windows 2000/XP: Process mouse and keyboard messages.
               PM_QS_PAINT
               Windows 98/Me, Windows 2000/XP: Process paint messages.
               PM_QS_POSTMESSAGE
               Windows 98/Me, Windows 2000/XP: Process all posted messages, including timers and hotkeys.
               PM_QS_SENDMESSAGE
               Windows 98/Me, Windows 2000/XP: Process all sent messages.
             </param>
             <returns>
               If a message is available, the return value is nonzero.
               If no messages are available, the return value is zero.
             </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.DrawFocusRect(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@)">
            <summary>
              This function draws a rectangle in the style used to indicate that the rectangle has the focus.
            </summary>
            <param name="hdc">
              Handle to the device context. 
            </param>
            <param name="lpRect">
              Long pointer to a RECT structure that specifies the logical coordinates of the rectangle. 
            </param>
            <returns>
              <b>true</b> indicates success. <b>false</b> indicates failure. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
              DrawFocusRect works only in MM_TEXT mode.
              Because DrawFocusRect is an XOR function, calling it a second time with the same rectangle removes the rectangle from the screen. 
              This function draws a rectangle that cannot be scrolled. To scroll an area containing a rectangle drawn by this function, 
              call DrawFocusRect to remove the rectangle from the screen, scroll the area, and then call DrawFocusRect again to draw the rectangle in the new position. 
              Windows XP: The focus rectangle can now be thicker than 1 pixel, so it is more visible for high-resolution, 
              high-density displays and accessibility needs. This is handled by the SPI_SETFOCUSBORDERWIDTH and SPI_SETFOCUSBORDERHEIGHT in SystemParametersInfo. 
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindowOrgEx(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.POINT@)">
            <summary>
              The GetWindowOrgEx function retrieves the x-coordinates and y-coordinates of the window origin for the specified device context. 
            </summary>
            <param name="hdc">
              The HDC.Handle to the device context.
            </param>
            <param name="point">
              Pointer to a POINT structure that receives the coordinates, in logical units, of the window origin.
            </param>
            <returns>
              A <b>bool</b> value, <b>true</b> if the operation succeeds, otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetWindowOrgEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
              The SetWindowOrgEx function specifies which window point maps to the viewport origin (0,0). 
            </summary>
            <param name="hdc">
              Handle to the device context.
            </param>
            <param name="X">
              Specifies the x-coordinate, in logical units, of the new window origin.
            </param>
            <param name="Y">
              Specifies the y-coordinate, in logical units, of the new window origin.
            </param>
            <param name="lppoint">
              Pointer to a POINT structure that receives the previous origin of the window, in logical units. If lpPoint is IntPtr.Zero, this parameter is not used. 
            </param>
            <returns>
              A <b>bool</b> value, <b>true</b> if the operation succeeds, otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
              The SendMessage function sends the specified message to a window or windows. 
              It calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
              Handle to the window whose window procedure will receive the message. 
              If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, 
              including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="Msg">
              Specifies the message to be sent.
            </param>
            <param name="wParam">
              Specifies additional message-specific information.
            </param>
            <param name="lParam">
              Specifies additional message-specific information.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetCurrentThreadId">
            <summary>
              Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>
              The return value is the thread identifier of the calling thread.
            </returns>
            <remarks>
              Until the thread terminates, the thread identifier uniquely identifies 
              the thread throughout the system.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.Ellipse(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              The Ellipse function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle.
              The ellipse is outlined by using the current pen and is filled by using the current brush. 
            </summary>
            <param name="hdc">
              Handle to the device context. 
            </param>
            <param name="leftRect">
              Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.
            </param>
            <param name="topRect">
              Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.
            </param>
            <param name="rightRect">
              Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.
            </param>
            <param name="bottomRect">
              Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetCurrentThemeName(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
              Retrieves the name of the current visual style, and optionally retrieves the color scheme name and size name.
            </summary>
            <param name="themeFilename">
              [out] Pointer to a string that receives the theme path and file name.
            </param>
            <param name="filenameCount">
              [in] Value of type int that contains the maximum number of characters allowed in the theme file name.
            </param>
            <param name="colorName">
              [out] Pointer to a string that receives the color scheme name. This parameter may be set to NULL.
            </param>
            <param name="colorNameCount">
              [in] Value of type int that contains the maximum number of characters allowed in the color scheme name.
            </param>
            <param name="sizeName">
              [out] Pointer to a string that receives the size name. This parameter may be set to NULL.
            </param>
            <param name="sizeNameCount">
              [in] Value of type int that contains the maximum number of characters allowed in the size name.
            </param>
            <returns>
              Returns S_OK if successful, or an error value otherwise.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindowLongPtr64(System.IntPtr,System.Int32)">
            <summary>
              Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
              Handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
             Specifies the zero-based offset to the value to be retrieved. 
             Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
             To retrieve any other value, specify one of the following values.
             <b>GWL_EXSTYLE</b>
             Retrieves the extended window styles. For more information, see CreateWindowEx. 
             <b>GWL_STYLE</b>
             Retrieves the window styles.
             <b>GWLP_WNDPROC</b>
             Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
             <b>GWLP_HINSTANCE</b>
             Retrieves a handle to the application instance.
             <b>GWLP_HWNDPARENT</b>
             Retrieves a handle to the parent window, if there is one.
             <b>GWLP_ID</b>
             Retrieves the identifier of the window.
             <b>GWLP_USERDATA</b>
             Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
             The following values are also available when the hWnd parameter identifies a dialog box.
             <b>DWLP_DLGPROC</b>
             Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.
             <b>DWLP_MSGRESULT</b>
             Retrieves the return value of a message processed in the dialog box procedure.
             <b>DWLP_USER</b>
             Retrieves extra information private to the application, such as handles or pointers.
            </param>
            <returns>
              If the function succeeds, the return value is the requested value.
              If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
              If you are retrieving a pointer or a handle, this function supersedes the GetWindowLong function. 
              (Pointers and handles are 32 bits on 32-bit Microsoft Windows and 64 bits on 64-bit Windows.) 
              To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindowLong32(System.IntPtr,System.Int32)">
            <summary>
              Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
              Handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
             Specifies the zero-based offset to the value to be retrieved. 
             Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
             To retrieve any other value, specify one of the following values.
             <b>GWL_EXSTYLE</b>
             Retrieves the extended window styles. For more information, see CreateWindowEx. 
             <b>GWL_STYLE</b>
             Retrieves the window styles.
             <b>GWLP_WNDPROC</b>
             Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
             <b>GWLP_HINSTANCE</b>
             Retrieves a handle to the application instance.
             <b>GWLP_HWNDPARENT</b>
             Retrieves a handle to the parent window, if there is one.
             <b>GWLP_ID</b>
             Retrieves the identifier of the window.
             <b>GWLP_USERDATA</b>
             Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
             The following values are also available when the hWnd parameter identifies a dialog box.
             <b>DWLP_DLGPROC</b>
             Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.
             <b>DWLP_MSGRESULT</b>
             Retrieves the return value of a message processed in the dialog box procedure.
             <b>DWLP_USER</b>
             Retrieves extra information private to the application, such as handles or pointers.
            </param>
            <returns>
              If the function succeeds, the return value is the requested value.
              If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
              If you are retrieving a pointer or a handle, this function supersedes the GetWindowLong function. 
              (Pointers and handles are 32 bits on 32-bit Microsoft Windows and 64 bits on 64-bit Windows.) 
              To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
              The x86 os will not support GetWindowLongPtr in user32. So this method is needed.
            </summary>
            <param name="hWnd">
              Handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
             Specifies the zero-based offset to the value to be retrieved. 
             Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
             To retrieve any other value, specify one of the following values.
             <b>GWL_EXSTYLE</b>
             Retrieves the extended window styles. For more information, see CreateWindowEx. 
             <b>GWL_STYLE</b>
             Retrieves the window styles.
             <b>GWLP_WNDPROC</b>
             Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
             <b>GWLP_HINSTANCE</b>
             Retrieves a handle to the application instance.
             <b>GWLP_HWNDPARENT</b>
             Retrieves a handle to the parent window, if there is one.
             <b>GWLP_ID</b>
             Retrieves the identifier of the window.
             <b>GWLP_USERDATA</b>
             Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
             The following values are also available when the hWnd parameter identifies a dialog box.
             <b>DWLP_DLGPROC</b>
             Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.
             <b>DWLP_MSGRESULT</b>
             Retrieves the return value of a message processed in the dialog box procedure.
             <b>DWLP_USER</b>
             Retrieves extra information private to the application, such as handles or pointers.
            </param>
            <returns>
              If the function succeeds, the return value is the requested value.
              If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetWindowLongPtr64(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
              Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">
              Handle to the window and, indirectly, the class to which the window belongs. 
              The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.
            </param>
            <param name="nIndex">
             Specifies the zero-based offset to the value to be retrieved. 
             Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
             To retrieve any other value, specify one of the following values.
             <b>GWL_EXSTYLE</b>
             Retrieves the extended window styles. For more information, see CreateWindowEx. 
             <b>GWL_STYLE</b>
             Retrieves the window styles.
             <b>GWLP_WNDPROC</b>
             Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
             <b>GWLP_HINSTANCE</b>
             Retrieves a handle to the application instance.
             <b>GWLP_HWNDPARENT</b>
             Retrieves a handle to the parent window, if there is one.
             <b>GWLP_ID</b>
             Retrieves the identifier of the window.
             <b>GWLP_USERDATA</b>
             Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
             The following values are also available when the hWnd parameter identifies a dialog box.
             <b>DWLP_DLGPROC</b>
             Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.
             <b>DWLP_MSGRESULT</b>
             Retrieves the return value of a message processed in the dialog box procedure.
             <b>DWLP_USER</b>
             Retrieves extra information private to the application, such as handles or pointers.
            </param>
            <param name="dwNewLong">
              Specifies the replacement value.
            </param>
            <returns>
              If the function succeeds, the return value is the previous value of the specified offset.
              If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetWindowLong32(System.IntPtr,System.Int32,System.Int32)">
            <summary>
              Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">
              Handle to the window and, indirectly, the class to which the window belongs. 
              The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.
            </param>
            <param name="nIndex">
             Specifies the zero-based offset to the value to be retrieved. 
             Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
             To retrieve any other value, specify one of the following values.
             <b>GWL_EXSTYLE</b>
             Retrieves the extended window styles. For more information, see CreateWindowEx. 
             <b>GWL_STYLE</b>
             Retrieves the window styles.
             <b>GWLP_WNDPROC</b>
             Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
             <b>GWLP_HINSTANCE</b>
             Retrieves a handle to the application instance.
             <b>GWLP_HWNDPARENT</b>
             Retrieves a handle to the parent window, if there is one.
             <b>GWLP_ID</b>
             Retrieves the identifier of the window.
             <b>GWLP_USERDATA</b>
             Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
             The following values are also available when the hWnd parameter identifies a dialog box.
             <b>DWLP_DLGPROC</b>
             Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.
             <b>DWLP_MSGRESULT</b>
             Retrieves the return value of a message processed in the dialog box procedure.
             <b>DWLP_USER</b>
             Retrieves extra information private to the application, such as handles or pointers.
            </param>
            <param name="dwNewLong">
              Specifies the replacement value.
            </param>
            <returns>
              If the function succeeds, the return value is the previous value of the specified offset.
              If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
              Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">
              Handle to the window and, indirectly, the class to which the window belongs. 
              The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.
            </param>
            <param name="nIndex">
             Specifies the zero-based offset to the value to be retrieved. 
             Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
             To retrieve any other value, specify one of the following values.
             <b>GWL_EXSTYLE</b>
             Retrieves the extended window styles. For more information, see CreateWindowEx. 
             <b>GWL_STYLE</b>
             Retrieves the window styles.
             <b>GWLP_WNDPROC</b>
             Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
             <b>GWLP_HINSTANCE</b>
             Retrieves a handle to the application instance.
             <b>GWLP_HWNDPARENT</b>
             Retrieves a handle to the parent window, if there is one.
             <b>GWLP_ID</b>
             Retrieves the identifier of the window.
             <b>GWLP_USERDATA</b>
             Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
             The following values are also available when the hWnd parameter identifies a dialog box.
             <b>DWLP_DLGPROC</b>
             Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.
             <b>DWLP_MSGRESULT</b>
             Retrieves the return value of a message processed in the dialog box procedure.
             <b>DWLP_USER</b>
             Retrieves extra information private to the application, such as handles or pointers.
            </param>
            <param name="dwNewLong">
              Specifies the replacement value.
            </param>
            <returns>
              If the function succeeds, the return value is the previous value of the specified offset.
              If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
              This method is provided because of in x86 os, the user32 does not support SetWindowLongPtr function.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.CLSIDFromString(System.String,System.Guid@)">
            <summary>
              This function converts a string generated by the StringFromCLSID function back into the original class identifier.
            </summary>
            <param name="lpsz">
              Long pointer to the null-terminated string that represents the class identifier. 
            </param>
            <param name="id">
              Pointer to the class identifier on return.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.CoCreateInstance(System.Guid,System.Object,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.CLSCTX,System.Guid,System.IntPtr@)">
            <summary>
              This function creates on the local system a single uninitialized object of the class associated with a specified class identifier. 
            </summary>
            <param name="rclsid">
              Class identifier associated with the data and code that are used to create the object. 
            </param>
            <param name="pUnkOuter">
              If NULL, indicates that the object is not being created as part of an aggregate. If non-NULL, pointer to the aggregate object's IUnknown interface (the controlling IUnknown). 
            </param>
            <param name="dwClsContext">
              Specifies the context in which the code that manages the newly created object will run. The only valid value for this parameter is CLSCTX_INPROC_SERVER. This is from the enumeration CLSCTX. Any other value results in a return value of E_NOTIMPL.
            </param>
            <param name="riid">
              Reference to the identifier of the interface to be used to communicate with the object.
            </param>
            <param name="ppv">
              Address of pointer variable that receives the interface pointer requested in riid. Upon successful return, *ppv contains the requested interface pointer. Upon failure, *ppv contains NULL
            </param>
            <returns>
              If return value is S_OK, an instance of the specified object class was successfully created.
              if return value is REGDB_E_CLASSNOTREG, a specified class is not registed.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.CoInitialize(System.IntPtr)">
            <summary>
              Initializes the COM library on the current thread and identifies the concurrency model as single-thread apartment (STA). 
              Applications must initialize the COM library before they can call COM library functions other than CoGetMalloc and memory allocation functions. 
            </summary>
            <param name="pReserved">
              Reserved; must be NULL.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.CoUninitialize">
            <summary>
              Closes the COM library on the current thread, unloads all DLLs loaded by the thread, 
              frees any other resources that the thread maintains, and forces all RPC connections on the thread to close.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.CHARFORMATA)">
            <summary>
              This method used to get richedit contrl's charformat.
            </summary>
            <param name="hWnd">
              The h WND.
            </param>
            <param name="msg">
              The MSG.
            </param>
            <param name="wParam">
              The w param.
              Specifies the character formatting that applies to the control. It can be one of the following values. 
              SCF_DEFAULT
              Gets the default character formatting.
              SCF_SELECTION
              Gets the current selection's character formatting.
            </param>
            <param name="lParam">
              The l param.
              Pointer to a CHARFORMAT structure. If the selection formatting is being retrieved, 
              the structure receives the attributes of the first character and the dwMask member specifies which attributes are consistent throughout the entire selection. 
              Microsoft Rich Edit 2.0 and later: This parameter can be a pointer to a CHARFORMAT2 structure, which is an extension of the CHARFORMAT structure. 
              Before sending the EM_GETCHARFORMAT message, set the structure's cbSize member to indicate the version of the structure.
            </param>
            <returns>
              This message returns the value of the dwMask member of the CHARFORMAT structure.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.PARAFORMAT)">
            <summary>
            Sends the message to get richeidt control's paraformat.
            </summary>
            <param name="hWnd">
              The h WND.
            </param>
            <param name="msg">
              The MSG.
            </param>
            <param name="wParam">
              This parameter is not used; it must be zero. 
            </param>
            <param name="lParam">
              Pointer to a PARAFORMAT structure that receives the paragraph formatting attributes of the current selection. 
              If more than one paragraph is selected, 
              the structure receives the attributes of the first paragraph, 
              and the dwMask member specifies which attributes are consistent throughout the entire selection. 
              Microsoft Rich Edit 2.0 and later: This parameter can be a pointer to a PARAFORMAT2 structure, 
              which is an extension of the PARAFORMAT structure. 
              Before sending the EM_GETPARAFORMAT message, set the structure's cbSize member to indicate the version of the structure. 
            </param>
            <returns>
             This message returns the value of the dwMask member of the PARAFORMAT structure.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindowDC(System.IntPtr)">
            <summary>
            The <b>GetWindowDC</b> function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. 
            A window device context permits painting anywhere in a window, because the origin of the device context is the upper-left corner of the window instead of the client area. 
            </summary>
            <param name="hWnd">
            Handle to the window with a device context that is to be retrieved. 
            If this value is NULL, <b>GetWindowDC</b> retrieves the device context for the entire screen. 
            </param>
            <returns>
            If the function succeeds, the return value is a handle to a device context for the specified window. 
            If the function fails, the return value is NULL, indicating an error or an invalid <c>hWnd</c> parameter. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The <b>ReleaseDC</b> function releases a device context (DC), freeing it for use by other applications. 
            The effect of the <b>ReleaseDC</b> function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">
            Handle to the window whose DC is to be released. 
            </param>
            <param name="hDC">
            Handle to the DC to be released.
            </param>
            <returns>
            The return value indicates whether the DC was released. If the DC was released, the return value is 1. 
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetWindowRectangle(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.RECT@)">
            <summary>
            The <b>GetWindowRect</b> function retrieves the dimensions of the bounding rectangle of the specified window. 
            The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen. 
            </summary>
            <param name="hWnd">
            Handle to the window.
            </param>
            <param name="rect">
            Indicates the structure that receives the screen coordinates of the upper-left and lower-right corners of the window. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.MapVirtualKey(System.UInt32,System.UInt32)">
            <summary>
            The <b>MapVirtualKey</b> function translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. 
            </summary>
            <param name="uCode">
              [in] Specifies the virtual-key code or scan code for a key. How this value is interpreted depends on the value of the <c>uMapType</c> parameter.
            </param>
            <param name="uMapType">
              [in] Specifies the translation to perform. The value of this parameter depends on the value of the <c>uCode</c> parameter.
            </param>
            <returns>
              The return value is either a scan code, a virtual-key code, or a character value, depending on the value of <c>uCode</c> and <c>uMapType</c>. If there is no translation, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetKeyboardState(System.Byte[])">
            <summary>
            The <b>GetKeyboardState</b> function copies the status of the 256 virtual keys to the specified buffer.
            </summary>
            <param name="lpKeyState">
              [in] Pointer to the 256-byte array that receives the status data for each virtual key.
            </param>
            <returns>
              If the function succeeds, the return value is nonzero.
              If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.ToAscii(System.UInt32,System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            The <b>ToAscii</b> function translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
              [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
              [in] Specifies the hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpKeyState">
              [in] Pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed).
              The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpChar">
              [out] Pointer to the buffer that receives the translated character or characters.
            </param>
            <param name="uFlags">
              [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise.
            </param>
            <returns>
              If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.GetCapture">
            <summary>
              The <b>GetCapture</b> function retrieves a handle to the window (if any) that has captured the mouse.
              Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders. 
            </summary>
            <returns>
              The return value is a handle to the capture window associated with the current thread. 
              If no window in the thread has captured the mouse, the return value is NULL. 
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Platform.UnsafeNativeMethods.SetInputScope(System.IntPtr,C1.Win.C1Input.GrapeCity.Platform.NativeMethods.InputScope)">
            <summary>
              Sets an input scope for the specified window.
            </summary>
            <param name="hwnd">
              The window to set the scope on.
            </param>
            <param name="inputscope">
              The input scope to associate with the window. To remove the input scope association, pass IS_DEFAULT to this parameter.
            </param>
            <returns>
              Return S_OK if the method was successfully executed.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Resources.Strings">
            <summary>
              namespace = default namespace + folder
              [class name = resource file name]
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.SR">
            <summary>
              Represents the basic functionality used to get string information this assembly resource.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.SRDescriptionAttribute">
            <summary>
              Sets the description visual designers can display when referencing an event, extender, or property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.SRDescriptionAttribute._replaced">
            <summary>
              The flag used to indicated whether the description string been replaced.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.SRDescriptionAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the SRBaseDescriptionAttribute class, using the specified description.
            </summary>
            <param name="description">
              The application-defined description text.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.SRDescriptionAttribute.Description">
            <summary>
              Gets description text associated with the item monitored.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.SRDescriptionAttribute.TypeId">
            <summary>
              When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <value>
            </value>
            <returns>
              An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.SRCategoryAttribute">
            <summary>
              Specifies the category in which the property or event will be displayed in a visual designer.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.SRCategoryAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the SRBaseCategoryAttribute class, using the specified category.
            </summary>
            <param name="category">
              The application-defined category text.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.SRCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
              Looks up the localized name of a given category.
            </summary>
            <param name="value">
              The name of the category to look up.
            </param>
            <returns>
              The localized name of the category.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.IConvertedCharSetEnumerator">
            <summary>
              Defines a enumerator for browsing the <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.IConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.IConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.IConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet">
            <summary>
              Defines a character set, all the characters in it may be converted each other.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the character set. It also is the start point of the converting.
            </summary>
            <value>
              A <b>char</b> array indicates a item in the character set.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.Key">
            <summary>
              Gets the key item in the character set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.Equals(System.Object)">
            <summary>
              Overridden, Determines whether the specified Object is equal to the current Object. 
            </summary>
            <param name="obj">
              The Object to compare with the current Object.
            </param>
            <returns>
              true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.GetHashCode">
            <summary>
              Serves as a hash function for a particular type, suitable for use in hashing algorithms 
              and data structures like a hash table.
            </summary>
            <returns>
              A hash code for the current Object.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.op_Equality(C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet,C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet)">
            <summary>
              Defines the "==" operator, for <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> indicates the right operand.
            </param>
            <returns>
              If two operands are equal,return true, otherwise, return false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.op_Inequality(C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet,C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet)">
            <summary>
              Defines the "!=" operator, for <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> indicates the right operand.
            </param>
            <returns>
              If two operands are equal,return false, otherwise, return true.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.CreateConvertedCharSet(System.Char)">
            <summary>
              Creates a <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> for special character.
            </summary>
            <param name="character">
              A <b>char</b> indicates the special character.
            </param>
            <returns>
              Return a <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> that contains the converted characters of special character.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.CreateConvertedCharSet(System.Char,System.Char)">
            <summary>
              Creates a <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> for special character.
            </summary>
            <param name="character">
              A <b>char</b> indicates the special character.
            </param>
            <param name="followedCharacter">
              A <b>char</b> indicates a character that follows the special character.
            </param>
            <returns>
              Return a <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> that contains the converted characters of special character.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet.CreateConvertedCharSet(System.String,System.Int32)">
            <summary>
              Creates a <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> for special character.
            </summary>
            <param name="str">
              A <b>string</b> indicates the string.
            </param>
            <param name="index">
              A <b>int</b> indicates a special character in the string.
            </param>
            <returns>
              Return a <see cref="T:C1.Win.C1Input.GrapeCity.Text.ConvertedCharSet"/> that contains the converted characters of special character
              in the string.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet">
            <summary>
              Defines the converted character set for alphabet.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator">
            <summary>
              Defines the enumerator for AlphabetConvertedCharSet.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.Steps">
            <summary>
              A enumeration indicates the converted states.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator._owner">
            <summary>
              Indicates the owner of the enumerator.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator._step">
            <summary>
              A <b>char</b> array indicates current state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.#ctor(C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator"/>.
            </summary>
            <param name="owner">
              Indicates the owner of the enumerator.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.AlphabetConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet._seed">
            <summary>
              A <b>char</b> indicates browsing seed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the AlphabetConvertedCharSet class.
            </summary>
            <param name="alphabetCharacter">
              A <b>char</b> indicates a alphabet character.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.Key">
            <summary>
              Gets the key item in the set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.AlphabetConvertedCharSet"/>.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet">
            <summary>
              Defines the converted character set for the kana characters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator">
            <summary>
              Defines the enumerator for the KanaConvertedCharSet.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator._items">
            <summary>
              Indicates the characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator._currentIndex">
            <summary>
              A <see cref="T:System.Int32"/> indicates the current step index in the character array.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.AddHiraganaItems(System.Char,System.Collections.ArrayList)">
            <summary>
              Add the items for Hiragana.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.AddFullKatakana(System.Char,System.Collections.ArrayList)">
            <summary>
              Add the items for Full Katakana.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.AddHalfKatakana(System.Char[],System.Collections.ArrayList)">
            <summary>
              Add the items for Half Katakana.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.#ctor(C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet)">
            <summary>
              Initializes a new instance of the KanaConvertedCharSetEnumerator
            </summary>
            <param name="owner">
              Indicates the owner of the KanaConvertedCharSetEnumerator.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.KanaConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet._seed">
            <summary>
              A <b>char</b> indicates browsing seed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the KanaConvertedCharSet class.
            </summary>
            <param name="kanaCharacter">
              A <b>char</b> indicates a kana character.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.#ctor(System.Char,System.Char)">
            <summary>
              Initializes a new instance of the KanaConvertedCharSet class.
            </summary>
            <param name="kanaCharacter">
              A <b>char</b> indicates a kana character.
            </param>
            <param name="followedCharacter">
              A <b>char</b> indicates a character that follows the kana character..
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.Initialize(System.Char[])">
            <summary>
              Initializes the result of the current instance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.Key">
            <summary>
              Gets the key item in the set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
            <remarks>
              I choose the Upper Hiragana as the key.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.KanaConvertedCharSet"/>.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet">
            <summary>
              Defines the enumerator of Normal character set.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator">
            <summary>
              Defines the enumerator for NormalConvertedCharSet.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.Steps">
            <summary>
              A enumeration indicates the converted states.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator._owner">
            <summary>
              Indicates the owner of the enumerator.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator._step">
            <summary>
              A <b>char</b> array indicates current state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.#ctor(C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator"/>.
            </summary>
            <param name="owner">
              Indicates the owner of the enumerator.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.Current">
            <summary>
              Gets the current browsed item in the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.Reset">
            <summary>
              Resets the character set enumerator to start the browsing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.NormalConvertedCharSetEnumerator.MoveNext">
            <summary>
              Move to next item in the character set.
            </summary>
            <returns>
              <b>true</b>, there have a item to be browsed.
              <b>false</b>, the browsing has finished.
            </returns>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet._seed">
            <summary>
              A <b>char</b> indicates browsing seed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the AlphabetCharacterGroupEnumerator class.
            </summary>
            <param name="character">
              A <b>char</b> indicates a alphabet character.
            </param>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.Seed">
            <summary>
              Gets a start point for browsing the set.
            </summary>
            <value>
              A <b>char</b> array indicates a meaning character in the Japanese.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.Key">
            <summary>
              Gets the key item in the set.
            </summary>
            <value>
              A <b>char</b> indicates a key item that can be used to identify a character set.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet.GetEnumerator">
            <summary>
              Gets the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet"/>.
            </summary>
            <returns>
              Returns the enumerator for the <see cref="T:C1.Win.C1Input.GrapeCity.Text.NormalConvertedCharSet"/>.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter">
            <summary>
              Summary description for Filter class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter._include">
            <summary>
              Indicates whether the character type is included.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter._autoConvert">
            <summary>
              A <b>bool</b> value indicates whether the char can be auto converted automatically.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.#ctor">
            <summary>
              Initializes a new instance of the Filter class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.Include">
            <summary>
              Gets or sets the include for the filter. 
            </summary>
            <value>
              A <b>bool</b> value that indicates whether the character type is included.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.AutoConvert">
            <summary>
            Gets or sets a value indicating whether the char can be converted automatically.
            </summary>
            <value>
              A <b>bool</b> value, <b>true</b> if the char can be converted automatically; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.IsValid(System.Char)">
            <summary>
              Check whether the character is valid.
            </summary>
            <param name="c">  
              The character to be checked.
            </param>
            <returns>
              The value indicating whether the character is valid.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.IsValid(System.String,System.Int32,System.Int32@)">
            <summary>
            Determines whether the specified character is valid.
            </summary>
            <param name="text">The string contains the checked character.</param>
            <param name="index">The character index in the string.</param>
            <param name="charLength">The character real length whose unit is <see cref="T:System.Char"/>.</param>
            <returns>
              <see langword="true" /> if the specified text is valid; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            Example for <paramref name="charLength"/>:
            1. 'A', length is 1.
            2. Emoji [U+0023 U+20E3], length is 2.
            3. IVS [U+845B U+E0100], length is 3.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.Check(System.String,System.Int32@)">
            <summary>
              Check whether the character is valid.
            </summary>
            <param name="text">
              The string to be checked.
            </param>
            <param name="index">
              The character index in the string.
            </param>
            <returns>
              The convert string.
            </returns>
            <remarks>
            This method hold on old policy
            When return, If operatoin succsss(return value isn't string.Empty), the <paramref name="index"/> should be updated to the next character position;
            Otherwise(return value is string.Empty), the <paramref name="index"/> will hold on old value;
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.Check(System.String,System.Int32@,System.Int32@)">
            <summary>
              Check whether the character is valid.
            </summary>
            <param name="text">
              The string to be checked.
            </param>
            <param name="index">
              The character index in the string.
            </param>
            <param name="charLength">
              Indicates the length of the checked character.
            </param>
            <returns>
              The convert string.
            </returns>
            <remarks>
            This method used new policy: 
            When return, the <paramref name="index"/> should be updated to the next character position.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter.Convert(System.String,System.Int32,System.Int32@)">
            <summary>
              Convert the character in the special index.
            </summary>
            <param name="text">
              The string to be converted.
            </param>
            <param name="index">
              The character index in the string.
            </param>
            <param name="convertedCharacterNumber">
              Indicates the characters number used to converted. 
            </param>
            <returns>
              The convert string.
            </returns>
            <remarks>
            The character, which is invoked by this method, is an invalid character, so need to convert.
            
            For <paramref name="index"/>, if converted success(returned value isn't string.Empty), when return, the index is updated to the next character position;
            Otherwise, it holds on the current position.
            
            Case: "ｷﾞ" --> "ぎ"
            the checked character length is 1 ('ｷ'), but when convert, we must convert 'ｷ' + 'ﾞ' to 'ぎ'.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.CharMaskTextFilter.ParseFormat(System.String)">
            <summary>
              Parses the format string and config the filter.
            </summary>
            <param name="format">
              A <b>string</b> the format string.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.EmojiHelper.IsEmoji(System.String,System.Int32,System.Int32@)">
            <summary>
            Indicates whether the character at the specified position
            in the specified string is a Emoji character or not.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <param name="emojiCharLength">The Emoji character length which unit is <see cref="T:System.Char"/>.</param>
            <returns>
            true if the character at position index in s is a Emoji
            character; otherwise, false.
            </returns>
            <remarks>
            If not Emoji character, <paramref name="emojiCharLength"/> is 0.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.FullWidthFilter">
            <summary>
              The filter  for FullWidthFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.FullWidthFilter.#ctor">
            <summary>
              Initializes a new instance of the DBCSField class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.FullWidthKatakanaFilter">
            <summary>
              The filter for FullWidthKatakanaFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.FullWidthKatakanaFilter.#ctor">
            <summary>
              Initializes a new instance of the FullWidthKatakanaFilter class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.FullWidthSymbolsFilter">
            <summary>
              The filter for DBCSSymbolsFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.FullWidthSymbolsFilter.#ctor">
            <summary>
              Initializes a new instance of the DBCSSymbolsFilter class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.HalfWidthFilter">
            <summary>
              The filter for HalfWidthFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.HalfWidthFilter.#ctor">
            <summary>
              Initializes a new instance of the SBCSField class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.HalfWidthKatakanaFilter">
            <summary>
              The filter for HalfWidthKatakanaFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.HalfWidthKatakanaFilter.#ctor">
            <summary>
              Initializes a new instance of the HalfWidthKatakanaFilter class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.HalfWidthSymbolsFilter">
            <summary>
              The filter for SBCSSymbolsFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.HalfWidthSymbolsFilter.#ctor">
            <summary>
              Initializes a new instance of the SBCSSymbolsFilter class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.HiraganaFilter">
            <summary>
              The filter for HiraganaFilter class
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.HiraganaFilter.#ctor">
            <summary>
              Initializes a new instance of the HiraganaFilter class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.IntersectFilter">
            <summary>
              The filter for IntersectFilter class
            </summary>
            <remarks>
              2004.04.06 Added by Hannah for the new feature 0029 in V3.0 Forbidden charactor with Format
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.IntersectFilter._filters">
            <summary>
              Indicates a filter group.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.IntersectFilter.#ctor(C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter[])">
            <summary>
              Initializes a new instance of the IntersectFilter class.
            </summary>
            <param name="filters">
              The filters.
            </param>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.IVSCharHelper.IVD_Table">
            <summary>
              Represents the IVS char definition table form Unicode.org
            </summary>
            <remarks>
              Please visit http://www.unicode.org/ivd/ for the newest definition table if needed.
              And current used version is 2012-03-02.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.IVSCharHelper.IsIVSElement(System.String,System.Int32,System.Int32@)">
            <summary>
            Indicates whether the character at the specified position
            in the specified string is a IVS element or not.
            </summary>
            <param name="testStr">A string.</param>
            <param name="index">The character position in s.</param>
            <param name="ivsElementLength">The IVS element length which unit is <see cref="T:System.Char"/>.</param>
            <returns>
            true if the character at position index in s is a IVS
            character; otherwise, false.
            </returns>
            <remarks>
            If not IVS character, <paramref name="ivsElementLength"/> is 0.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper">
            <summary>
              This class is used to determine whether given char(s) is of specified JIS encoding.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.JISRegionRange">
            <summary>
              Represents the 'Kuten' range defined by the JISX standard.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.JISRegionRange.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
              The constructor of JISRegionRange class.
            </summary>
            <param name="lowBound">The lower bound.</param>
            <param name="highBound">The upper bound.</param>
            <param name="regionID">The region ID.</param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.IsShiftJIS(System.Char)">
            <summary>
              Checks whether the given char is of Shift JIS encoding.
            </summary>
            <param name="ch">The char of which the encoding is to be checked.</param>
            <returns><b>true</b> if the given char is of Shift JIS encoding, otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.IsShiftJIS(System.Char[])">
            <summary>
              Checks whether the given char is of Shift JIS encoding.
            </summary>
            <param name="chs">The char list of which the encoding is to be checked.</param>
            <returns><b>true</b> if all the chars within the given list is of Shift JIS encoding, otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.IsJISX0208(System.Char)">
            <summary>
              Checks whether the given char is of JIS X 0208 encoding.
            </summary>
            <param name="ch">The char of which the encoding is to be checked.</param>
            <returns><b>true</b> if the given char is of Shift JIS X 0208 encoding, otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.IsJISX0208(System.Char,System.String@)">
            <summary>
              Checks whether the given char is of JIS X 0208 encoding.
            </summary>
            <param name="ch">The char of which the encoding is to be checked.</param>
            <param name="regionID">The JIS X 0208 region ID of the given char.</param>
            <returns><b>true</b> if the given char is of Shift JIS X 0208 encoding, otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.JISCharSetHelper.IsJISX0201(System.Char)">
            <summary>
              Checks whether the given char is of JIS X 0201 encoding.
            </summary>
            <param name="ch">The char of which the encoding is to be checked.</param>
            <returns><b>true</b> if the given char is of Shift JIS X 0201 encoding, otherwise, false.</returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.LimitedFilter">
            <summary>
              The filter for LimitedFilter class
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.LimitedFilter._includeChars">
            <summary>
              Indicates the character set, which is included.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.LimitedFilter._excludeChars">
            <summary>
              Indicates the character set, which is excluded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.LimitedFilter.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the LimitedFilter class.
            </summary>
            <param name="includeChars">
              A <b>string</b> value include the chars that can be accepted.
            </param>
            <param name="excludeChars">
              A <b>string</b> value include the chars that can not be accepted.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.RangeFilter">
            <summary>
              The filter for Filters.RangeFilter class
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.RangeFilter._startChar">
            <summary>
              Indicates the character set, which is included.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.RangeFilter._endChar">
            <summary>
              Indicates the character set, which is excluded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.RangeFilter.#ctor(System.Char,System.Char)">
            <summary>
              Initializes a new instance of the LimitedFilter class.
            </summary>
            <param name="startChar">
              A <b>char</b> value indicates the start char of the range.
            </param>
            <param name="endChar">
              A <b>char</b> value indicates the end char of the range.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.SurrogateCharFilter">
            <summary>
              Defines the <see cref="T:C1.Win.C1Input.GrapeCity.Text.Filters.SurrogateCharFilter"/> class.
            </summary>
            <remarks>
              This filter used to filter the surrogate char.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter">
            <summary>
              Represents the filter, which can check the character is valid in text editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.CharType">
            <summary>
               Indicates the character type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter._format">
            <summary>
              A <b>string</b> indicates the format string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter._allowTypes">
            <summary>
              A <b>CharType</b> indicates which type is allowed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.Format">
            <summary>
              Gets or sets the format string.
            </summary>
            <value>
              A <b>string</b> indicates the format string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.AllowDBCS">
            <summary>
              Gets whether the filter allow DBCS.
            </summary>
            <value>
              A <b>bool</b> flag indicates whether the filter allow DBCS. 
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.AllowSBCS">
            <summary>
              Gets whether the filter allow SBCS.
            </summary>
            <value>
              A <b>bool</b> flag indicates whether the filter allow SBCS. 
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.#ctor">
            <summary>
               Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.ParseFormat(System.String)">
            <summary>
              Parses the format string and config the filter.
            </summary>
            <param name="format">
              A <b>string</b> the format string.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsUpper(System.Char)">
            <summary>
              Checks whether the special character is upper case.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is upper case, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsLower(System.Char)">
            <summary>
              Checks whether the special character is lower case.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is lower case, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsNumber(System.Char)">
            <summary>
              Checks whether the special character is a number.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a number, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsBinary(System.Char)">
            <summary>
              Checks whether the special character is a binary character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a binary character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsHex(System.Char)">
            <summary>
              Checks whether the special character is a hex character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a hex character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsSymbol(System.Char)">
            <summary>
              Checks whether the special character is a symbol character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a symbol character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsNumberSymbol(System.Char)">
            <summary>
              Checks whether the special character is a number symbol character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a number symbol character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsKatakana(System.Char)">
            <summary>
              Checks whether the special character is a katakana character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a katakana character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsHiragana(System.Char)">
            <summary>
              Checks whether the special character is a hiragana character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a hiragana character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsDBCS(System.Char)">
            <summary>
              Checks whether the special character is a DBCS character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a DBCS character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsSBCS(System.Char)">
            <summary>
              Checks whether the special character is a SBCS character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a SBCS character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter.IsUpperKana(System.Char)">
            <summary>
              Checks whether the special character is a upper case katakana character.
            </summary>
            <param name="c">
              A <b>char</b> indicates the character to be checked.
            </param>
            <returns>
              If the character is a upper case katakana character, return <b>true</b>, otherwise, return <b>false</b>.
            </returns>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx">
            <summary>
            Represents the filter, which can check the character is valid in text editor.
            </summary>
            <remarks>
            Compare with <see cref="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter"/>, it supports normal character.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx._keywordChars">
            <summary>
            Indicates all keyword characters in format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx._normalCharList">
            <summary>
            Stores all normal characters defined in format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx._formatOnlyIncludeNormalChar">
            <summary>
            Indicates whether the format only includes normal character or not.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx.NormalCharList">
            <summary>
            Gets the normal character list.
            </summary>
            <value>The normal character list.</value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx.ParseFormat(System.String)">
            <summary>
            Parses the format string and config the filter.
            </summary>
            <param name="format">
            A <b>string</b> the format string.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx.PreprocessFormatString(System.String)">
            <summary>
              Preprocess the format string.
            </summary>
            <param name="format">
              A <b>string</b> the format string.
            </param>
            <returns>
              The format string which is exclude normal character.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx.IsNormalChar(System.Char)">
            <summary>
              Determines whether the character is normal character or space character or not.
            </summary>
            <param name="c">
              The specific character.
            </param>
            <returns>
              <b>true</b> if the character is normal character or space character; otherwise, <b>false</b>.
            </returns>
            <remarks>
              Reture false means the character is:  
                Keyword, '^' or '\'.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter">
            <summary>
            Represents the filter, which can check the character is valid in text editor.
            </summary>
            <remarks>
            Compare with IM5 <see cref="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilter"/>, it supports include format and exclude format at the same time.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter._format">
            <summary>
              A <b>string</b> indicates the format string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter._includeTextFilter">
            <summary>
            Indicates the include TextFilter.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter._excludeTextFilter">
            <summary>
            Indicates the exclude TextFilter.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.Format">
            <summary>
              Gets or sets the format string.
            </summary>
            <value>
              A <b>string</b> indicates the format string.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.IncludeTextFilter">
            <summary>
            Gets or sets the include TextFilter.
            </summary>
            <value>The include TextFilter.</value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.ExcludeTextFilter">
            <summary>
            Gets or sets the exclude TextFilter.
            </summary>
            <value>The exclude TextFilter.</value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.HasIncludeTextFilter">
            <summary>
            Gets a value indicating whether this instance has include TextFilter or not.
            </summary>
            <value>
            	<b>true</b> if this instance has include TextFilter; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.HasExcludeTextFilter">
            <summary>
            Gets a value indicating whether this instance has exclude TextFilter or not.
            </summary>
            <value>
            	<b>true</b> if this instance has exclude TextFilter; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.ParseFormat(System.String)">
            <summary>
              Parses the format string and config the filter.
            </summary>
            <param name="format">
              A <b>string</b> the format string.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.SplitFormat(System.String,System.String@,System.String@)">
            <summary>
            Splits the format to include format and exclude format.
            </summary>
            <param name="format">
              The entire format string.
            </param>
            <param name="includeFormat">
            The include format string.
            </param>
            <param name="excludeFormat">
            The exclude format string.
            </param>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextCompositeFilter.CreateSubTextFilter(System.String)">
            <summary>
              Creates the sub text filter by the given format.
            </summary>
            <param name="format">
              A <b>string</b> value indicates the format string.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterEx2012.PreprocessFormatString(System.String)">
            <summary>
              Preprocess the format string.
            </summary>
            <param name="format">
              A <b>string</b> the format string.
            </param>
            <returns>
              The format string which is exclude normal character.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterForUnicode6_0.PreprocessFormatString(System.String)">
            <summary>
              Preprocess the format string.
            </summary>
            <param name="format">
              A <b>string</b> the format string.
            </param>
            <returns>
              The format string which is exclude normal character.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.TextFilterForUnicode6_0.ConvertedWithIVS(System.String,System.Int32,System.Int32@)">
            <summary>
            Convert the specific IVS character to non-IVS or non-IVS character to IVS.
            </summary>
            <param name="text">Indicates the string to be converted.</param>
            <param name="index">The character index in the string.</param>
            <param name="convertedCharacterNumber">Indicates the characters number used to converted.</param>
            <returns>
            
            </returns>
            <remarks>
            1. The return value is only contains the converted result from the specific converted charcter. 
            Other text in the input <paramref name="text"/> will not contained.
            2. If input is IVS character, converted and return the related non-IVS character.
            3. IF input is not IVS character, converted and return the related IVS character.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.UnionFilter">
            <summary>
              The filter for UnionFilter class
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.Filters.UnionFilter._filters">
            <summary>
              Indicates a filter group.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.UnionFilter.#ctor(C1.Win.C1Input.GrapeCity.Text.Filters.CharacterFilter[])">
            <summary>
              Initializes a new instance of the UnionFilter class.
            </summary>
            <param name="filters">
              The filters.
            </param>
        </member>
        <member name="T:C1.Win.C1Input.GrapeCity.Text.Filters.UpperKanaFilter">
            <summary>
              The filter for distinguish the Upper and Lower kana.
            </summary>
            <remarks>
              This filter will be used with the HalfWidthKatakanaFilter, FullWidthKatakanaFilter and HiraganaFilter.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.GrapeCity.Text.Filters.UpperKanaFilter.#ctor">
            <summary>
              Initializes a new instance of the HiraganaFilter class.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.DBCS_SPACE">
            <summary>
              An const <b>char</b> value indicates the DBCS space character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.SBCS_SPACE">
            <summary>
              An const <b>char</b> value indicates the SBCS space character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.SBCS_BACKSLASH">
            <summary>
              An const <b>char</b> value indicates the SBCS back slash character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.SBCS_CARET">
            <summary>
              An const <b>char</b> value indicates the SBCS caret character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.HORIZONTALTAB">
            <summary>
              An const <b>char</b> value indicates the horizontal tab character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.NEWLINE">
            <summary>
              An const <b>char</b> value indicates the new line character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.GrapeCity.Text.CharacterEncoding.CARRIAGERETURN">
            <summary>
              An const <b>char</b> value indicates the carriage return character.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1BasePicker">
            <summary>
            Base class for C1ColorPicker and C1FontPicker controls.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1BasePicker.ValueToTextArgs">
            <summary>
            This struct is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1BasePicker.TextToValueArgs">
            <summary>
            This struct is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1BasePicker.#ctor">
            <summary>
            Initializes a new instance of the C1BasePicker class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.DisplayFormat">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.EditFormat">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.ParseInfo">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.InterceptArrowKeys">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.AcceptsTab">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.AutoChangePosition">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.ButtonImages">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.CalendarType">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.CausesValidation">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.CurrentTimeZone">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.DateTimeInput">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.DaylightTimeAdjustment">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.DropDownFormClassName">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.DropDownStyle">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.GMTOffset">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.MinShortYear">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.PasswordChar">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.UpDownButtonAlignment">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.UserCultureOverride">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.UseSystemPasswordChar">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.WrapDateTimeFields">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1BasePicker.BorderStyle">
            <summary>
            Determines the style of the control's border.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1BasePicker.OnParsing(C1.Win.C1Input.ParseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1BasePicker.OnFormatting(C1.Win.C1Input.FormatEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1BasePicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1BasePicker.TextToValue(C1.Win.C1Input.C1BasePicker.TextToValueArgs@)">
            <summary>
            Should be overridden in deviced class and convert string to value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1BasePicker.ValueToText(C1.Win.C1Input.C1BasePicker.ValueToTextArgs@)">
            <summary>
            Should be overridden in derived class and convert value to string.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.C1Button">
            <summary>
            Represents a Windows button control supporting additional visual styles.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.#ctor">
            <summary>
            Initializes a new instance of the C1Button class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1Button.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1Button.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.C1Button.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.C1Button.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.C1Button.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:C1.Win.C1Input.C1Button.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Button.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.ResetVisualStyleBaseStyle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.ShouldSerializeVisualStyleBaseStyle">
            <summary>
            This method is for internal use only.
            </summary>
            <returns>True if VisualStyleBaseStyle should be serialized, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1Button.UseVisualStyleForeColor">
            <summary>
             Gets or sets a value that determines if the foreground is drawn using visual
             styles, if supported.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Button.DefaultThemeRootPath">
            <summary>
            Default Theme root path.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Button.ThemeChanged(System.Object)">
            <summary>
            This method is called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.C1Input.C1CheckBox">
            <summary>
            Represents a Windows checkbox control supporting data binding to data source fields of Boolean, String, or Integer types.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.#ctor">
            <summary>
            Initializes a new instance of the C1CheckBox class. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1CheckBox.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.DataSource">
            <summary>
            The data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.DataField">
            <summary>
            The field of the data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.DataType">
            <summary>
            Type of the Value property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.DisableOnNoData">
            <summary>
            Gets or sets whether the checkbox should be disabled when it is bound to an empty data source, i.e. CurrencyManager.Count = 0.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.Value">
            <summary>
            Gets or sets the current <see cref="P:C1.Win.C1Input.C1CheckBox.DataType"/> representation of the visual information contained in the control.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1CheckBox.ValueChanged">
            <summary>
            Occurs when the Value property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.OnValueChanged(System.EventArgs)">
            <summary>
            Invokes the ValueChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Invokes the CheckStateChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.TranslateValues">
            <summary>
            Translates between string values and check box states.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1CheckBox.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.BorderStyle">
            <summary>
            Gets or sets the border style of the C1CheckBox control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.BorderColor">
            <summary>
            Gets or sets the border color of the control.
            </summary>
            <remarks>
            <para>Use the <b>BorderColor</b> property to specify the border color of the control. 
            This property is set using a <see cref="T:System.Drawing.Color"/> object.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.DefaultCheckboxRootPath">
            <summary>
            Default C1CheckBox path in Theme xml file.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1CheckBox.DefaultButtonThemeRootPath">
            <summary>
            Default C1Button path in Theme xml file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CheckBox.ThemeChanged(System.Object)">
            <summary>
            This method called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.C1Input.TranslateValues">
            <summary>
            Translates between string values and check box states.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TranslateValues.Checked">
            <summary>
            Value for <b>Checked</b> state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TranslateValues.Unchecked">
            <summary>
            Value for <b>Unchecked</b> state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TranslateValues.Indeterminate">
            <summary>
            Value for <b>Indeterminate</b> state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TranslateValues.IndeterminateIsDbNull">
            <summary>
            Determines if DbNull is used for indeterminate state of check box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowColors.Custom">
            <summary>
            List of colors defined by Items property in format ColorValue;Alias.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowColors.SystemColors">
            <summary>
            System colors.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowColors.Web">
            <summary>
            Named colors.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1ColorPicker">
            <summary>
            Represents a Windows color picker control supporting additional visual styles.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorPicker.#ctor">
            <summary>
            Initializes a new instance of the C1ColorPicker class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ColorPicker.AllowTransparent">
            <summary>
            Gets or sets a value indicating whether the transparent color can de selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ColorPicker.AllowEmpty">
            <summary>
            Gets or sets a value indicating whether the empty color can de selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ColorPicker.Color">
            <summary>
            Gets or sets the current color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ColorPicker.EmptyColorCaption">
            <summary>
            Gets or sets a caption for the empty color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ColorPicker.Value">
            <summary>
            Gets or sets the current color representation of the visual information contained in the control.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1ColorPicker.ColorChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.C1Input.C1ColorPicker.Color"/> property changes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ColorPicker.DefaultThemeRootPath">
            <summary>
            Default path for the control in xml theme file.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1ColorPickerDropDownForm">
            <summary>
            Represents drop down color picker form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.#ctor">
            <summary>
            Initializes a new instance of the C1ColorPickerDropDownForm class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.OnPostChanges(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.OnVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:C1.Win.C1Input.C1ColorPickerDropDownForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorPickerDropDownForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1ColorSwatchPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorSwatchPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1ColorSwatchPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1CustomColorEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1CustomColorEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1CustomColorEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1ComboBox">
            <summary>
            Represents a composite control combining a textbox and a drop-down item list.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.#ctor">
            <summary>
            Initializes a new instance of the C1ComboBox class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.AutoSuggestMode">
            <summary>
            Gets or sets an option that controls how candidates searching works in auto-suggest mode. 
            </summary>
            <remarks>
            <para><see cref="P:C1.Win.C1Input.C1ComboBox.AutoSuggestMode"/> works together with <see cref="P:System.Windows.Forms.TextBox.AutoCompleteMode"/> and <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource"/> properties.
            The <see cref="T:C1.Win.C1Input.AutoSuggestMode"/> works only if <b>CustomSource</b>"/> or <b>ListItems</b> value is used in <see cref="T:System.Windows.Forms.TextBox.AutoCompleteSource"/>.
            The property does not have any effect if  <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource"/> is any of <b>AllSystemSources</b>, <b>AllUrl</b>, <b>FileSystem</b>, <b>FileSystemDirectories</b>, <b>HistoryList</b>, <b>None</b>, <b>RecentlyUsedList</b>, <b>HistoryList</b>.
            The property does not have any effect if  <see cref="P:System.Windows.Forms.TextBox.AutoCompleteMode"/> is any of <b>Node</b> or <b>Append</b>.</para>
            <para>
            Items in Auto-Suggest mode are shown without images and formatting as a plain text.
            </para>
            <para>
            <see cref="T:C1.Win.C1Input.C1ComboBox"/> enters in Auto-Suggest mode when user types a character sequence that matches the filtering criteria. 
            </para>        
            </remarks>
            <example>This sample shows how to use the AutoSuggestMode property.
            <code>
            C1ComboBox comboBox = new C1ComboBox();
            comboBox.AutoCompleteMode = AutoCompleteMode.Suggest;
            comboBox.AutoCompleteSource = AutoCompleteSource.ListItems;
            comboBox.AutoSuggestMode = AutoSuggestMode.Contains;
            comboBox.Items.AddRange(new string[]
                               {
                                   "January",
                                   "February",
                                   "March",
                                   "April",
                                   "May",
                                   "June",
                                   "July",
                                   "August",
                                   "September",
                                   "October",
                                   "November",
                                   "December"
                               });
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.AllowSpinLoop">
            <summary>
            Determines whether the spinner moves to the first item when it reaches the last, or to the last when it reaches the first.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.Items">
            <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ItemMode">
            <summary>
            Gets or sets the combobox item mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.HtmlPattern">
            <summary>
            Gets or sets the pattern to build HTML representation of combobox items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.SelectedItem">
            <summary>
            Gets or sets currently selected item in the ComboBox.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.SelectedIndex">
            <summary>
             Gets or sets the index specifying the currently selected item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ItemsImageList">
            <summary>
            Gets or sets the ImageList to get the images to display in the combobox items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.Style">
            <summary>
            Gets the style of the drop down form and combobox items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.InitialSelectedIndex">
            <summary>
            Gets or sets the index of the initially selected item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ItemsDataSource">
            <summary>
            Gets or sets the data source for items of this C1ComboBox.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ItemsDisplayMember">
            <summary>
            Gets or sets the property to display items for this C1ComboBox control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ItemsValueMember">
            <summary>
            Gets or sets the path of the property to use as the actual value for the items in the C1ComboBox control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ItemsImageMember">
            <summary>
            Gets or sets the path of the property to use as the image for the items in the C1ComboBox.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.UseItemsBindingSource">
            <summary>
            Keeps <see cref="P:C1.Win.C1Input.C1ComboBox.SelectedIndex"/> property synchronized with <see cref="P:System.Windows.Forms.BindingSource.Position"/>.
            </summary>
            <remarks>
            <see cref="P:C1.Win.C1Input.C1ComboBox.UseItemsBindingSource"/> does not have any effect if <see cref="P:C1.Win.C1Input.C1ComboBox.ItemsDataSource"/> value is not a <see cref="T:System.Windows.Forms.BindingSource"/>.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.TranslateValue">
            <summary>
            Translates <see cref="P:C1.Win.C1Input.C1TextBox.Value"/> to <see cref="P:C1.Win.C1Input.C1TextBox.Text"/> using items data source.
            <seealso cref="P:C1.Win.C1Input.C1ComboBox.ItemsDataSource"/>
            <seealso cref="P:C1.Win.C1Input.C1ComboBox.ItemsDisplayMember"/>
            <seealso cref="P:C1.Win.C1Input.C1ComboBox.ItemsValueMember"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.SetSelectedIndexImmediately">
            <summary>
            Gets whether the selected index changes immediately when the drop-down form is open or after the form is closed by pressing the 'enter' key.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.MaxDropDownItems">
            <summary>
            Gets or sets the maximum number of items to be shown in the drop-down portion of the <see cref="T:C1.Win.C1Input.C1ComboBox"/>.
            </summary>
            <remarks>
            <para>When MaxDropDownItems is 0, the height of DropDown is half of screen height.</para>
            <para>If MaxDropDownItems does not fit screen height then the result height fit the maximum available space on screen.</para>
            <para>The default height of item is height of first item of the <see cref="T:C1.Win.C1Input.C1ComboBox"/>.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.MouseWheelSelection">
            <summary>
            Gets or sets a value indicating whether the selected item changes using the mouse wheel when the <see cref="T:C1.Win.C1Input.C1ComboBox"/> isn't dropped down.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.HandleScrolling">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:C1.Win.C1Input.C1ComboBox"/> handles the scrolling of the parent control or not.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.ShowTooltip">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:C1.Win.C1Input.C1ComboBox"/> displays a tooltip for the highlighted drop-down list item or not.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.AllowPreload">
            <summary>
            Gets or sets a value that indicates whether <see cref="T:C1.Win.C1Input.C1ComboBox"/> should preload items into the dropdown form after setting the data source. 
            The default value is false which means that all items will be loaded at first drop-down opening.
            </summary>        
            <remarks>
            Set this value to true if you want to optimize drop-down opening time for a lot of items. Keep default value if you want to optimize form loading time.
            The <see cref="T:C1.Win.C1Input.C1ComboBox"/> does not support preloading items when the <see cref="P:C1.Win.C1Input.C1ComboBox.ItemsImageList"/> property is set for <see cref="T:C1.Win.C1Input.C1ComboBox"/>.<br/>
            If you change these properties, then <see cref="T:C1.Win.C1Input.C1ComboBox"/> will clear the preloaded items: <see cref="P:System.Windows.Forms.Control.RightToLeft"/>, <see cref="P:C1.Win.C1Input.C1ComboBox.ItemMode"/>, <see cref="P:C1.Win.C1Input.C1ComboBox.HtmlPattern"/>, 
            <see cref="P:C1.Win.C1Input.C1ComboBox.ItemsDisplayMember"/>, <see cref="P:C1.Win.C1Input.C1ComboBox.Style"/>, <see cref="P:System.Windows.Forms.ComboBox.DropDownWidth"/>.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBox.DropDownWidth">
            <summary>
            Gets or set the width of the drop down box in a combo box. 
            </summary>
            <remarks>
            To enable autosizing, set this properties to -1.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.SetItemsDataSource(System.Object,System.String)">
            <summary>
            Sets items data source and data member for the C1ComboBox.
            </summary>
            <param name="dataSource">Data source.</param>
            <param name="dataMember">Data member.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.SetItemsDataSource(System.Object,System.String,System.Int32)">
            <summary>
            Sets items data source, data member and initially selected item index for the C1ComboBox.
            </summary>
            <param name="dataSource">Data source.</param>
            <param name="dataMember">Data member.</param>
            <param name="selectedIndex">Initially selected item index.</param>
        </member>
        <member name="E:C1.Win.C1Input.C1ComboBox.SelectedItemChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Input.C1ComboBox.SelectedItem"/> changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1ComboBox.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Input.C1ComboBox.SelectedIndex"/> changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1ComboBox.TooltipShowing">
            <summary>
            Occurs before a tooltip is displayed for a highlighted drop-down list item. 
            Allows to set tooltip options or cancel the tooltip display.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.CreateItemsCollection">
            <summary>
            Creates a new instance of the item collection.
            </summary>
            <returns>A <see cref="T:C1.Win.C1Input.ComboBoxItemList"/> that represents the new item collection.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.OnSelectedItemChanged">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.C1ComboBox.SelectedItemChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.OnSelectedIndexChanged">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.C1ComboBox.SelectedIndexChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.OnTooltipShowing(C1.Win.C1Input.TooltipShowingEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.C1ComboBox.TooltipShowing"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.ClearSelected">
            <summary>
            Clears selected item and index without changing Text or Value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1ComboBox.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBox.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ComboItemMode">
            <summary>
            Specifies how the visual representation of combo box items is building.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ComboItemMode.Default">
            <summary>
            C1ComboBox displays text of combo box item in the drop drown list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ComboItemMode.Html">
            <summary>
            Each combo box item is fragment of HTML. <see cref="T:C1.Win.C1Input.C1ComboBox" /> parses the HTML fragment and displays it as the drop down items.
            </summary>
            <remarks>
            C1ComboBox uses the same subset of HTML as C1SuperLabel does. 
            It does not support the full HTML features.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.ComboItemMode.HtmlPattern">
            <summary>
            Each combo box item is fragment of HTML defined by <see cref="P:C1.Win.C1Input.C1ComboBox.HtmlPattern"/> property. 
            <see cref="T:C1.Win.C1Input.C1ComboBox" /> parses the HTML pattern and replaces any of "{FieldName}" entires with the combo box item field value.
            </summary>
            <remarks>
            C1ComboBox uses the same subset of HTML as C1SuperLabel does. 
            It does not support the full HTML features.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.DropDownStyle">
            <summary>
             Specifies the <see cref="T:C1.Win.C1Input.C1DropDownControl"/> style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownStyle.Default">
            <summary>
            Text portion of the drop down control is editable and the drop down is displayed by clicking 
            the down arrow.
            </summary>
            <remarks>
            This means that the user can enter a new value and is not limited to selecting an existing value.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.DropDownStyle.DropDownList">
            <summary>
            The drop down of the <see cref="T:C1.Win.C1Input.C1DropDownControl"/> is displayed by clicking 
            on either the text portion of the control or drop down button. The text portion is not editable. 
            </summary>
            <remarks>
            This means that the user cannot enter a value not existing in the drop down. 
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.ComboBoxPanelBase">
            <summary>
            <para>Panel that stacks children vertically and also honor sizing options for individual items.</para>
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxPanelBase.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.ComboBoxPanelBase"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxPanelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ColumnPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxPanelBase.ItemWidth">
            <summary>
            The item width to use at layout. If -1 - use width returned by item layout.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxPanelBase.MinItemHeight">
            <summary>
            The minimum allowed item hight.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxPanelBase.ItemMode">
            <summary>
            Gets or sets the combobox item mode.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ComboBoxItemList">
            <summary>
            Represents collection of <see cref="T:C1.Win.C1Input.C1ComboBox"/> drop down items.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.#ctor(C1.Win.C1Input.C1ComboBox)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxItemList.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxItemList.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/>.</param>      
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.AddRange(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds items of the specified collection to the end of the <see cref="T:C1.Win.C1Input.ComboBoxItemList" />.
            </summary>
            <param name="collection">The specified collection of items.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.Clear">
            <summary>
            Removes all items from the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.Contains(System.Object)">
            <summary>
            Determines whether an item is in the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/>.
            </summary>
            <param name="value">The item to locate in the collection.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.IndexOf(System.Object)">
            <summary>
            Searches for the specified item and returns the zero-based index.
            </summary>
            <param name="value">The specified item.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts item into the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/> at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <param name="value">The specified item.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts items into the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/> at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <param name="collection">The specified collection of items.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specified item from the collection.
            </summary>
            <param name="value">The specified item.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The specified index.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.RemoveAll(System.Predicate{System.Object})">
            <summary>
            Removes all the items that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/>.
            </summary>
            <param name="index">Index of the item.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/>.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.ComboBoxItemList.CollectionChanged">
            <summary>
            Occurs when the <see cref="T:C1.Win.C1Input.ComboBoxItemList"/> changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fires the CollectionChanged event.
            </summary>        
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Fires the CollectionChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Fires the CollectionChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{System.Object},System.Int32)">
            <summary>
            Fires the CollectionChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxItemList.OnCollectionReset">
            <summary>
            Fires the CollectionChanged event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1ComboBoxItemsForm.IsInitialized">
            <summary>
            Gets a value indicating whether selected item was set after form was initialized.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1ComboBoxItemsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBoxItemsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1ComboBoxItemsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ComboBoxStyle">
            <summary>
             Style for drop down form and combobox items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.DropDownBackColor">
            <summary>
            Background color of the drop down form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.DropDownBorderColor">
            <summary>
            Color of border of the drop down form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.Padding">
            <summary>
            Gets or sets padding within the drop down form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.Font">
            <summary>
            Default font of the combo box items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.TextSpacing">
            <summary>
            Space around the textual parts of the combo box items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.WordWrap">
            <summary>
            Gets or sets a value that whether text should be allowed to wrap within the combo box items.
            </summary>
            <remarks>
            This property applies to an item when the <see cref="P:C1.Win.C1Input.C1ComboBox.ItemMode"/> property is <see cref="F:C1.Win.C1Input.ComboItemMode.Default"/>.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.DefaultItemForeColor">
            <summary>
            Default text color of the combo box items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.HotItemForeColor">
            <summary>
            Text color of the combo box items in hot state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.HotItemBorderColor">
             <summary>
            Border color of the combo box items in hot state.
             </summary>
        </member>
        <member name="P:C1.Win.C1Input.ComboBoxStyle.HotItemBackColor">
            <summary>
            Background color of the combo box items in hot state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ComboBoxStyle.Reset">
            <summary>
            Resets the style to default value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ComboBoxSearchItemHelper">
            <summary>
            TFS 73648 [C1ComboBox] C1ComboBox cannot search items when DropDownStyle is DropDownList.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.TooltipShowingEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Input.C1ComboBox.TooltipShowing"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.TooltipShowingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.TooltipShowingEventArgs"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.TooltipShowingEventArgs.#ctor(System.Int32,System.String,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,C1.Win.C1SuperTooltip.C1SuperTooltipBase)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.TooltipShowingEventArgs"/> class.
            </summary>
            <param name="index">Index of the highlighted drop-down list item.</param>
            <param name="text">HTML content to be displayed in the tooltip.</param>
            <param name="bounds">Highlighted drop-down list item bounds (size and location of element) within its parent element, in pixels.</param>
            <param name="x">The X coordinate of the client where the tooltip should be displayed.</param>
            <param name="y">The Y coordinate of the client where the tooltip should be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds. The default value is 0 (the tooltip is always visible after display).</param>
            <param name="tooltip"><see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> object for setting tooltip options.</param>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Index">
            <summary>
            Gets the index of the highlighted drop-down list item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Text">
            <summary>
            Gets or sets the HTML content to be displayed in the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Bounds">
            <summary>
            Gets the highlighted drop-down list item bounds (size and location) within it`s parent element, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.X">
            <summary>
            Gets or sets the X coordinate of the client where the tooltip should be displayed. 
            The coordinate is counted from the upper left corner of the drop-down window.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Y">
            <summary>
            Gets or sets the Y coordinate of the client where the tooltip should be displayed. 
            The coordinate is counted from the upper left corner of the drop-down window.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Duration">
            <summary>
            Gets or sets the duration of the tooltip, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.TooltipShowingEventArgs.Tooltip">
            <summary>
            Gets the <see cref="T:C1.Win.C1SuperTooltip.C1SuperTooltipBase"/> object for setting tooltip options.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1DateEdit">
            <summary>
            This is a legacy control; use C1.Win.Calendar.C1DateEdit instead.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.C1DateEdit"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:C1.Win.C1Input.C1DateEdit"/>.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.InitialField">
            <summary>
            Determines the date-time field position when a control receives input focus. Default: <see cref="F:C1.Win.C1Input.DateTimeField.Manual"/>.
            </summary>
            <remarks>
            If this property is set to <see cref="F:C1.Win.C1Input.DateTimeField.Manual"/>, control used InitialSelection algorithm defined in the <see cref="P:C1.Win.C1Input.C1TextBox.InitialSelection"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.AllowSpinLoop">
            <summary>
            Determines whether the spinner moves to the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate"/> when it reaches the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate"/>, or to the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate"/> when it reaches the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.RetainTimeOnDateChange">
            <summary>
            Gets or sets a value indicating whether to retain the current time value when the date is changed via the drop down calendar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.DefaultDropDownFormClassName">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.TypeRestriction">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.Calendar">
            <summary>
            The dropdown calendar object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.ShouldSerializeCalendar">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.FormatType">
            <summary>
            Enumeration value determining the formatting metod, including standard .NET format specifiers, custom and programmatic formatting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.DataType">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.TextDetached">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.CausesValidation">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.NumericInput">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DateEdit.NumericInputKeys">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.OnUpDownButtonClick(C1.Win.C1Input.UpDownButtonClickEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.UpdateDataType(System.Type)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyType"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DateEdit.DataTypeChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.SpinUp">
            <summary>
              Performs spin up.
            </summary>
            <remarks>
              This method has the same behavior with the Up key pressed when day field selected and increments value by one day.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinDown"/>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.SpinUp(System.TimeSpan)">
            <summary>
              Performs spin up.
            </summary>
            <param name="increment">
              The <see cref="T:System.TimeSpan"/> value that indicates the increment when spin up.
            </param>
            <remarks>
              This method has the same behavior with the Up key pressed.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinDown(System.TimeSpan)"/>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.SpinDown">
            <summary>
              Performs spin down.
            </summary>
            <remarks>
              This method has the same behavior with the Down key pressed when day field selected and decrements value by one day.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinUp"/>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.SpinDown(System.TimeSpan)">
            <summary>
              Performs spin down.
            </summary>
            <param name="decrement">
              The <see cref="T:System.TimeSpan"/> value that indicates the decrement when spin down.
            </param>
            <remarks>
              This method has the same behavior with the Down key pressed.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1DateEdit.SpinUp(System.TimeSpan)"/>
        </member>
        <member name="M:C1.Win.C1Input.C1DateEdit.UpdateSelection">
            <summary>
            Updates selection of the text according to the <see cref="P:C1.Win.C1Input.C1TextBox.InitialSelection"/> property.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DateEditMonthCalendar">
            <summary>
            Represents drop down calendar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.#ctor">
            <summary>
            Creates the instance of the <see cref="T:C1.Win.C1Input.DateEditMonthCalendar"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.IC1GetAmbientValue(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyName">Ambient property name.</param>
            <returns>Ambient property value.</returns>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CurrentMonthDisplayOffset">
            <summary>
            Gets or sets the current month display offset.
            </summary>
            <example>
            This example shows current month at the center of the multi-dimensional 
            drop down calendar.
            <code>
              c1DateEdit1.Calendar.CalendarDimensions = new Size(3, 1);
              // Display current month at the center of the calendar.
              // Other possible values:
              // 0 - (Default) - at the Right
              // 1 - Center
              // 2 - Left
              c1DateEdit1.Calendar.CurrentMonthDisplayOffset = 1;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle">
            <summary>
            Gets or sets VisualStyle.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate">
            <summary>
            Gets or sets the value that is used by DateEditMonthCalendar as today's date.
            The default value is the current system date.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTodayDate">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTodayDate">
            <summary>
            Sets the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.TodayDate"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate">
            <summary>
            Gets or sets the minimum allowable date. The default value is DateTime.MinValue (01/01/0001).
            </summary>
            <exception cref="T:System.ArgumentException">
            The value is greater than the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate"/>.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeMinDate">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetMinDate">
            <summary>
            Sets the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate">
            <summary>
            Gets or sets the maximum allowable date.
            </summary>
            <exception cref="T:System.ArgumentException">
            The value is less than the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MinDate"/>.
            </exception>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeMaxDate">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetMaxDate">
            <summary>
            Sets the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MaxDate"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DateIsNull">
            <summary>
            Gets or sets the value indicating that no date is currently selected in the calendar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.SelectionForeColor">
            <summary>
            Gets or sets the selection foreground color.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeSelectionForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetSelectionForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.SelectionBackColor">
            <summary>
            Gets or sets the selection background color.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeSelectionBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetSelectionBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.LineColor">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeLineColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetLineColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ArrowColor">
            <summary>
            Gets or sets the color of the arrows.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeArrowColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetArrowColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TodayBorderColor">
            <summary>
            Gets or sets the color of the border around the current date.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTodayBorderColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTodayBorderColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TrailingForeColor">
            <summary>
             Gets or sets a value indicating the color of days in months that are not
                fully displayed in the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTrailingForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTrailingForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DayNamesColor">
            <summary>
            Gets or sets the day names' text color.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDayNamesColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDayNamesColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleBackColor">
            <summary>
            Gets or sets a value indicating the background color of the title area of the calendar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleBackColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleBackColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleForeColor">
            <summary>
            Gets or sets a value indicating the foreground color of the title area of the calendar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleForeColor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleForeColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.FirstMonth">
            <summary>
            Gets the first day of the first fully shown month.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.LastMonth">
            <summary>
            Gets the last day of the last fully shown month.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate">
            <summary>
            Gets or sets the selected date.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeSelectedDate">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetSelectedDate">
            <summary>
            Sets the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.SelectedDate"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions">
            <summary>
            Gets or sets the number of columns and rows of months displayed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeCalendarDimensions">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetCalendarDimensions">
            <summary>
            Sets the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarDimensions"/> property to its default value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.FirstDayOfWeek">
            <summary>
            Gets or sets the first day of the week as displayed in the month calendar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CaptionFormat">
            <summary>
            Gets or sets the format to use for the calendar caption.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DayNameLength">
            <summary>
            Gets or sets the maximum length of day names.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDayNameLength">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDayNameLength">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleHeight">
            <summary>
            Gets or sets the title height.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleHeight">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleHeight">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TitleFont">
            <summary>
            Gets or sets the title font.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeTitleFont">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetTitleFont">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DayNamesFont">
            <summary>
            Gets or sets the day names font.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDayNamesFont">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDayNamesFont">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates">
            <summary>
            Gets or sets the array of System.DateTime objects that determines which nonrecurring dates are displayed in bold.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeBoldedDates">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetBoldedDates">
            <summary>
            Clears <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.BoldedDates"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates">
            <summary>
            Gets or sets the array of System.DateTime objects that determines which annual days are displayed in bold.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeAnnuallyBoldedDates">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetAnnuallyBoldedDates">
            <summary>
            Clears <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.AnnuallyBoldedDates"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates">
            <summary>
            Gets or sets the array of System.DateTime objects that determine which monthly days to bold.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeMonthlyBoldedDates">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetMonthlyBoldedDates">
            <summary>
            Clears <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.MonthlyBoldedDates"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DisabledDates">
            <summary>
            Gets or sets the array of System.DateTime objects that determines which dates are disabled.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ShouldSerializeDisabledDates">
            <summary>
            Indicates whether the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.DisabledDates"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.DisabledDates"/> property value has been changed from its default; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDisabledDates">
            <summary>
            Clears <see cref="M:C1.Win.C1Input.DateEditMonthCalendar.ResetDisabledDates"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowToday">
            <summary>
            Gets or sets a value indicating whether the date represented by the TodayDate property is displayed at the bottom of the control. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowTodayCircle">
            <summary>
            Gets or sets a value indicating whether today's date is circled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowTodayButton">
            <summary>
            Determines if the Today button of the dropdown calendar is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowClearButton">
            <summary>
            Determines if the Clear button of the dropdown calendar is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TodayText">
            <summary>
            Gets or sets the text of the "Today" button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ClearText">
            <summary>
            Gets or sets the text of the "Clear" button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CalendarWeekRule">
            <summary>
            Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ShowWeekNumbers">
            <summary>
            Gets or sets a value indicating whether the month calendar control displays
               week numbers (1-52) to the left of each row of days.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.RightToLeft">
            <summary>
            Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.RightToLeftLayout">
            <summary>
            Gets or sets a value indicating whether the control is laid out from right to left.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TodayButtonClick">
            <summary>
            Occurs when Today button is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnTodayButtonClick(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.FireTodayButtonClick">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.ClearButtonClick">
            <summary>
            Occurs when Clear button is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnClearButtonClick(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.FireClearButtonClick">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TodayButtonVisibilityChanged">
            <summary>
            Occurs when Today button visibility is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnTodayButtonVisibilityChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.ClearButtonVisibilityChanged">
            <summary>
            Occurs when Clear button visibility is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnClearButtonVisibilityChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DateValueChanged">
            <summary>
            Occurs when the value of the Date property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnDateValueChanged(C1.Win.C1Input.NullableDateTimeEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DateValueSelected">
            <summary>
            Occurs when the user selects a value for the Date property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnDateValueSelected(C1.Win.C1Input.NullableDateTimeEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.RightToLeftLayoutChanged">
            <summary>
            Occurs when the value of the RightToLeftLayout property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnRightToLeftLayoutChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DateEditMonthCalendar.RightToLeftLayoutChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.MonthChanged">
            <summary>
            Handles the month change in the Dropdown calendar in C1DateEdit. 
            Occurs when the value of the <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.FirstMonth"/> or <see cref="P:C1.Win.C1Input.DateEditMonthCalendar.LastMonth"/> property changes.
            </summary>
            <remarks>
            Can be used to set some dates in the month to bold as user scrolls through the months.
            </remarks>
            <example>
            This example sets a new bolded date in the selected month.
            <code>
            private void c1DateEdit1_Calendar_MonthChanged(object sender, EventArgs e)
            {
               DateTime dt = c1DateEdit1.Calendar.FirstMonth;
               c1DateEdit1.Calendar.AddBoldedDate(new DateTime(dt.Year, dt.Month, dt.Month));
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnMonthChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DateEditMonthCalendar.MonthChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ContainsDate(System.DateTime)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SuspendAllLayout">
            <summary>
            Calls SuspendLayout on all DateEditMonthCalendar's child controls.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.ResumeAllLayout(System.Boolean)">
            <summary>
            Calls ResumeLayout on all DateEditMonthCalendar's child controls.
            </summary>
            <param name="performLayout">Indicates whether to invoke the layout logic now.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddAnnuallyBoldedDate(System.DateTime)">
            <summary>
            Adds a day that is displayed in bold on an annual basis in the month calendar.
            </summary>
            <param name="date">The date to be displayed in bold.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddBoldedDate(System.DateTime)">
            <summary>
            Adds a day to be displayed in bold in the month calendar.
            </summary>
            <param name="date">The date to be displayed in bold.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddDisabledDate(System.DateTime)">
            <summary>
            Adds a day to be disabled in the month calendar.
            </summary>
            <param name="date">The date to be disabled.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.AddMonthlyBoldedDate(System.DateTime)">
            <summary>
            Adds a day that is displayed in bold on a monthly basis in the month calendar.
            </summary>
            <param name="date">The date to be displayed in bold.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllAnnuallyBoldedDates">
            <summary>
            Removes all the annually bold dates.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllBoldedDates">
            <summary>
            Removes all the nonrecurring bold dates.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllDisabledDates">
            <summary>
            Removes the all disabled dates.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAllMonthlyBoldedDates">
            <summary>
            Removes all the monthly bold dates.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveAnnuallyBoldedDate(System.DateTime)">
            <summary>
            Removes the specified date from the list of annually bold dates.
            </summary>
            <param name="date">The date to remove from the date list.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveBoldedDate(System.DateTime)">
            <summary>
            Removes the specified date from the list of nonrecurring bold dates.
            </summary>
            <param name="date">The date to remove from the date list.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveDisabledDate(System.DateTime)">
            <summary>
            Removes the specified date from the list of disabled dates.
            </summary>
            <param name="date">The date to remove from the date list.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.RemoveMonthlyBoldedDate(System.DateTime)">
            <summary>
            Removes the specified date from the list of monthly bolded dates.
            </summary>
            <param name="date">The date to remove from the date list.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SetCalendarDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the number of columns and rows of months to display.
            </summary>
            <param name="x">The number of columns.</param>
            <param name="y">The number of rows.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SetDate(System.DateTime)">
            <summary>
            Sets a date as the currently selected date.
            </summary>
            <param name="date">The date to be selected.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.GetDisplayRange(System.Boolean)">
            <summary>
            Retrieves date information that represents the low and high limits of the displayed dates of the control.
            </summary>
            <param name="visible">true to retrieve only the dates that are fully contained in displayed months; otherwise, false.</param>
            <returns>The begin and end dates of the displayed calendar.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.SetSelectionRange(System.DateTime,System.DateTime)">
            <summary>
            Sets the selected dates in a month calendar control to the specified date range.
            </summary>
            <param name="date1">The beginning date of the selection range.</param>
            <param name="date2">The end date of the selection range.</param>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.HitTest(System.Drawing.Point)">
            <summary>
            Returns an object with information on which portion of a month calendar control
                is at a location specified by a System.Drawing.Point.
            </summary>
            <param name="point">A System.Drawing.Point containing the System.Drawing.Point.X and System.Drawing.Point.Y
                coordinates of the point to be hit tested.</param>
            <returns>A System.Windows.Forms.MonthCalendar.HitTestInfo that contains information
                about the specified point on the month calendar.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a System.Windows.Forms.MonthCalendar.HitTestInfo with information
                on which portion of a month calendar control is at a specified x- and y-coordinate.
            </summary>
            <param name="x">The System.Drawing.Point.Y coordinate of the point to be hit tested.</param>
            <param name="y">The System.Drawing.Point.X coordinate of the point to be hit tested.</param>
            <returns>A System.Windows.Forms.MonthCalendar.HitTestInfo that contains information
                about the specified point on the month calendar.</returns>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Margin">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MinimumSize">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.MaximumSize">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Size">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.AllowDrop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CausesValidation">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Dock">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Anchor">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Location">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TabIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.TabStop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Tag">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Visible">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.DataBindings">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Controls">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Name">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.BackgroundImageLayout">
            <summary>
            Gets or sets a value indicating the layout for the BackgroundImage.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.ImeMode">
            <summary>
            Gets or sets the Input Method Editor (IME) mode supported by this control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Padding">
            <summary>
            Gets or sets the space between the edges of a control and its contents.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.Text">
            <summary>
            Gets or sets the text to display.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.BackgroundImageChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.BindingContextChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.CausesValidationChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DockChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DragDrop">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DragEnter">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DragLeave">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.DragOver">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.Enter">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.Leave">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.GiveFeedback">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.ImeModeChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.QueryContinueDrag">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TabIndexChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TabStopChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.TextChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.Validating">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DateEditMonthCalendar.Validated">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Input.DateEditMonthCalendar.CurrentCulture">
            <summary>
            Get or sets current culture for the calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateEditMonthCalendar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DateEditMonthCalendar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1OneMonthCalendar">
            <summary>
            Represents a control that enables the user to select a date using a visual monthly calendar display.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.C1OneMonthCalendar"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeKind">
            <summary>
            Represents how the user changed the date.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1OneMonthCalendar.UserChangeKind.None">
            <summary>
            No changes (default value).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1OneMonthCalendar.UserChangeKind.DateClicked">
            <summary>
            Date changed by mouse click.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1OneMonthCalendar.UserChangeKind.DateChanged">
            <summary>
            Date changed by keyboard input.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs">
            <summary>
            Represents data for <see cref="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventHandler"/> delegate.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs.UserChangeKind">
            <summary>
            Represents how the user changed the date.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs.#ctor(C1.Win.C1Input.C1OneMonthCalendar.UserChangeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs"/> class.
            </summary>
            <param name="userChangeKind">The <see cref="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventHandler"/> to assign.</param>
        </member>
        <member name="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventHandler">
            <summary>
            Represents the method that handle the user modified date event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.C1OneMonthCalendar.UserChange">
            <summary>
            Fires when user modified the date.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.OnUserChange(C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs)">
            <summary>
            Raises the <see cref="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventHandler"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Input.C1OneMonthCalendar.UserChangeEventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.C1OneMonthCalendar.SelectedDateChanged">
            <summary>
            Fires when selected date changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.OnSelectedDateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="T:System.EventHandler"/> event when selected date changed.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.C1OneMonthCalendar.MonthChanged">
            <summary>
            Fires when month changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.OnMonthChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="T:System.EventHandler"/> event when month changed.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.DayOfWeekToAbsIndex(System.DayOfWeek)">
            <summary>
            Returns Sunday-based day of week index (0 for Sunday, 1 for Monday etc.)
            </summary>
            <param name="dayOfWeek">Day of week to test.</param>
            <returns>0-based absolute day of week index.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TodayDate">
            <summary>
            Gets or sets today's date.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.Month">
            <summary>
            Gets or sets the month shown by the calendar.
            The day/time parts of the DateTime value are ignored.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.SelectedDate">
            <summary>
            Gets or sets the selected date. The selected date determines the
            "main" month shown by the calendar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.ShowLeadingDays">
            <summary>
            Gets or sets whether leading days should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.ShowTrailingDays">
            <summary>
            Gets or sets whether trailing days should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.Calendar">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Input.C1OneMonthCalendar.Calendar"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.CurrentCulture">
            <summary>
            Gets or sets the current <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.CalendarWeekRule">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Input.C1OneMonthCalendar.CalendarWeekRule"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.ShowWeekNumbers">
            <summary>
            Gets or sets whether to show week numbers.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.SelectionForeColor">
            <summary>
            Gets or sets the selection text color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.SelectionBackColor">
            <summary>
            Gets or sets the background color of the selection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TitleForeColor">
            <summary>
            Gets or sets the color of the title text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TitleBackColor">
            <summary>
            Gets or sets the background color of the title.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.LineColor">
            <summary>
            Gets or sets the line color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TodayBorderColor">
            <summary>
            Gets or sets the border color of today's date.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TrailingForeColor">
            <summary>
            Gets or sets the trailing text color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.DayNamesColor">
            <summary>
            Gets or sets the day names color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.FirstDayOfWeek">
            <summary>
            Gets or sets the first <see cref="T:System.Windows.Forms.Day"/> of week.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TitleFormat">
            <summary>
            Gets or sets the title format.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TitleFont">
            <summary>
            Gets or sets the title <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.DayNamesFont">
            <summary>
            Gets or sets the day names <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.DayNameLength">
            <summary>
            Gets or sets the day name length.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.TitleHeight">
            <summary>
            Gets or sets the title height.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.BoldedFont">
            <summary>
            Gets or sets the bolded font.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.BoldedDates">
            <summary>
            Gets or sets the array of bolded dates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.MaxDate">
            <summary>
            Gets or sets the maximum date for the calendar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.MinDate">
            <summary>
            Gets or sets the minimum date for the calendar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.DisabledDates">
            <summary>
            Gets or sets the array of disabled dates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.AnnuallyBoldedDates">
            <summary>
            Gets or sets the array of annually bolded dates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.MonthlyBoldedDates">
            <summary>
            Gets or sets the array of monthly bolded dates.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.ShowTodayCircle">
            <summary>
            Gets or sets whether to show a circle around today's date.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.FirstVisibleDay">
            <summary>
            Gets the first visible day.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1OneMonthCalendar.LastVisibleDay">
            <summary>
            Gets the last visible day.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.ContainsDate(System.DateTime)">
            <summary>
            Determines whether the specified date is in the current month.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/>.</param>
            <returns>True if specified date is in the current month; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.IsBoldedDate(System.DateTime)">
            <summary>
            Determines whether the specified date is shown in bold on the calendar.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/>.</param>
            <returns>True if specified date is shown in bold on the calendar; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.IsEnabledDate(System.DateTime)">
            <summary>
            Determines whether the specified date is enabled in the calendar.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/>.</param>
            <returns>True if specified date is enabled in the calendar; otherwise, false.</returns>
        </member>
        <member name="F:C1.Win.C1Input.C1OneMonthCalendar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1OneMonthCalendar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownCalendar">
            <summary>
            Represents drop down calendar form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalendar.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Input.DropDownCalendar"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalendar.CreateCalendar">
            <summary>
            Used to defer creating the calendar till really needed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownCalendar.Calendar">
            <summary>
            Calendar.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalendar.OnPostChanges(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:C1.Win.C1Input.DropDownCalendar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalendar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalendar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.JapaneseEraHelper">
            <summary>
            Helper static class that contains AddJapaneseEra function.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.JapaneseEraHelper.ClearJapaneseEras">
            <summary>
            Clears the all Japanese Eras.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.JapaneseEraHelper.AddJapaneseEra(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
            Adds era to the Japanese calendar.
            </summary>
            <param name="era">Era numeric id.</param>
            <param name="startTime">Start day of the era.</param>
            <param name="endTime">End day of the era.</param>
            <param name="eraName">Japanese name of the era.</param>
            <param name="abbreviatedEraName">Short Japanese name of the era.</param>
            <param name="englishEraName">Era name in English. Optional.</param>
            <param name="symbolEraName">One Latin symbol era name.</param>
        </member>
        <member name="M:C1.Win.C1Input.JapaneseEraHelper.ReadErasFromGCConfig(System.String)">
            <summary>
            Reads eras info from the GC configuration file.
            </summary>
            <param name="sectionName">Section name.</param>
        </member>
        <member name="T:C1.Win.C1Input.C1DbNavigator">
            <summary>
            Represents a data bound control supporting convenient navigation over data source rows and common data actions such as updating the data source and refreshing data.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1DbNavigator._positionVisible">
            <summary>
            if true, "Row: X of N" is shown (label + textbox + label)
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.#ctor">
            <summary>
            Initializes a new instance of the C1DbNavigator class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1DbNavigator.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.IC1GetAmbientValue(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyName">Ambient property name.</param>
            <returns>Ambient property value.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.BeginInit">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.EndInit">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.Text">
            <summary>
            Gets or sets value of the Position textbox.
            </summary>
            <remarks>
            <para>If the Position textbox is not visible, it returns empty string.</para>
            <para>If you set the Text property when the Position textbox is not visible, 
            the action has no effect.</para>
            <para>Changing the Text property causes the data source position change.</para>
            </remarks>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.TextChanged">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Input.C1DbNavigator.Text">Text</see> property value changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.C1DbNavigator.TextChanged">TextChanged</see> event. 
            </summary>
            <param name="e">An EventArgs that contains event data.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.C1DbNavigator.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.C1DbNavigator.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.C1DbNavigator.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetVisualStyleBaseStyle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeVisualStyleBaseStyle">
            <summary>
            This method is for internal use only.
            </summary>
            <returns>True if VisualStyleBaseStyle should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnBackColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.AutoSize">
            <summary>
            Specifies if navigator buttons have color bitmaps.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ColorButtons">
            <summary>
            Specifies if navigator buttons have color bitmaps.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ColorWhenHover">
            <summary>
            If True, navigator buttons show color bitmaps when the mouse hovers over them.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.BorderStyle">
            <summary>
            Navigator border style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonStyle">
            <summary>
            Navigator button style.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.VerticalAlign">
            <summary>
            Vertical alignment of navigator buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.VerticalIndent">
            <summary>
            Vertical margin between the border and the buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.HorizontalIndent">
            <summary>
            Horizontal margin between the border and the buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ImageList">
            <summary>
            Gets or sets the ImageList to use when displaying button images without highlighting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ImageListHighlight">
            <summary>
            Gets or sets the ImageList to use when displaying button images in highlighted state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ShowToolTips">
            <summary>
            Indicates whether tooltips are shown for the buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ForeColor">
            <summary>
            This member overrides Control.ForeColor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.BackColor">
            <summary>
            This member overrides Control.BackColor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetBackColor">
            <inheridock/>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.MoveDelayFirst">
            <summary>
            Time delay in milliseconds after pressing Next/Previous button before automatic scrolling begins.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.MoveDelayNext">
            <summary>
            Time delay in milliseconds between row moves in automatic scrolling.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.PageSize">
            <summary>
            Number of rows to skip when the user presses PageUp/Down.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.PositionVisible">
            <summary>
            Specifies whether the editable row position field and row captions are visible in the navigator.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.TabStop">
            <summary>
            This member overrides Control.TabStop.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.VisibleButtons">
            <summary>
            Flags enumeration specifying which buttons are visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.EnabledButtons">
            <summary>
            Flags enumeration specifying which buttons are enabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ConfirmDelete">
            <summary>
            Whether a confirmation dialog is shown before deleting a record.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.CausesFormValidation">
            <summary>
            Whether the control in focus should be validated before a button click is handled by the navigator.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.DataSource">
            <summary>
            The data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.DataMember">
            <summary>
            "For multi-table data sources, specifies a specific table to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.RowCount">
            <summary>
            Returns the number of rows in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.Position">
            <summary>
            Gets or sets the current row position in the table (from 0 to RowCount - 1).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.CurrencyManager">
            <summary>
            Gets or sets the CurrencyManager object navigated by the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonSize">
            <summary>
            The size of navigator buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonSize">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonSize">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonTextAlign">
            <summary>
            Controls how the text is positioned relative to the image in navigator buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonTexts">
            <summary>
            Gets or sets the texts displayed on the buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonTexts">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonTexts">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonToolTips">
            <summary>
            The string collection defining navigator button tooltips.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonToolTips">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonToolTips">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.UIStrings">
            <summary>
            Gets the collection of user interface strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.Captions">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ToolTips">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ErrorProvider">
            <summary>
            Gets or sets an ErrorProvider object used to indicate error state of the current data row.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.ButtonCursor">
            <summary>
            The cursor that is displayed when the mouse is over the navigator buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ShouldSerializeButtonCursor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ResetButtonCursor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.RightToLeft">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.RightToLeftChanged">
            <summary>
            Occurs when <see cref="P:C1.Win.C1Input.C1DbNavigator.RightToLeft"/> property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Input.C1DbNavigator.RightToLeftChanged"/> event.
            </summary>
            <param name="e">The event data object.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.AutoScroll">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.AutoScrollMargin">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.AutoScrollMinSize">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.AutoScrollPosition">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DbNavigator.DockPadding">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ClickButton(C1.Win.C1Input.NavigatorButtonEnum)">
            <summary>
            Performs the action associated with a navigator button.
            </summary>
            <param name="button">The button whose action is performed.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.SetDataBinding(System.Object,System.String)">
            <summary>
            Sets the DataSource and DataMember properties at run time.
            </summary>
            <param name="dataSource">The data source object to which the control is bound.</param>
            <param name="dataMember">For multi-table data sources, specifies a specific table to which the control is bound.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.PositionChanged">
            <summary>
            Occurs when the Position has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnPositionChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.ItemChanged">
            <summary>
            Occurs when the current row has been modified, some of its fields changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.BeforeAction">
            <summary>
            Occurs when a button is clicked, before the action is executed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnBeforeAction(C1.Win.C1Input.NavigatorBeforeActionEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.Adding">
            <summary>
            Occurs when Add button is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnAdding(C1.Win.C1Input.NavigatorAddingEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.Deleting">
            <summary>
            Occurs when Delete button is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnDeleting(C1.Win.C1Input.NavigatorDeletingEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.Editing">
            <summary>
            Occurs when Edit button is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnEditing(C1.Win.C1Input.NavigatorEditingEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.UpdateData">
            <summary>
            Occurs when Update button is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnUpdateData(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.RefreshData">
            <summary>
            Occurs when Refresh button is pressed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnRefreshData(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.ButtonClick">
            <summary>
            Occurs when a navigator button has been pressed, after the button action is performed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnButtonClick(C1.Win.C1Input.NavigatorButtonClickEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.Error">
            <summary>
            Occurs when an exceptions is thrown performing an action on button click.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnError(C1.Win.C1Input.NavigatorErrorEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DbNavigator.ButtonCursorChanged">
            <summary>
            Event fired when the value of ButtonCursor property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnButtonCursorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.OnEnabledChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DbNavigator.ThemeChanged(System.Object)">
            <summary>
            Changes the theme.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorButtonEnum">
            <summary>
            A list of all available navigator buttons
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.First">
            <summary>
            First button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Previous">
            <summary>
            Previous button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Next">
            <summary>
            Next button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Last">
            <summary>
            Last button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Add">
            <summary>
            Add button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Delete">
            <summary>
            Delete button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Edit">
            <summary>
            Edit button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Apply">
            <summary>
            Apply button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Cancel">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Update">
            <summary>
            Update button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Refresh">
            <summary>
            Refresh button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonEnum.Position">
            <summary>
            Position text box
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorBeforeActionEventHandler">
            <summary>
            Represents the method that handles a BeforeAction event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NavigatorBeforeActionEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorBeforeActionEventArgs">
            <summary>
            Provides data for a BeforeAction event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorBeforeActionEventArgs.Button">
            <summary>
            The clicked button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorBeforeActionEventArgs.Index">
            <summary>
            Current row index in the data source (only for Delete and Edit buttons).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorBeforeActionEventArgs.Cancel">
            <summary>
            This argument is False by default. If you set it to True in your event code, the navigator control will skip the standard action associated with the button. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorAddingEventHandler">
            <summary>
            Represents the method that handles an Adding event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NavigatorAddingEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorAddingEventArgs">
            <summary>
            Provides data for a Adding event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorAddingEventArgs.Cancel">
            <summary>
            This argument is False by default. If you set it to True in your event code, the navigator control will abort adding a new row. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorDeletingEventHandler">
            <summary>
            Represents the method that handles a Deleting event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NavigatorDeletingEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorDeletingEventArgs">
            <summary>
            Provides data for a Deleting event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorDeletingEventArgs.Index">
            <summary>
            The index of the row being deleted.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorDeletingEventArgs.Cancel">
            <summary>
            This argument is False by default. If you set it to True in your event code, the navigator control will abort deleting. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorEditingEventHandler">
            <summary>
            Represents the method that handles a Editing event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NavigatorEditingEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorEditingEventArgs">
            <summary>
            Provides data for a Editing event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorEditingEventArgs.Index">
            <summary>
            The index of the row being edited.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorButtonClickEventHandler">
            <summary>
            Represents the method that handles a ButtonClick event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NavigatorButtonClickEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorButtonClickEventArgs">
            <summary>
            Provides data for a ButtonClick event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorButtonClickEventArgs.Button">
            <summary>
            The clicked button.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorErrorEventHandler">
            <summary>
            Represents the method that handles an Error event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NavigatorErrorEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorErrorEventArgs">
            <summary>
            Provides data for an Error event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.Button">
            <summary>
            The clicked C1DbNavigator button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.Exception">
            <summary>
            Exception that occurred while performing the button action.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.ShowErrorMessage">
            <summary>
            This argument is set to true by default. If it is set to False by event code, the standard message box is not shown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.ErrorMessage">
            <summary>
            Error message shown in the standard message box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NavigatorErrorEventArgs.ErrorMessageCaption">
            <summary>
            The caption of the standard message box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorButtonStyleEnum">
            <summary>
            Used by C1DbNavigator.ButtonStyle property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonStyleEnum.Flat">
            <summary>
            Flat buttons showing "mouse hover".
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonStyleEnum.Standard">
            <summary>
            Standard 3D-buttons.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorVerticalAlignEnum">
            <summary>
            Used by C1DbNavigator.VerticalAlign property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorVerticalAlignEnum.Top">
            <summary>
            Buttons are aligned with the top of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorVerticalAlignEnum.Middle">
            <summary>
            Buttons are aligned with the center of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorVerticalAlignEnum.Bottom">
            <summary>
            Buttons are aligned with the bottom of the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorButtonTextAlignEnum">
            <summary>
            Used by C1DbNavigator.ButtonTextAlign property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonTextAlignEnum.Right">
            <summary>
            Text appears to the right of the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonTextAlignEnum.Underneath">
            <summary>
            Text appears underneath the image.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NavigatorButtonFlags">
            <summary>
            Used by C1DbNavigator.VisibleButtons property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.None">
            <summary>
            No buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.First">
            <summary>
            Moves to the first row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Previous">
            <summary>
            Moves to the previous row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Next">
            <summary>
            Moves to the next row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Last">
            <summary>
            Moves to the last row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Add">
            <summary>
            Adds a new row to the table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Delete">
            <summary>
            Deletes the current row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Edit">
            <summary>
            Fires the Editing event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Apply">
            <summary>
            Ends edit mode for the current row. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Cancel">
            <summary>
            Cancels (reverts) modifications in the current row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Update">
            <summary>
            Fires the UpdateData event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Refresh">
            <summary>
            Fires the RefreshData event. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.Navigation">
            <summary>
            First + Previous + Next + Last buttons
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NavigatorButtonFlags.All">
            <summary>
            All buttons.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1DropDownControl">
            <summary>
            Represents a base drop-down control supporting up/down buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.#ctor">
            <summary>
            Initializes a new instance of the C1DropDownControl class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1DropDownControl.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ImageTransparentColor">
            <summary>
            Gets or sets the color to treat as transparent in a image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.AutoOpen">
            <summary>
            Gets or sets a value indicating whether to open the combo box when the control receives the focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownFormCreationTime">
            <summary>
            Determines the time when drop down form is created.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ImagePlace">
            <summary>
            Has valid value only if ShowValueImage returns true.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownStyle">
            <summary>
            Gets or sets the style of the combo box.
            </summary>
            <remarks>
            The DropDownStyle property specifies whether the text portion can be edited.
            <para>
            If the value is Default, the text is editable and the dropdown list is displayed by clicking the down arrow.
            </para>
            <para>
            If the value is DropDownList, the text is not editable and the dropdown list is displayed by clicking any part of the control. 
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.Image">
            <summary>
            Gets or sets the button image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ImageIndex">
            <summary>
            Gets or sets the index of the button image in the ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ImageKey">
            <summary>
            Gets or sets the key of the button image in the ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ImageList">
            <summary>
            Gets or sets the ImageList to get the images to display in the drop down items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ImagePadding">
            <summary>
            Gets or sets the image padding.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.VisibleButtons">
            <summary>
            Gets or sets a value specifying which buttons are visible. The default is (UpDown Or DropDown).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ShowDropDownButton">
            <summary>
            Determines if the dropdown button is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ShowUpDownButtons">
            <summary>
            Determines if the up/down buttons are visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ShowModalButton">
            <summary>
            Determines if the modal button is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ShowCustomButton">
            <summary>
            Determines if the modal button is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.InterceptArrowKeys">
            <summary>
            Determines if the up/down buttons intercept and handle Up and Down arrow keys.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownFormClassName">
            <summary>
            Specifies the class name of a Form serving as the dropdown window.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldSerializeDropDownFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ResetDropDownFormClassName">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownForm">
            <summary>
            Returns dropdown form instance associated with the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultDropDownFormClassName">
            <summary>
            Specifies form class that is used by default as the dropdown for the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultDropDownForm">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultSize">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DroppedDown">
            <summary>
            Run-time read-only property indicating if the dropdown is currently open.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ButtonWidth">
            <summary>
            Specifies the button width instead of using the default width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.GapHeight">
            <summary>
            Distance in pixels between the control edge and the dropdown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.MouseClickPassThrough">
            <summary>
            Gets or sets whether the mouse click event is consumed or passed through after closing the dropdown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownFormAlign">
            <summary>
            Alignment of the dropdown form relative to the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ButtonCursor">
            <summary>
            The cursor that is displayed when the mouse is over a button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldSerializeButtonCursor">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ResetButtonCursor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ButtonImages">
            <summary>
            Gets or sets the images for buttons
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldSerializeButtonImages">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ResetButtonImages">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.Cursor">
            <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DropDownAlign">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.CustomAreaPlace">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.CustomAreaWidth">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.UpDownButtonAlignment">
            <summary>
            Gets or sets the alignment of the spin button. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.Lines">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ScrollBars">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.AcceptsReturn">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.Multiline">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.WordWrap">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.SetProposedValue(System.Object)">
            <summary>
            This method works exactly as setting the Value property, except that it does not change the internal variable
            storing the value before editing, so the user can press Esc and restore the previous value. 
            This method works only in edit  or DropDownList mode. If the control is not in edit or DropDownList mode, this methods does nothing.
            </summary>
            <param name="value">Value to set to the control.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OpenDropDown">
            <summary>
            Shows the dropdown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.CloseDropDown">
            <summary>
            Closes the dropdown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.CloseDropDown(System.Boolean)">
            <summary>
            Closes the dropdown.
            </summary>
            <param name="doPost"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.SpinUp">
            <summary>
              Performs the spin up action.
            </summary>
            <remarks>
              This method has the same behavior as pressing the up key.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1DropDownControl.SpinDown"/>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.SpinDown">
            <summary>
              Performs the spin down action.
            </summary>
            <remarks>
              This method has the same behavior as pressing the down key.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1DropDownControl.SpinUp"/>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownOpening">
            <summary>
            Occurs just before the dropdown is opened.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.BeforeDropDownOpen">
            <summary>
            Occurs just before the dropdown is opened.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownOpened">
            <summary>
            Occurs after the dropdown is opened.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownOpening(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnBeforeDropDownOpen(System.ComponentModel.CancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownOpened(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownClosed">
            <summary>
            Occurs when the dropdown has been closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownClosed(C1.Win.C1Input.DropDownClosedEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.UpDownButtonClick">
            <summary>
            Occurs when UpDown buttons are clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnUpDownButtonClick(C1.Win.C1Input.UpDownButtonClickEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.ModalButtonClick">
            <summary>
            Occurs when the Modal button is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnModalButtonClick(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.CustomButtonClick">
            <summary>
            Occurs when the Custom button is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnCustomButtonClick(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownFormAlignChanged">
            <summary>
            Occurs when the value of the DropDownFormAlign property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownFormAlignChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.DropDownAlignChanged">
            <summary>
            Occurs when the value of the DropDownAlign property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnDropDownAlignChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.ButtonCursorChanged">
            <summary>
            Event fired when the value of ButtonCursor property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnButtonCursorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1DropDownControl.MultilineChanged">
            <summary>
            Event fired when the value of Multiline property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldDrawPlaceholder">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnCreateDropDownFrom(C1.Win.C1Input.DropDownForm)">
            <summary>
            Called when a drop down form is created.
            </summary>
            <param name="dropDownForm">The new dropdown form.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.MinSizeInternal">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.CalcSizeInternal">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.GetImageSize">
            <summary>
            Returns image size.
            </summary>
            <returns>The size object.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.ShowImage">
            <summary>
            Determines if image should be shown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.DrawCustomArea(System.Drawing.Graphics)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnEnabledChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnGotFocus(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnLostFocus(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ProcessKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.OnCursorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ShouldHandleEscape">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.C1EditorGetStyle">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.C1EditorKeyDownFinishEdit(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws image in the control.
            </summary>
            <param name="g">Grapthics object.</param>
            <param name="bounds">Rectangle to draw image in.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.DrawImage(System.Drawing.Graphics,System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Draws image in the control.
            </summary>
            <param name="g">Grapthics object.</param>
            <param name="dc">Device context.</param>
            <param name="bounds">Rectangle to draw image in.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1DropDownControl.DefaultThemeRootPath">
            <summary>
            Default path 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1DropDownControl.ResetDropDownFormTheme">
            <summary>
            Resets the style properties to their default values
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownControlButtonFlags">
            <summary>
            Used by C1DropDownControl.VisibleButtons properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.None">
            <summary>
            Show without any button
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.UpDown">
            <summary>
            Show up/down buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.DropDown">
            <summary>
            Show dropdown button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.Modal">
            <summary>
            Show button to start a modal dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.Custom">
            <summary>
            Show a custom button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownControlButtonFlags.All">
            <summary>
            Show all buttons
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.UpDownButtonClickEventHandler">
            <summary>
            Represents the method that handles a UpDownButtonClick event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An UpDownButtonClickEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.UpDownButtonClickEventArgs">
            <summary>
            Provides data for a UpDownButtonClick event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UpDownButtonClickEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the UpDownButtonClickEventArgs class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UpDownButtonClickEventArgs.Delta">
            <summary>
            Set to 1 if Up button is pressed, to -1 if Down button is pressed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UpDownButtonClickEventArgs.Done">
            <summary>
            Set to true in the user's UpDownButtonClick event handler. No built-in processing is done. This allows the user to override the default behavior of the buttons.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownClosedEventArgs">
            <summary>
            Provides data for a DropDownClosed event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownClosedEventArgs.Selected">
            <summary>
            Returns True if a value is selected in dropdown dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownClosedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DropDownClosedEventArgs class.
            </summary>
            <param name="selected"></param>
        </member>
        <member name="T:C1.Win.C1Input.DropDownClosedEventHandler">
            <summary>
            Represents the method that handles a DropDownClosed event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A DropDownClosedEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.ButtonImages">
            <summary>
            Images for C1DropDownControl buttons
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter">
            <summary>
            TypeConverter class for ButtonImages
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ButtonImagesTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.Reset">
            <summary>
            Clears all custom images and returns standard images for C1DropDownControl buttons. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.HasImage">
            <summary>
            Returns True if any custom image is assigned
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.ButtonImages.UpImage">
            <summary>
            Image for Up button
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeUpImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ResetUpImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ButtonImages.DownImage">
            <summary>
            Image for Down button
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeDownImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ResetDownImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ButtonImages.DropImage">
            <summary>
            Image for DropDown button
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeDropImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ResetDropImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ButtonImages.ModalImage">
            <summary>
            Image for Modal button
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeModalImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ResetModalImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ButtonImages.CustomImage">
            <summary>
            Image for Custom button
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ShouldSerializeCustomImage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ButtonImages.ResetCustomImage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownFormOptionsFlags">
            <summary>
            Used by DropDownForm.Options property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.None">
            <summary>
            Indicates that none of the options are set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.Focusable">
            <summary>
            Indicates that DropDownForm can contain focus.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.FixedWidth">
            <summary>
            The end users are not allowed to change the width of the dropdown form resizing it.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.FixedHeight">
            <summary>
            The end users are not allowed to change the height of the dropdown form resizing it.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.AlwaysPostChanges">
            <summary>
            If this flag is set, the changes to the control Value can only be cancelled explicitly, with Esc key 
            or using the CloseDropDown method, and implicit cancellation (when the form is closed because it loses focus) is disabled.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.NoCancelOnEscape">
            <summary>
            If this flag is set, pressing the Esc key does not close the form.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.NoPostOnEnter">
            <summary>
            If this flag is set, pressing the Enter key does not close the form.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.AutoResize">
            <summary>
            If set, the dropdown form width is automatically adjusted to the width of the owner control
            before the form is shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormOptionsFlags.FixedSize">
            <summary>
            = FixedWidth + FixedHeight
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownForm">
            <summary>
            Base class for custom dropdown forms.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.#ctor">
            <summary>
            Initializes a new instance of the DropDownForm class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the DropDownForm.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnTooltipShowing(C1.Win.C1Input.TooltipShowingEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownForm.TooltipShowing"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.IC1GetAmbientValue(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyName">Ambient property name.</param>
            <returns>Ambient property value.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownForm.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.ShouldApplyTheme">
            <summary>
            Gets a value indicating whether theme should be applied to dropdown form
            when it applied to <see cref="T:C1.Win.C1Input.C1DropDownControl"/>. This property returns <b>true</b>
            by default.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.BorderStyle">
            <summary>
            Determines the style of the control's border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.ClientSize">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.Options">
            <summary>
            Determine various behavioral options of the dropdown form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.FocusControl">
            <summary>
            Determines the control on the form that gets input focus when the form is shown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.DropDownAlign">
            <summary>
            Alignment of the dropdown form relative to the owner control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.OwnerControl">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.CreateParams">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.StartPosition">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.FormBorderStyle">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.Location">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.WindowState">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.KeyPreview">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.ControlBox">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.HelpButton">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.Icon">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.IsMdiContainer">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.MaximizeBox">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.MinimizeBox">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.ShowInTaskbar">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownForm.SizeGripStyle">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownForm.PostChanges">
            <summary>
            Occurs when Value property of the OwnerControl is updated by the dropdown form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnPostChanges(System.EventArgs)">
            <summary>
            Fires the PostChanges event.
            </summary>
            <param name="e">Contains arguments describing the event.</param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownForm.CancelChanges">
            <summary>
            Occurs when changes made by dropdown form are cancelled.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnCancelChanges(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownForm.Open">
            <summary>
            Occurs when dropdown form is opened.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnOpen(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownForm.OwnerControlTextChanged">
            <summary>
            Occurs when OwnerControl.Text property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnOwnerControlTextChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownForm.OwnerControlValueChanged">
            <summary>
            Occurs when OwnerControl.Value property is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnOwnerControlValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnActivated(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnDeactivate(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.CreateHandle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.CloseDropDown">
            <summary>
            Closes the dropdown form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownForm.CloseDropDown(System.Boolean)">
            <summary>
            Closes the dropdown form.
            </summary>
            <param name="doPost"></param>
        </member>
        <member name="T:C1.Win.C1Input.C1FontPicker">
            <summary>
            Represents a Windows font picker control supporting additional visual styles.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPicker.#ctor">
            <summary>
            Initializes a new instance of the C1FontPicker class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1FontPicker.UsedFonts">
            <summary>
            Gets a collection of fonts installed on system.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1FontPicker.DropDownFormWidth">
            <summary>
            Gets or sets a width of drop down list of fonts.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1FontPicker.DefaultDropDownFormClassName">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1FontPicker.VisibleButtons">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1FontPicker.DataType">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPicker.TextToValue(C1.Win.C1Input.C1BasePicker.TextToValueArgs@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPicker.ValueToText(C1.Win.C1Input.C1BasePicker.ValueToTextArgs@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPicker.OnValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Input.C1FontPicker.DefaultThemeRootPath">
            <summary>
            Default path for the control in xml theme file.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1FontPickerDropDownForm">
            <summary>
            Represents drop down font picker form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.#ctor">
            <summary>
            Initializes a new instance of the C1FontPickerDropDownForm class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.OnPostChanges(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.OnVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:C1.Win.C1Input.C1FontPickerDropDownForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1FontPickerDropDownForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ErrorActionEnum">
            <summary>
            Used by ErrorInfo.ErrorAction property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorActionEnum.None">
            <summary>
            Control value remains as the user typed it.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorActionEnum.SetValueOnError">
            <summary>
            Control value is set to ValueOnError.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorActionEnum.ResetValue">
            <summary>
            Control value is reset to the value control had before entering edit mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorActionEnum.ThrowException">
            <summary>
            Control value is reset to the value control had before entering edit mode, and an exception is thrown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ErrorInfo">
            <summary>
            Settings affecting error handling.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.BeepOnError">
            <summary>
            If True, the control beeps signaling an error. Default: False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ShowErrorMessage">
            <summary>
            If True (default), the standard error message is shown.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ErrorMessage">
            <summary>
            Error message shown in the standard message box and/or in the exception.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ErrorMessageCaption">
            <summary>
            The text to display in the title bar of the error message box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ErrorAction">
            <summary>
            Enumerated value that determines what action is performed on the control value when an error occurs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.CanLoseFocus">
            <summary>
            Determines whether or not the control is allowed to lose focus after the error. Works only if the ErrorAction is set to SetValueOnError or ResetValue.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ValueOnError">
            <summary>
            Value used to reset the control if ErrorAction = SetValueOnError.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ErrorInfo.ShouldSerializeValueOnError">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ValueOnErrorIsDbNull">
            <summary>
            Boolean property used to set ValueOnError to DbNull (only necessary at design time).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.ErrorProvider">
            <summary>
            Gets or sets an ErrorProvider object used to indicate error state of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.C1SuperErrorProvider">
            <summary>
            Gets or sets an C1SuperErrorProvider object used to indicate error state of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.InnerException">
            <summary>
            Run-time-only read-only property returning the original exception object that caused the error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ErrorInfo.DataType">
            <summary>
            Type of the Value property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ErrorInfo.Reset">
            <summary>
            Resets whole ErrorInfo property in base control
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.FormatErrorEventHandler">
            <summary>
            Represents the method that handles a FormatError event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A FormatErrorEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.FormatErrorEventArgs">
            <summary>
            Provides data for a FormatError event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatErrorEventArgs.Value">
            <summary>
            Source value for formatting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatErrorEventArgs.Target">
            <summary>
            Formatting target (ForEdit or ForDisplay).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatErrorEventArgs.Text">
            <summary>
            The text to show in the control. Your code in FormatError event can set this argument to a text
            you want to show in the control in case of a formatting error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatErrorEventArgs.FormatInfo">
            <summary>
            FormatInfo object that fired the event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatErrorEventArgs.ErrorMessage">
            <summary>
            Error description shown as the tooltip in the ErrorProvider icon, if ErrorInfo.ErrorProvider property is set.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ErrorReasonEnum">
            <summary>
            Used by ValidationErrorEventArgs.Reason and ValidationException.Reason properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorReasonEnum.NoErrors">
            <summary>
            All validation checks were successful.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorReasonEnum.EditMaskError">
            <summary>
            Value does not match the edit mask.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorReasonEnum.PreValidationError">
            <summary>
            Value was rejected before parsing (in PreValidation).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorReasonEnum.ParsingError">
            <summary>
            Parsing failed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorReasonEnum.PostValidationError">
            <summary>
            Value rejected after parsing (in PostValidation).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ErrorReasonEnum.DataSourceError">
            <summary>
            Value rejected by the data source, setting the data source field to that value failed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ValidationErrorEventHandler">
            <summary>
            Represents the method that handles a ValidationError event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A ValidationErrorEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.ValidationErrorEventArgs">
            <summary>
            Provides data for a ValidationError event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.Reason">
            <summary>
            Validation phase on which the error has been detected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.Text">
            <summary>
            The input text that caused the error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.Value">
            <summary>
            If Reason = ErrorReasonEnum.PostValidationError, this is the value that caused the error. Otherwise, this property is null or DBNull.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationErrorEventArgs.ErrorInfo">
            <summary>
            Error information.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ValidationException">
            <summary>
            An exception that follows the ValidationError event if ValidationErrorEventArgs.ErrorInfo is set to ErrorActionEnum.ThrowException.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:C1.Win.C1Input.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:C1.Win.C1Input.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:C1.Win.C1Input.ValidationException.Sender">
            <summary>
            Control that fired the exception.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationException.Reason">
            <summary>
            Validation phase on which the error has been detected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationException.Text">
            <summary>
            The input text that caused the error.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValidationException.Value">
            <summary>
            The typed value that caused the error.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DataSourceException">
            <summary>
            An exception thrown by C1Input when a control's Value property is set, but the new value is rejected by the data source, 
            setting the data field to that value is cancelled by the data source throwing an exception.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DataSourceException.#ctor">
            <summary>
            Initializes a new instance of the DataSourceException class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DataSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataSourceException class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:C1.Win.C1Input.DataSourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataSourceException class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:C1.Win.C1Input.DataSourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataSourceException class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:C1.Win.C1Input.DataSourceException.Sender">
            <summary>
            Control that caused the exception.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DataSourceException.Value">
            <summary>
            Current value in the control that caused the exception.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.FormatInfoInheritFlags">
            <summary>
            Used by FormatInfo.Inherit property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.None">
            <summary>
            Indicates that none of the properties are inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.FormatType">
            <summary>
            Indicates that the FormatType property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.CustomFormat">
            <summary>
            Indicates that the CustomFormat property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.NullText">
            <summary>
            Indicates that the NullText property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.EmptyAsNull">
            <summary>
            Indicates that the EmptyAsNull property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.TrimStart">
            <summary>
            Indicates that the TrimStart property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.TrimEnd">
            <summary>
            Indicates that the TrimEnd property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.CalendarType">
            <summary>
            Indicates that the CalendarType property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatInfoInheritFlags.All">
            <summary>
            Indicates that values of FormatType, CustomFormat, NullText, EmptyAsNull, TrimStart, TrimEnd, CalendarType properties are inherited from the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.FormatTargetEnum">
            <summary>
            Used by FormatEventArgs.Target property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTargetEnum.ForDisplay">
            <summary>
            Formatting (or Formatted) event was called while the control is not in edit mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTargetEnum.ForEdit">
            <summary>
            Formatting (or Formatted) event was called while the control is in edit mode.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.FormatEventHandler">
            <summary>
            Represents the method that handles Formatting or Formatted events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A FormatEventArgs object that contains the event data</param>
        </member>
        <member name="T:C1.Win.C1Input.FormatEventArgs">
            <summary>
            Provides data for Formatting or Formatted events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatEventArgs.Value">
            <summary>
            Source value for formatting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatEventArgs.Target">
            <summary>
            Formatting target (ForEdit or ForDisplay).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatEventArgs.Text">
            <summary>
            The out parameter for the resulting string (in Formatting), or the in parameter for the formatted string (in Formatted).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatEventArgs.FormatInfo">
            <summary>
            FormatInfo object that fired the event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatEventArgs.ErrorMessage">
            <summary>
            The out parameter for specifying error description if Succeeded is set to False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatEventArgs.Succeeded">
            <summary>
            Formatting result (assigned in the event code in Formatting). Default: True
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.FormatInfo">
            <summary>
            Settings for data formatting, converting data to string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.Inherit">
            <summary>
            Manages inheritance of the FormatInfo properties from the host control properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.FormatType">
            <summary>
            Enumeration value determining the formatting method, including standard .NET format specifiers, custom and programmatic formatting.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeFormatType">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ResetFormatType">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.CalendarType">
            <summary>
            Calendar, used to format date.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.CustomFormat">
            <summary>
            Custom format specifier used if FormatType = FormatTypeEnum.CustomFormat.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeCustomFormat">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ResetCustomFormat">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.NullText">
            <summary>
            String representing a DbNull value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeNullText">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ResetNullText">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.EmptyAsNull">
            <summary>
            If True, empty strings are interpreted as null values (DbNull).
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeEmptyAsNull">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ResetEmptyAsNull">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.TrimStart">
            <summary>
            If True, leading spaces are removed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeTrimStart">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ResetTrimStart">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.TrimEnd">
            <summary>
            If True, trailing spaces are removed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ShouldSerializeTrimEnd">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.ResetTrimEnd">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.FormatInfo.TypeRestriction">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.Reset">
            <summary>
            Resets whole FormatInfo property of base control
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.Format(System.Object)">
            <summary>
            Formats a value, converts it to a string.
            </summary>
            <param name="value">Typed value to convert to a string</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.FormatInfo.Format(System.Object,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
            <summary>
            Formats a value, converts it to a string.
            </summary>
            <param name="value">Typed value to convert to a string.</param>
            <param name="formatType">Format method or specifier used for conversion.</param>
            <param name="culture">Culture used for conversion.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.MaskInfo">
            <summary>
            Contains edit mask settings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.EditMask">
            <summary>
            The edit mask string restricting user input.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeEditMask">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.Inherit">
            <summary>
            Manages inheritance of the MaskInfo properties from the host control properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.CaseSensitive">
            <summary>
            True if comparison with mask literals is case-sensitive; otherwise, False.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ResetCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.CopyWithLiterals">
            <summary>
            If True, text copied to the clipboard includes literals.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.EmptyAsNull">
            <summary>
            If True, empty strings are interpreted as null values (DbNull).
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeEmptyAsNull">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ResetEmptyAsNull">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.ErrorMessage">
            <summary>
            Error message shown in the standard message box and/or if an exception occurs.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ResetErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.AutoTabWhenFilled">
            <summary>
            If True, focus automatically moves to the next control when the mask is filled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.PromptChar">
            <summary>
            Character displayed on empty mask positions in edit mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.SkipOptional">
            <summary>
            If True (default), optional mask positions are automatically skipped until the first position allowing the typed character.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.SaveLiterals">
            <summary>
            If True (default), the stored text includes literals.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.SaveBlanks">
            <summary>
            If True, the stored text includes blank positions as StoredEmptyChar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.StoredEmptyChar">
            <summary>
            Character stored in empty mask positions.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.ShowLiterals">
            <summary>
            Literal display method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.CustomPlaceholders">
            <summary>
            The collection of user-defined mask characters.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ShouldSerializeCustomPlaceholders">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ResetCustomPlaceholders">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.EditablePositionCount">
            <summary>
            Returns the number of editable positions in the edit mask.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.Content">
            <summary>
            Text entered by the user without literals (mask literals stripped).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.EffectiveText">
            <summary>
            Text in a readable format, with literals and without blanks.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.StoredContent">
            <summary>
            The stored string obtained from the user input string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.TrimEnd">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.ReplacePromptWithSpace">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.LiteralsRequired">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.FormatStoredContent(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="storedContent"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.IsMaskedMode">
            <summary>
            Returns True if EditMask is non-empty and the control is in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.IsAnyInputMaskedMode">
            <summary>
            Indicates when used MaskedMode with edit mask 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.Reset">
            <summary>
            Resets whole MaskInfo property of base control
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ResetContent">
            <summary>
            Resets the text to the string representing a DBNull value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.GetDisplayText(System.String,System.Boolean)">
            <summary>
            Returns a string formatted for display using edit mask.
            </summary>
            <param name="content">String containing characters entered by the user, including those on optional positions that were left blank (skipped).</param>
            <param name="skipBlanks">If set to True, the result will omit blank positions. If set to False, the resulting text will contain PromptChar on blank positions</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.GetStoredText(System.String)">
            <summary>
            Returns the string that will be stored in the database, in accordance with current values of SaveLiterals, SaveBlanks and StoredEmptyChar properties.
            </summary>
            <param name="content">String containing characters entered by the user, including those on optional positions that were left blank (skipped).</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.GetContent(System.String,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Returns the string containing characters entered by the user, including those on optional positions that were left blank (skipped).
            </summary>
            <param name="text">Text to parse.</param>
            <param name="textContainsLiterals">Same as MaskInfo.SaveLiterals property.</param>
            <param name="textContainsBlanks">Same as MaskInfo.SaveBlanks property.</param>
            <param name="blankCharacter">Same as MaskInfo.StoredEmptyChar property</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.IsValid">
            <summary>
            Returns True if the input string is valid with respect to the edit mask.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.MaskInfo.ConvertToMSRegexpEditMask(System.String)">
            <summary>
            Replace custom keywords with literals diapasone to build correct pattern for MS Regex.
            </summary>
            <param name="value">A regexp mask <see cref="T:System.String"/> to convert.</param>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.IsRegexInputMode">
            <summary>
            Indicates when used MaskedMode with MS Regex 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.RegexpMaskType">
            <summary>
            Gets ot sets a value that indicate <see cref="P:C1.Win.C1Input.MaskInfo.RegexpMaskType"/> of the mask in regular expression style.
            </summary>
            <remarks>
            <para>
            <see cref="F:C1.Win.C1Input.RegexpMaskType.RegexpMask"/> is mask based on MS Regex with support of custom RegexpEditMask keywords. It is only validated on exit from edit mode.
            </para>
            <para>
            <see cref="F:C1.Win.C1Input.RegexpMaskType.C1RegexpEditMask"/> is regular expression mask based on custom regex parser. It can be validated during entering text.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.RegexpEditMask">
            <summary>
            A <see cref="T:System.String"/> representing the mask in regular expression style with custom keywords. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.MaskInfo.IsRegexpPatternRecognized">
            <summary>
            Gets a value indicates whether the mask pattern in regular expression style was succesfully recognized or not.
            </summary>
            <remarks>True when <see cref="F:C1.Win.C1Input.RegexpMaskType.RegexpMask"/> or <see cref="F:C1.Win.C1Input.RegexpMaskType.C1RegexpEditMask"/> pattern was recognized successfully or empty, false otherwise.</remarks>
        </member>
        <member name="T:C1.Win.C1Input.MaskInfoInheritFlags">
            <summary>
            Used by MaskInfo.Inherit property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.None">
            <summary>
            Indicates that none of the properties are inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.CaseSensitive">
            <summary>
            Indicates that the CaseSensitive property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.EmptyAsNull">
            <summary>
            Indicates that the EmptyAsNull property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.ErrorMessage">
            <summary>
            Indicates that the ErrorMessage property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.MaskInfoInheritFlags.All">
            <summary>
            Indicates that all properties are inherited from the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ShowLiteralsEnum">
            <summary>
            Used by MaskInfo.ShowLiterals property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowLiteralsEnum.ShowAlways">
            <summary>
            The whole mask is shown when editing begins (empty spaces filled with PromptChar).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowLiteralsEnum.FreeFormatEntry">
            <summary>
            The mask is validated on exit (no literals or prompt chars displayed automatically).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowLiteralsEnum.WhenNextStarted">
            <summary>
            The literals will be inserted after the user enters the first character of the field that follows the literals.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ShowLiteralsEnum.WhenPrevFilled">
            <summary>
            Literals that follows the input mask will be inserted after the user enters the last character in the current field.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CharCategory">
            <summary>
            Defines rules to filter keyboard input.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.SingleByte">
            <summary>
            Only single byte characters are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.DoubleByte">
            <summary>
            Only double byte characters are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.Letter">
            <summary>
            Letters allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.Number">
            <summary>
            Numbers are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.Symbol">
            <summary>
            Symbols are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.UpperCase">
            <summary>
            Only upper case letters are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.LowerCase">
            <summary>
            Only lower case letters are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.Katakana">
            <summary>
            Only katakana is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.Hiragana">
            <summary>
            Only hiragana is allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.BigKana">
            <summary>
            Only big kana letters are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharCategory.AutoConvert">
            <summary>
            Auto conversion if possible.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.RegexpMaskType">
            <summary>
            Used to determine the way of the RegexpEditMask pattern processing and validation.
            </summary>
            <remarks>
            <para>
            <see cref="F:C1.Win.C1Input.RegexpMaskType.RegexpMask"/> based on MS Regex with some restrictions for avaliable keywords. It will not provide any edit mask. It can be validated on exit from edit mode only.
            </para>
            <para>
            <see cref="F:C1.Win.C1Input.RegexpMaskType.C1RegexpEditMask"/> uses custom parser. It don't support complicated regular expressions. It provides edit mask for user input. It can be validated during entering text.
            </para>
            <para>
            Both types allows to use custom RegexpEditMask keywords for Japanese and half-width/double-width characters sets.
            </para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.RegexpMaskType.RegexpMask">
            <summary>
            The new style of regular expression mask based on MS Regex with support of custom RegexpEditMask keywords. It is only validated on exit from edit mode.
            </summary>
            <remarks>
            <para>
            Regular expression with custom RegexpEditMask keywords for Japanese and half-width/double-width characters sets is preprocessed to get the pattern string for standart MS Regex.
            </para>
            <para>
            It is only validated on exit from edit mode. It don't provides editmask for input field and supports ShowLiterals = ShowLiteralsEnum.FreeFormatEntry only. 
            </para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.RegexpMaskType.C1RegexpEditMask">
            <summary>
            The old style of regular expression mask based on custom regex parser. It can be validated during entering text.
            </summary>
            <remarks>
            C1RegexpEditMask supports online checking user input and builds editmask for input field. 
            </remarks>
        </member>
        <member name="T:C1.Win.C1Input.NumericInputKeyFlags">
            <summary>
            Used by C1TextBox.NumericInputKeys property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.None">
            <summary>
            Indicates that none of the Input Keys are used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F2">
            <summary>
            Indicates that F2 enters negative infinity (-Infinity).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F3">
            <summary>
            Indicates that F3 enters positive infinity (+Infinity).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F4">
            <summary>
            Indicates that F4 enters the "not a number" value (NaN).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.F9">
            <summary>
            Indicates that F9 toggles the sign of the displayed number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Minus">
            <summary>
            Indicates that '-' makes the displayed number negative.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Plus">
            <summary>
            Indicates that '+' makes the displayed number positive.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Decimal">
            <summary>
            Indicates that Decimal key enters a decimal separator regardless of culture settings.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.X">
            <summary>
            Indicates that the X key starts entry of the exponent part in scientific-notation numbers.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.Standard">
            <summary>
            This value is a combination of the F9, Minus, Plus, Decimal, and X values.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumericInputKeyFlags.All">
            <summary>
            This value is a combination of all enum values
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ParseInfoInheritFlags">
            <summary>
            Used by ParseInfo.Inherit property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.None">
            <summary>
            Indicates that none of the properties are inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.CaseSensitive">
            <summary>
            Indicates that the value of the CaseSensitive property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.FormatType">
            <summary>
            Indicates that the value of the FormatType property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.CustomFormat">
            <summary>
            Indicates that the value of the CustomFormat property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.NullText">
            <summary>
            Indicates that the value of the NullText property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.EmptyAsNull">
            <summary>
            Indicates that the value of the EmptyAsNull property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.ErrorMessage">
            <summary>
            Indicates that the value of the ErrorMessage property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.TrimStart">
            <summary>
            Indicates that the value of the TrimStart property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.TrimEnd">
            <summary>
            Indicates that the value of the TrimEnd property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ParseInfoInheritFlags.All">
            <summary>
            Indicates that all properties are inherited from the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NumberStyleFlags">
            <summary>
            Used by ParseInfo.NumberStyle property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.None">
            <summary>
            Indicates that none of the bit styles are allowed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowCurrencySymbol">
            <summary>
            Indicates that the numeric string is parsed as currency if it contains a currency symbol; otherwise, it is parsed as a number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowDecimalPoint">
            <summary>
            Indicates that the numeric string can have a decimal point.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowExponent">
            <summary>
            Indicates that the numeric string can be in exponential notation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowHexSpecifier">
            <summary>
            Indicates that the numeric string can have notation that signifies that the number is hexadecimal.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowLeadingSign">
            <summary>
            Indicates that the numeric string can have a leading sign.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowLeadingWhite">
            <summary>
            Indicates that a leading white-space character is ignored during parsing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowParentheses">
            <summary>
            Indicates that the numeric string can have one pair of parentheses enclosing the number.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowThousands">
            <summary>
            Indicates that the numeric string can have group separators.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowTrailingSign">
            <summary>
            Indicates that the numeric string can have a trailing sign.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.AllowTrailingWhite">
            <summary>
            Indicates that trailing white-space character must be ignored during parsing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.Any">
            <summary>
            Indicates that all the AllowXXX bit styles are used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.Currency">
            <summary>
            Indicates all styles except AllowExponent and AllowHexSpecifier.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.Float">
            <summary>
            Indicates that the AllowLeadingWhite, AllowTrailingWhite, AllowLeadingSign,
            AllowDecimalPoint, and AllowExponent styles are used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.HexNumber">
            <summary>
            Indicates that the AllowLeadingWhite, AllowTrailingWhite, and AllowHexSpecifier styles are used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.Integer">
            <summary>
            Indicates that the AllowLeadingWhite, AllowTrailingWhite, and AllowLeadingSign styles are used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.NumberStyleFlags.Number">
            <summary>
            Indicates that the AllowLeadingWhite, AllowTrailingWhite, AllowLeadingSign,
            AllowTrailingSign, AllowDecimalPoint, and AllowThousands styles are used.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DateTimeStyleFlags">
            <summary>
            Used by ParseInfo.DateTimeStyle property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeStyleFlags.None">
            <summary>
            Indicates that the default formatting options must be used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowInnerWhite">
            <summary>
            Indicates that extra white space characters in the middle of the string must be ignored during parsing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowLeadingWhite">
            <summary>
            Indicates that leading white space characters must be ignored during parsing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowTrailingWhite">
            <summary>
            Indicates that trailing white space characters must be ignored during parsing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeStyleFlags.AllowWhiteSpaces">
            <summary>
            Indicates that extra white space characters anywhere in the string must be ignored during parsing.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeStyleFlags.NoCurrentDateDefault">
            <summary>
            Indicates that, if the parsed string contains only the time and not the date, the parsing methods
            assume the Gregorian date with year = 1, month = 1, and day = 1. If this value is not used, the current date is assumed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ParseEventHandler">
            <summary>
            Represents the method that handles Parsing or Parsed events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A ParseEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.ParseEventArgs">
            <summary>
            Provides data for Parsing or Parsed events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseEventArgs.Text">
            <summary>
            Source string for parsing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseEventArgs.DestinationType">
            <summary>
            Data type to convert the string to.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseEventArgs.Succeeded">
            <summary>
            Parse result (assigned in the event code in Parsing). Default: True
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseEventArgs.Value">
            <summary>
            Property to save the result to (in Parsing) or to get the resulting value from (in Parsed).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseEventArgs.ErrorInfo">
            <summary>
            Error information in case of parsing failure. Can be set in event code in Parsing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseEventArgs.ParseInfo">
            <summary>
            ParseInfo object that fired the event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ParseInfo">
            <summary>
            Contains settings affecting parsing, that is, converting a string to the required data type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.Inherit">
            <summary>
            Manages inheritance of the ParseInfo properties from the host control properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.CaseSensitive">
            <summary>
            True if string comparisons are case-sensitive; otherwise, False.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.FormatType">
            <summary>
            The format used for parsing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeFormatType">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetFormatType">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.CustomFormat">
            <summary>
            Custom format specifier (in parsing used for DateTime and Boolean types only).
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeCustomFormat">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetCustomFormat">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.NullText">
            <summary>
            The string representing DbNull value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeNullText">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetNullText">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.EmptyAsNull">
            <summary>
            If True, empty strings are interpreted as null values (DbNull).
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeEmptyAsNull">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetEmptyAsNull">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.ErrorMessage">
            <summary>
            Error message shown in the standard message box and/or in the exception.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.TrimStart">
            <summary>
            If True, leading spaces are removed before parsing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeTrimStart">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetTrimStart">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.TrimEnd">
            <summary>
            If True, trailing spaces are removed before parsing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ShouldSerializeTrimEnd">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ResetTrimEnd">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.NumberStyle">
            <summary>
            Determines the styles (flags) permitted in input strings representing numbers.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.DateTimeStyle">
            <summary>
            Determines the styles (flags) permitted in input strings representing date/time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ParseInfo.TypeRestriction">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.Reset">
            <summary>
            Resets whole ParseInfo property of base control
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.IsTextDbNull(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns True if the argument represents a null value (DBNull).
            </summary>
            <param name="text">The string to parse.</param>
            <param name="culture">Culture used in parsing.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ParseFixed(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
            <summary>
            Converts the text to a Decimal value using a fixed numeric format.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="formatType">Format type used in parsing.</param>
            <param name="culture">Culture used in parsing.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ParseFloat(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
            <summary>
            Converts the text to a Double value using a float numeric format.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="formatType">Format type used in parsing.</param>
            <param name="culture">Culture used in parsing.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ParseInteger(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
            <summary>
            Converts the text to Int64 value using an integer numeric format.
            </summary>
            <param name="text"></param>
            <param name="formatType"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ParseBoolean(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
            <summary>
            Converts the text to a Boolean value.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="formatType">Format type used in parsing.</param>
            <param name="culture">Culture used in parsing.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.ParseDateTime(System.String,C1.Win.C1Input.FormatTypeEnum,System.Globalization.CultureInfo)">
            <summary>
            Converts text to a value using one of DateTime formats.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="formatType">Format type used in parsing.</param>
            <param name="culture">Culture used in parsing.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ParseInfo.Parse(System.String,System.Type,System.Object@,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Converts text to the specified data type.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="destinationType">Type to which the string is converted.</param>
            <param name="result">Conversion result.</param>
            <param name="errorInfo">Object detailing error information, if an error occurred.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.PostValidationInheritFlags">
            <summary>
            Used by PostValidation.Inherit property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PostValidationInheritFlags.None">
            <summary>
            Indicates that none of the properties are inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PostValidationInheritFlags.CaseSensitive">
            <summary>
            Indicates that the value of the CaseSensitive property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PostValidationInheritFlags.ErrorMessage">
            <summary>
            Indicates that the value of the ErrorMessage property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PostValidationInheritFlags.All">
            <summary>
            Indicates that all properties are inherited from the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.PostValidationTypeEnum">
            <summary>
            Used by PostValidation.Validation property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PostValidationTypeEnum.ValuesAndIntervals">
            <summary>
            Validation using Values and Intervals.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PostValidationTypeEnum.PostValidatingEvent">
            <summary>
            Using the PostValidating event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.PostValidationEventHandler">
            <summary>
            Represents the method that handles PostValidating or PostValidated events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PostValidationEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.PostValidationEventArgs">
            <summary>
            Provides data for PostValidating or PostValidated events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidationEventArgs.Value">
            <summary>
            The value to validate.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidationEventArgs.PostValidation">
            <summary>
            PostValidation object that fired the event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidationEventArgs.ErrorInfo">
            <summary>
            Error information in case of validation failure. Can be set in event code in PostValidating.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidationEventArgs.Succeeded">
            <summary>
            Validation result (assigned in the event code in PostValidating). Default: True
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ValueInterval">
            <summary>
            An interval in a collection of intervals of possible values used in post-validation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ValueInterval.#ctor">
            <summary>
            Initializes a new instance of the ValueInterval class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ValueInterval.#ctor(System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            ValueInterval Constructor.
            </summary>
            <param name="minValue">MinValue property value.</param>
            <param name="maxValue">MaxValue property value.</param>
            <param name="includeMin">IncludeMin property value.</param>
            <param name="includeMax">IncludeMax property value.</param>
        </member>
        <member name="M:C1.Win.C1Input.ValueInterval.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ValueInterval class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.DataType">
            <summary>
            The type of lower and upper bounds (taken from the control’s DataType).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.MinValue">
            <summary>
            Lower bound.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ValueInterval.ShouldSerializeMinValue">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.MaxValue">
            <summary>
            Upper bound.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ValueInterval.ShouldSerializeMaxValue">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.UseMinValue">
            <summary>
            If False (default), the lower bound is negative infinity.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.UseMaxValue">
            <summary>
            If False (default), the upper bound is positive infinity.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.IncludeMin">
            <summary>
            If True (default), the lower bound is included.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValueInterval.IncludeMax">
            <summary>
            If True (default), the upper bound is included.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ValueIntervalCollection">
            <summary>
            A collection of ValueInterval objects used by a PostValidation object. 
            The collection is used if the Validation = PostValidationTypeEnum.ValuesAndIntervals
            or if the user calls the ValidateValuesAndIntervals method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.ValueIntervalCollection.Item(System.Int32)">
            <summary>
            Gets the collection element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.AddRange(C1.Win.C1Input.ValueInterval[])">
            <summary>
            Adds the elements of an array to the end of the collection.
            </summary>
            <param name="c">The array whose elements should be added to the end of the collection.</param>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.Add(C1.Win.C1Input.ValueInterval)">
            <summary>
            Adds a new value interval to the collection.
            </summary>
            <param name="vi">The ValueInterval to add.</param>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.Insert(System.Int32,C1.Win.C1Input.ValueInterval)">
            <summary>
            Inserts a new value interval to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which ValueInterval should be inserted.</param>
            <param name="vi">The ValueInterval to insert.</param>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.Contains(C1.Win.C1Input.ValueInterval)">
            <summary>
            Returns True if the collection contains the specific value interval, False otherwise.
            </summary>
            <param name="vi">The ValueInterval to locate in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.IndexOf(C1.Win.C1Input.ValueInterval)">
            <summary>
            Determines the index of a specific value interval in the collection, return -1 if this item not found.
            </summary>
            <param name="vi">The ValueInterval to locate in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.Remove(C1.Win.C1Input.ValueInterval)">
            <summary>
            Removes a specific value interval from the collection.
            </summary>
            <param name="vi">The ValueInterval to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1Input.ValueIntervalCollection.CopyTo(C1.Win.C1Input.ValueInterval[],System.Int32)">
            <summary>
            Copies elements of the collection to an array starting at a particular array index.
            </summary>
            <param name="array">The one-array that is the destination of the elements copied from the collection. </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:C1.Win.C1Input.PostValidation">
            <summary>
            Validating the typed value after parsing, after the input string has been converted to the DataType.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.Validation">
            <summary>
            Validation method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.AllowDbNull">
            <summary>
            Determines whether it is possible to enter DbNull value in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.Inherit">
            <summary>
            Manages inheritance of the PostValidation properties from the host control properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.CaseSensitive">
            <summary>
            True if string comparisons are case-sensitive; otherwise, False.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ResetCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.ErrorMessage">
            <summary>
            Error message shown in the standard message box and/or in the exception.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ResetErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.Values">
            <summary>
            Predefined values used for matching the input value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeValues">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.ValuesExcluded">
            <summary>
            List of values that are not permitted as input value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeValuesExcluded">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.PostValidation.Intervals">
            <summary>
            Collection of intervals. The input value must belong to one of these intervals.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ShouldSerializeIntervals">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.Reset">
            <summary>
            Resets whole PostValidation property of base control
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.ValidateValuesAndIntervals(System.Object,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Performs validation of the value against the collections of Values, ValuesExcluded and Intervals.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="errorInfo">Error information filled in case of failure.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PostValidation.Validate(System.Object,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Performs validation using the current settings of the PostValidation object. Returns true if vaidation was successful.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="errorInfo">Error information filled in case of failure.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.PreValidationInheritFlags">
            <summary>
            Used by PreValidation.Inherit property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationInheritFlags.None">
            <summary>
            Indicates that none of the properties are inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationInheritFlags.CaseSensitive">
            <summary>
            Indicates that the value of the CaseSensitive property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationInheritFlags.ErrorMessage">
            <summary>
            Indicates that the value of the ErrorMessage property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationInheritFlags.TrimStart">
            <summary>
            Indicates that the value of the TrimStart property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationInheritFlags.TrimEnd">
            <summary>
            Indicates that the value of the TrimEnd property is inherited from the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationInheritFlags.All">
            <summary>
            Indicates that all properties are inherited from the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.PreValidationTypeEnum">
            <summary>
            Used by PreValidation.Validation property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationTypeEnum.ExactList">
            <summary>
            The PatternString property contains a list of possible values separated by the ItemSeparator.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationTypeEnum.PreValidatingEvent">
            <summary>
            Using the PreValidating event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationTypeEnum.Wildcards">
            <summary>
            The PatternString property contains a list of wildcard patterns separated by the ItemSeparator. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.PreValidationTypeEnum.RegexPattern">
            <summary>
            The PatternString property contains a regular expression.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.RegexOptionFlags">
            <summary>
            Used by PreValidation.RegexOptions property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.None">
            <summary>
            Specifies that no options are set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.ECMAScript">
            <summary>
            Enables ECMAScript-compliant behavior for the expression. This flag can be used only
            in conjunction with the IgnoreCase, Multiline, and Compiled flags.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.ExplicitCapture">
            <summary>
            Specifies that the only valid captures are explicitly named or numbered groups of the form.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.IgnorePatternWhitespace">
            <summary>
            Eliminates unescaped white space from the pattern and enables comments marked with #.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.Multiline">
            <summary>
            Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, 
            respectively, of any line, and not just the beginning and end of the entire string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.RightToLeft">
            <summary>
            Specifies that the search will be from right to left instead of from left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RegexOptionFlags.Singleline">
            <summary>
            Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n).
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.PreValidationEventHandler">
            <summary>
            Represents the method that handles PreValidating or PreValidated events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PreValidationEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.PreValidationEventArgs">
            <summary>
            Provides data for PreValidating or PreValidated events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidationEventArgs.Text">
            <summary>
            The text to validate.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidationEventArgs.PreValidation">
            <summary>
            PreValidation object that fired the event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidationEventArgs.ErrorInfo">
            <summary>
            Error information in case of validation failure. Can be set in event code in PreValidating.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidationEventArgs.Succeeded">
            <summary>
            Validation result (assigned in the event code in PreValidating). Default: True.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.PreValidation">
            <summary>
            Validating the input string entered by the user, before parsing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.Validation">
            <summary>
            Validation method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.Inherit">
            <summary>
            Manages inheritance of the PreValidation properties from the host control properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.CaseSensitive">
            <summary>
            True if string comparisons are case-sensitive; otherwise, False.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ResetCaseSensitive">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.ErrorMessage">
            <summary>
            Error message shown in the standard message box and/or in the exception.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ResetErrorMessage">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.TrimStart">
            <summary>
            If True, leading spaces are removed before validation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeTrimStart">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ResetTrimStart">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.TrimEnd">
            <summary>
            If True, trailing spaces are removed before validation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeTrimEnd">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ResetTrimEnd">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.PatternString">
            <summary>
            String containing the validation pattern.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.ItemSeparator">
            <summary>
            String separating list items in PatternString.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.CustomPlaceholders">
            <summary>
            The collection of user-defined characters to use in a wildcard pattern.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ShouldSerializeCustomPlaceholders">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.ResetCustomPlaceholders">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PreValidation.RegexOptions">
            <summary>
            Settings affecting regular expression matching.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.Reset">
            <summary>
            Resets whole PreValidation property of base control
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.MatchExactList(System.String,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Returns True if the input text matches one of the exact list items specified in PatternString.
            </summary>
            <param name="text">The input string to match.</param>
            <param name="errorInfo">Error information filled in case of failure.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.MatchWildcardPattern(System.String,System.String)">
            <summary>
            Returns True if the input text matches the specified wildcard pattern passed as argument.
            </summary>
            <param name="text">The input string to match.</param>
            <param name="pattern">The wildcard pattern.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.MatchWildcardPatterns(System.String,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Returns True if the input text matches at least one of the wildcard patterns specified in PatternString.
            </summary>
            <param name="text">The input string to match.</param>
            <param name="errorInfo">Error information filled in case of failure.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.MatchRegex(System.String,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Returns True if the input text matches the regular expression pattern specified in PatternString.
            </summary>
            <param name="text">The input string to match.</param>
            <param name="errorInfo">Error information filled in case of failure.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PreValidation.Validate(System.String,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Returns True if the text successfully passes validation using the current settings of the PreValidation object.
            </summary>
            <param name="text">The input string to validate.</param>
            <param name="errorInfo">Error information filled in case of failure.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.NullableDateTimeEventHandler">
            <summary>
            Represents the method that handles DateValueChanged and DateValueSelected events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NullableDateTimeEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.NullableDateTimeEventArgs">
            <summary>
            Provides data for DateValueChanged and DateValueSelected events.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NullableDateTimeEventArgs.Date">
            <summary>
            The date value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NullableDateTimeEventArgs.DateIsNull">
            <summary>
            Set to True if the date value is null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CreationTime">
            <summary>
            Determines when drop down form will be created.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CreationTime.Default">
            <summary>
            At the host control creation time.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CreationTime.OnFirstCall">
            <summary>
            On first call of the drop down form.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.LengthUnit">
            <summary>
               Defines the <b>LengthUnit</b> enumeration.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.LengthUnit.Char">
            <summary>
              Indicates the calculational unit is a .Net character when calculating the length of the string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.LengthUnit.Byte">
            <summary>
              Indicates the calculational unit is a byte when calculating the length of the string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.VisualStyle">
            <summary>
            Determines the visual style of a control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Custom">
            <summary>
            Custom style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.System">
            <summary>
            Standard system style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Office2007Blue">
            <summary>
            MS Office 2007 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Office2007Black">
            <summary>
            MS Office 2007 Black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Office2007Silver">
            <summary>
            MS Office 2007 Silver color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Office2010Blue">
            <summary>
            MS Office 2010 Blue color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Office2010Black">
            <summary>
            MS Office 2010 Black color scheme.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VisualStyle.Office2010Silver">
            <summary>
            MS Office 2010 Silver color scheme.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.FormatTypeEnum">
            <summary>
            Used by <see cref="P:C1.Win.C1Input.C1TextBox.FormatType"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.DefaultFormat">
            <summary>
            Conversion using TypeConverter.ConvertToString().
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.UseEvent">
            <summary>
            Conversion performed by user code in the Formatting (or Parsing) event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.CustomFormat">
            <summary>
            Formatting uses the string assigned to the CustomFormat property.
            Parsing uses NumberStyle, DateTimeStyle, and CustomFormat properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.GeneralNumber">
            <summary>
            The number is converted to the most compact decimal form, using fixed point or scientific notation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.Currency">
            <summary>
            The number is converted to a string that represents a currency amount.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.FixedPoint">
            <summary>
            The number is converted to a string of the form “-ddd.ddd…” where each 'd' indicates a digit (0-9). 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.StandardNumber">
            <summary>
            The number is converted to a string of the form "-d,ddd,ddd.ddd…", where each 'd' indicates a digit (0-9).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.Percent">
            <summary>
            The number is converted to a string that represents a percent as defined by the <see cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern"/> property
            or the <see cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern"/> property. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.Scientific">
            <summary>
            The number is converted to a string of the form "-d.ddd…E+ddd" or "-d.ddd…e+ddd", where each 'd' indicates a digit (0-9). 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.RoundTrip">
            <summary>
            The round-trip specifier guarantees that a numeric value converted to a string will be parsed back
            into the same numeric value. This format is supported by floating-point types only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.Integer">
            <summary>
            Displays number as a string that contains the value of the number in Decimal (base 10) format. This format is supported for integral types only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.Hexadecimal">
            <summary>
            The number is converted to a string of hexadecimal digits. This format is supported for integral types only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.YesNo">
            <summary>
            Converts to Boolean and shows No for false, Yes for true.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.TrueFalse">
            <summary>
            Converts to Boolean and shows True or False.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.OnOff">
            <summary>
            Converts to Boolean and shows Off for false, On for true.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.GeneralDate">
            <summary>
            General date/time pattern (short time).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDate">
            <summary>
            Displays a date according to specified CultureInfo's long date format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.MediumDate">
            <summary>
            Displays a date using the medium date format ("dd-MMM-yy").
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortDate">
            <summary>
            Displays a date using specified CultureInfo's short date format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.LongTime">
            <summary>
            Displays a time using your locale's long time format; includes hours, minutes, seconds.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.MediumTime">
            <summary>
            Displays time in 12-hour format using hours and minutes and the AM/PM designator ("hh:mm tt").
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortTime">
            <summary>
            Displays a time using the 24-hour format, for example, 17:45.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDateShortTime">
            <summary>
            Displays the long date and short time according to specified CultureInfo's format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDateLongTime">
            <summary>
            Displays the long date and long time according to specified CultureInfo's format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortDateShortTime">
            <summary>
            Displays the short date and short time according to specified CultureInfo's format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.ShortDateLongTime">
            <summary>
            Displays the short date and long time according to specified CultureInfo's format.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.MonthAndDay">
            <summary>
            Displays the month and the day of a date.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.DateAndTimeGMT">
            <summary>
            Formats the date and time as Greenwich Mean Time (GMT).
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.DateTimeSortable">
            <summary>
            Formats the date and time as a sortable index.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.GMTSortable">
            <summary>
            Formats the date and time as a GMT sortable index.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.LongDateTimeGMT">
            <summary>
            Formats the date and time with the long date and long time as GMT.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.FormatTypeEnum.YearAndMonth">
            <summary>
            Formats the date as the year and month.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.TypeRestrictionEnum">
            <summary>
            This enum is for internal use only
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.TypeRestrictionEnum.AnyType">
            <summary>
            Any type of data.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.TypeRestrictionEnum.Numbers">
            <summary>
            Only number data type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.TypeRestrictionEnum.DateTime">
            <summary>
            Only DateTime data type.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownFormAlignmentEnum">
            <summary>
            Used by <see cref="P:C1.Win.C1Input.DropDownForm.DropDownAlign"/> and <see cref="P:C1.Win.C1Input.C1DropDownControl.DropDownFormAlign"/> properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Default">
            <summary>
            In a <see cref="T:C1.Win.C1Input.C1DropDownControl"/>, the alignment of the dropdown form is determined by the 
            <see cref="P:C1.Win.C1Input.C1DropDownControl.DropDownAlign"/> property of the drop down form.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DropDownFormAlignmentEnum.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.VerticalAlignEnum">
            <summary>
            Used by <see cref="P:C1.Win.C1Input.C1TextBox.VerticalAlign"/> property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VerticalAlignEnum.Top">
            <summary>
            Text is aligned with the top of the enclosing control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VerticalAlignEnum.Middle">
            <summary>
            Text is aligned with the center of the enclosing control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VerticalAlignEnum.Bottom">
            <summary>
            Text is aligned with the bottom of the enclosing control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DaylightTimeAdjustmentEnum">
            <summary>
            Used by <see cref="P:C1.Win.C1Input.C1Label.DaylightTimeAdjustment"/> and <see cref="P:C1.Win.C1Input.C1TextBox.DaylightTimeAdjustment"/> properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DaylightTimeAdjustmentEnum.NoAdjustments">
            <summary>
            No daylight-saving time adjustments.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DaylightTimeAdjustmentEnum.AdvanceGMTOffsetForTheDaylightSavingTime">
            <summary>
            Use this option if the GMTOffset property corresponds to the standard time offset.
            For the daylight-saving time GMTOffset should be advanced by an hour.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DaylightTimeAdjustmentEnum.SetGMTOffsetBackForTheStandardTime">
            <summary>
            Use this option if the GMTOffset property is set to the daylight time offset. 
            So, for the standard time it should be set back by an hour.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InitialSelectionEnum">
            <summary>
            Used by <see cref="P:C1.Win.C1Input.C1TextBox.InitialSelection"/>  property.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.InitialSelectionEnum.SelectAll">
            <summary>
            The whole text is selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.InitialSelectionEnum.CaretAtStart">
            <summary>
            Nothing selected, the caret is moved at the beginning of the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.InitialSelectionEnum.CaretAtEnd">
            <summary>
            Nothing selected, the caret is moved at the end of the text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.InitialSelectionEnum.Default">
            <summary>
            Control uses the behavior of a base text box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DateTimeField">
            <summary>
            Used by <see cref="P:C1.Win.C1Input.C1DateEdit.InitialField"/> property and <see cref="M:C1.Win.C1Input.C1TextBox.GoToField(C1.Win.C1Input.DateTimeField,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Manual">
            <summary>
            Used the default date-time field.
            </summary>
            <remarks>
            <see cref="T:C1.Win.C1Input.C1DateEdit"/> uses this value to use the <see cref="P:C1.Win.C1Input.C1TextBox.InitialSelection"/>  
            instead of the <see cref="P:C1.Win.C1Input.C1DateEdit.InitialField"/> property to specify initial selection. 
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.DayOfMonth">
            <summary>
            The date-time field that contains the DayOfMonth part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Month">
            <summary>
            The date-time field that contains the Month part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Year">
            <summary>
            The date-time field that contains the Year part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Era">
            <summary>
            The date-time field that contains the Era part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.AMPM">
            <summary>
            The date-time field that contains the AMPM part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Hour">
            <summary>
            The date-time field that contains the Hour part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Minute">
            <summary>
            The date-time field that contains the Minute part of the value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.DateTimeField.Second">
            <summary>
            The date-time field that contains the Second part of the value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ValueChangedBehaviorEnum">
            <summary>
            Used by C1TextBox.ValueChangedBehavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ValueChangedBehaviorEnum.Default">
            <summary>
            The ValueChanged event is fired only when the Value property changes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ValueChangedBehaviorEnum.FireOnAnyChange">
            <summary>
            The ValueChanged event is fired on any text change.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ExitOnLeftRightKey">
            <summary>
              Specifies the action for the left or right arrow key.
            </summary>
            <remarks>
              The left or right key causes focus to be lost when the caret is at the left-most or right-most position.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.None">
            <summary>
              Specifies no action.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.Left">
            <summary>
              Specifies to move to the previous control when pressing left or Ctrl+left keys on the first character of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.Right">
            <summary>
              Specifies to move to the next control when pressing right or Ctrl+right keys on the last character of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.ExitOnLeftRightKey.Both">
            <summary>
              Specifies to move to the previous or next control when pressing the left or right or Ctrl+left or Ctrl+right keys on the first or last character of the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CultureInfoSetupEventHandler">
            <summary>
            Represents the method that handles a CultureInfoSetup event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CultureInfoSetupEventArgs object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.CultureInfoSetupEventArgs">
            <summary>
            Provides data for a CultureInfoSetup event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CultureInfoSetupEventArgs.CultureInfo">
            <summary>
            Regional settings.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Margins">
            <summary>
            Represents the four margins around a control’s content.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.Margins.#ctor">
            <summary>
            Initializes a new instance of the Margins class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Margins class.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="P:C1.Win.C1Input.Margins.Left">
            <summary>
            Gets or sets the left margin, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.Margins.Right">
            <summary>
            Gets or sets the right margin, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.Margins.Top">
            <summary>
            Gets or sets the top margin, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.Margins.Bottom">
            <summary>
            Gets or sets the bottom margin, in pixels.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.Margins.Clone">
            <summary>
            Creates an identical copy of the current Margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.Margins.Equals(System.Object)">
            <summary>
            Overloaded. Determines whether two Object instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.Margins.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.Margins.ToString">
            <summary>
            Converts this Margins to a human readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.Margins.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overloaded. Sets the margin values.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:C1.Win.C1Input.Margins.Set(System.Drawing.Printing.Margins)">
            <summary>
            Overloaded. Sets the margin values.
            </summary>
            <param name="printMargins"></param>
        </member>
        <member name="M:C1.Win.C1Input.Margins.Reset">
            <summary>
            Sets all margins to zero.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.Margins.ShouldSerialize">
            <summary>
            Returns true if at least one margin differs from the default zero value. Otherwise, returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.CustomPlaceholder">
            <summary>
            Custom user-defined characters (placeholders) used in edit mask and in wildcard patterns in pre-validation 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor">
            <summary>
            Initializes a new instance of the CustomPlaceholder class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor(System.Char,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomPlaceholder class.
            </summary>
            <param name="placeholder">The value of the Placeholder property.</param>
            <param name="optionalPlace">The value of the Optional property.</param>
            <param name="lookupChars">The value of the LookupChars property.</param>
            <param name="caseSensitive">The value of the CaseSensitive property.</param>
            <param name="excluding">The value of the Excluding property.</param>
        </member>
        <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor(System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomPlaceholder class.
            </summary>
            <param name="placeholder">The value of the Placeholder property.</param>
            <param name="optionalPlace">The value of the Optional property.</param>
            <param name="lookupChars">The value of the LookupChars property.</param>
            <param name="caseSensitive">The value of the CaseSensitive property.</param>
            <param name="excluding">The value of the Excluding property.</param>
        </member>
        <member name="M:C1.Win.C1Input.CustomPlaceholder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CustomPlaceholder class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:C1.Win.C1Input.CustomPlaceholder.Placeholder">
            <summary>
            The special character used as a user-defined placeholder.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomPlaceholder.Optional">
            <summary>
            True if character is optional and can be omitted.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomPlaceholder.LookupChars">
            <summary>
            The list (string) of characters matching the placeholder (see also Excluding).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomPlaceholder.CaseSensitive">
            <summary>
            True if string comparison is case-sensitive; otherwise, False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomPlaceholder.Excluding">
            <summary>
            Specifies whether the LookupChars are interpreted as allowed or disallowed characters.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.PlaceholderCollection">
            <summary>
            A collection of CustomPlaceholder objects.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.PlaceholderCollection.Changed">
            <summary>
            Occurs when PlaceholderCollection is changed 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.PlaceholderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the the special character at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.AddRange(C1.Win.C1Input.CustomPlaceholder[])">
            <summary>
            Adds the special characters of an ICollection to the end of the PlaceholderCollection.
            </summary>
            <param name="c">The ICollection whose elements should be added.</param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.CheckItemBeforeAdding(C1.Win.C1Input.CustomPlaceholder)">
            <summary>
            Checks validity of the placeholder
            </summary>
            <param name="cph"></param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.Add(C1.Win.C1Input.CustomPlaceholder)">
            <summary>
            Adds a new special character to the collection.
            </summary>
            <param name="cph">The CustomPlaceholder to add.</param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.Insert(System.Int32,C1.Win.C1Input.CustomPlaceholder)">
            <summary>
            Inserts a new special character to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which CustomPlaceholder should be inserted.</param>
            <param name="cph">The CustomPlaceholder to insert.</param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.Contains(System.Char)">
            <summary>
            Determines whether a character is in the placeholder collection.
            </summary>
            <param name="placeholder">The character argument.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.IndexOf(System.Char)">
            <summary>
            Returns the index of a character in the placeholder collection, or –1 if it does not belong to the collection.
            </summary>
            <param name="placeholder">The character argument.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.Remove(System.Char)">
            <summary>
            Removes a specific character from the collection.
            </summary>
            <param name="placeholder">The character to remove from the collection.</param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.CopyTo(C1.Win.C1Input.CustomPlaceholder[],System.Int32)">
            <summary>
            Copies elements of the collection to an array starting at a particular array index.
            </summary>
            <param name="array">The one-array that is the destination of the elements copied from the collection. </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.GetItem(System.Char)">
            <summary>
            Returns the CustomPlaceholder object corresponding to the character argument, or null if it does not belong to the collection.
            </summary>
            <param name="placeholder">The character argument.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.PlaceholderCollection.OnChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Input.C1Label">
            <summary>
            Represents a Windows read-only data bound control displaying formatted data.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.#ctor">
            <summary>
            Initializes a new instance of the C1Label class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1Label.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.BorderColor">
            <summary>
            Gets or sets the border color of the control.
            </summary>
            <remarks>
            <para>Use the <b>BorderColor</b> property to specify the border color of the control. 
            This property is set using a <see cref="T:System.Drawing.Color"/> object.</para>
            <para>The <b>BorderColor</b> property has an effect only when the <see cref="P:C1.Win.C1Input.C1TextBox.BorderStyle"/> property is set to <b>FixedSingle</b>. </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.UseFieldStyle">
            <summary>
            Indicates whether to honor the ColumnStyle properties defined on the
            C1ViewColumn object that this control is bound to.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.Culture">
            <summary>
            The culture ID.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.CultureName">
            <summary>
            The name selected for the Culture property in the Properties grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.UserCultureOverride">
            <summary>
            If True, current user regional settings override the selected culture.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.CultureInfo">
            <summary>
            The current CultureInfo object (available at runtime).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.FormatInfo">
            <summary>
            Format used to display the value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.MaskInfo">
            <summary>
            Edit mask settings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.CaseSensitive">
            <summary>
            True if string comparisons are case-sensitive; otherwise, False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.FormatType">
            <summary>
            Enumeration value determining the formatting metod, including standard .NET format specifiers, custom and programmatic formatting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.CustomFormat">
            <summary>
            Custom format specifier used if FormatType = FormatTypeEnum.CustomFormat.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.NullText">
            <summary>
            String representing a DbNull value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.EmptyAsNull">
            <summary>
            If True, empty strings are interpreted as null values (DbNull).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.TrimStart">
            <summary>
            If True, leading spaces are removed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.TrimEnd">
            <summary>
            If True, trailing spaces are removed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.CurrentTimeZone">
            <summary>
            If True, the control�s stored Value is in current time zone; otherwise, the Value is adjusted to the time zone defined by the GMTOffset property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.GMTOffset">
            <summary>
            The time zone of the Value property used if CurrentTimeZone = False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.DaylightTimeAdjustment">
            <summary>
            The value specified in the GMTOffset property can be advanced or set back due to daylight-saving time changes (used only if CurrentTimeZone = False). 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.Tag">
            <summary>
            Gets or sets the object that contains data about the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.ErrorProvider">
            <summary>
            Gets or sets an ErrorProvider object used to indicate error state of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.Text">
            <summary>
            The current text in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.TextDetached">
            <summary>
            Specifies whether the Value and Text properties can be set independently.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.DataSource">
            <summary>
            The data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.DataField">
            <summary>
            The field of the data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.DataType">
            <summary>
            Type of the Value property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.ValueIsDbNull">
            <summary>
            Gets or sets a value indicating whether the Value is DbNull.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.Value">
            <summary>
            Gets or sets the current <see cref="P:C1.Win.C1Input.C1Label.DataType"/> representation of the visual information contained in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.FlatStyle">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.Padding">
            <summary>
            Gets or sets the padding within the control.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.BorderColorChanged">
            <summary>
            Occurs when the BorderColor property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.CultureInfoSetup">
            <summary>
            CultureInfo can be set up (on startup) or has been changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.FormatError">
            <summary>
            Error occured while formatting the stored value.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.Formatting">
            <summary>
            Formatting the value programmatically.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.Formatted">
            <summary>
            Occurs after the value has been formatted.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.DataTypeChanged">
            <summary>
            Occurs when the DataType property changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.ValueChanged">
            <summary>
            Occurs when the Value changes.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.BindingFormatting">
            <summary>
            Occurs when Value is retrieved from the data source.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1Label.BackgroundImageChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnBorderColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.C1Label.BorderColorChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler through a delegate. </para>
            <para>The <b>OnBorderColorChanged</b> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.</para>
            <para><b>Notes to Inheritors.</b> When overriding <b>OnBorderColorChanged</b> in a derived class, 
            be sure to call the base class's <b>OnBorderColorChanged</b> method so that registered delegates receive the event. 
            </para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnFormatError(C1.Win.C1Input.FormatErrorEventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.FormatError"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Input.FormatErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnCultureInfoSetup(C1.Win.C1Input.CultureInfoSetupEventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.CultureInfoSetup"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Input.CultureInfoSetupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnFormatting(C1.Win.C1Input.FormatEventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.Formatting"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Input.FormatEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnFormatted(C1.Win.C1Input.FormatEventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.Formatted"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Input.FormatEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnDataTypeChanged(System.EventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.DataTypeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnValueChanged(System.EventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.ValueChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.OnBindingFormatting(System.Windows.Forms.ConvertEventArgs)">
            <summary>
            Invokes the <see cref="E:C1.Win.C1Input.C1Label.BindingFormatting"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.ConvertEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1Label.DefaultThemeRootPath">
            <summary>
            Default path for the control in xml theme file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1Label.ThemeChanged(System.Object)">
            <summary>
            This method called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.C1Input.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.   
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Localization.DesignStrings">
            <summary>
            The <see cref="T:C1.Win.C1Input.Localization.DesignStrings"/> class contains static properties used for design-time UI localization.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.Localization.DesignStrings.ResourceManager">
            <summary>
            The <see cref="P:C1.Win.C1Input.Localization.DesignStrings.ResourceManager"/> object used for lookup resources.
            </summary>
            <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
        </member>
        <member name="P:C1.Win.C1Input.Localization.DesignStrings.UICulture">
            <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo"/> object used as fallback culture.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Localization.Strings">
            <summary>
            The <see cref="T:C1.Win.C1Input.Localization.Strings"/> class contains static properties used for run-time UI localization.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.UIStringsItemEventHandler">
            <summary>
            Represents a handler for an <see cref="T:C1.Win.C1Input.UIStrings"/> item related event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.UIStringsItemEventArgs">
            <summary>
            Provides data for an <see cref="T:C1.Win.C1Input.UIStrings"/> item related event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.Key">
            <summary>
            Gets key of the item being added or changed.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.Value">
            <summary>
            Gets the string value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.IsDefault">
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            	<c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Win.C1Input.UIStringsItemEventArgs.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:C1.Win.C1Input.UIStrings">
            <summary>
            Represents a collection of end user visible UI strings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.Item(System.Object)">
            <summary>
            Gets or sets the string value for the specified key.
            </summary>
            <param name="key">The key of the string.</param>
            <returns>The string corresponding to the specified key.</returns>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.Content">
            <summary>
            Used for serialization of strings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.Description">
            <summary>
            Gets or sets the description shown in Properties window in the IDE.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.Items">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.Sorter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.Add(System.Object,System.Int32,System.String,System.String)">
            <summary>
            Adds a string to the collection, specifying the ordinal.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="ordinal">The ordinal of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.Add(System.Object,System.String,System.String)">
            <summary>
            Adds a string to the collection in alphabetical order.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.AddInOrder(System.Object,System.String,System.String)">
            <summary>
            Adds a string to the collection, preserving the order.
            </summary>
            <param name="key">The key of the string.</param>
            <param name="value">The string.</param>
            <param name="description">The description of the string.</param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.Reset">
            <summary>
            Sets all strings in collection to their default values.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.ShouldSerialize">
            <summary>
            Indicates whether any of the strings in the current collection
            have non-default values.
            </summary>
            <returns><c>true</c> if any of the strings have non-default values, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.IsDefault(System.Object)">
            <summary>
            Tests whether a string in the collection has default value.
            </summary>
            <param name="key">The key of the string to test.</param>
            <returns><c>true</c> if the string has default value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.GetDescription(System.Object)">
            <summary>
            Returns the description of a string.
            </summary>
            <param name="key">The key of the string to get the description of.</param>
            <returns>The string's description</returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.Reset(System.Object)">
            <summary>
            Resets a string to its default value.
            </summary>
            <param name="key">The key of the string to reset.</param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.ConvertFromStr(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.ConvertToStr(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.GetKeyAt(System.Int32)">
            <summary>
            Returns the key of an item with the specified index.
            </summary>
            <param name="index">The item index.</param>
            <returns>The item's key.</returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.GetValueAt(System.Int32)">
            <summary>
            Gets the string by its index.
            </summary>
            <param name="index">The string index.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.SetValueAt(System.Int32,System.String)">
            <summary>
            Sets the value of a string with the specified index.
            </summary>
            <param name="index">The string index.</param>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.SaveValuesToStringArray">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.RestoreValuesFromStringArray(System.String[])">
            <summary>
            For internal use.
            </summary>
            <param name="values"></param>
        </member>
        <member name="E:C1.Win.C1Input.UIStrings.ItemAdded">
            <summary>
            Occurs when a new item is added to the collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.OnItemAdded(C1.Win.C1Input.UIStringsItemEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Input.UIStrings.ItemAdded"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.UIStrings.ItemChanged">
            <summary>
            Occurs when an item in the collection is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.OnItemChanged(C1.Win.C1Input.UIStringsItemEventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Input.UIStrings.ItemChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.UIStrings.CollectionChanged">
            <summary>
            Occurs when the collection has been changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.OnCollectionChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Input.UIStrings.CollectionChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:C1.Win.C1Input.UIStrings.TypeConverter">
            <summary>
            Provides type conversion for the <see cref="T:C1.Win.C1Input.UIStrings"/> type.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attrFilter"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.#ctor(System.String,System.Attribute[],System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            For internal use.
            </summary>
            <param name="name"></param>
            <param name="attributes"></param>
            <param name="context"></param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.GetValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.IsReadOnly">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.UIStrings.TypeConverter.StringPropertyDescriptor.DesignTimeOnly">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.NumericEditCalculator">
            <summary>
            The calculator used as a dropdown in the C1NumericEdit control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.#ctor">
            <summary>
            Initializes a new instance of the NumericEditCalculator class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the NumericEditCalculator.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.IC1GetAmbientValue(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyName">Ambient property name.</param>
            <returns>Ambient property value.</returns>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Font">
            <summary>
            Gets or sets the font of the text displayed by the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.ShowDecimalSeparator">
            <summary>
            Gets or sets a value indicating whether to display a decimal separator when typing a number if no decimal part of the number is entered.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.NumericEditCalculator.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.ButtonFlatStyle">
            <summary>
            Determines the style of the dropdown calculator buttons.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.DisplayFormat">
            <summary>
            // patch: localization: added after StringTables.cs was created
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.StoredFormat">
            <summary>
            Custom format specifier used to format the stored value of the dropdown calculator.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.FormatOnClose">
            <summary>
            Gets or sets whether StoredFormat should be applied to the value entered in the dropdown calculator.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.RightToLeft">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.UIStrings">
            <summary>
            The collection of user interface strings.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.ShouldSerializeUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.ResetUIStrings">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.ContextMenuStrip">
            <summary>
            Gets or sets the shortcut menu associated with the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.UseStaticMemory">
            <summary>
            Gets or sets whether Static Memory context menu should appear for the dropdown calculator.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.DefaultSize">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.ShowFocusCues">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.OnResize(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.OnForeColorChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.FontChanged event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Enabled">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.AllowDrop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.CausesValidation">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.ImeMode">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Size">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Dock">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Anchor">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Location">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.TabIndex">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.TabStop">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Tag">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Visible">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.DataBindings">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Controls">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Name">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.Margin">
            <summary>
            Gets or sets the space between controls. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.MaximumSize">
            <summary>
            Gets or sets the size that is the upper limit that GetPreferredSize can specify.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.NumericEditCalculator.MinimumSize">
            <summary>
            Gets or sets the size that is the lower limit that GetPreferredSize can specify.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.BindingContextChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.CausesValidationChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.DockChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.DragDrop">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.DragEnter">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.DragLeave">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.DragOver">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.EnabledChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.Enter">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.Leave">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.GiveFeedback">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.ImeModeChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.KeyDown">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.KeyUp">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.KeyPress">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.QueryContinueDrag">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.TabIndexChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.TabStopChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.TextChanged">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.Validating">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.NumericEditCalculator.Validated">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.ThemeChanged(System.Object)">
            <summary>
            This method called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="M:C1.Win.C1Input.NumericEditCalculator.ThemeChanged(System.Object,C1.Win.C1Input.VisualStyle)">
            <summary>
            This method called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
            <param name="visualStyle">Base visual style.</param>
        </member>
        <member name="T:C1.Win.C1Input.C1NumericEdit">
            <summary>
            Represents a composite control combining a NumericUpDown and a drop-down calculator for easy numeric values editing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.#ctor">
            <summary>
            Initializes a new instance of the C1NumericEdit class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.DefaultDropDownFormClassName">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.TypeRestriction">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.DataType">
            <summary>
            Type of the Value property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.FormatType">
            <summary>
            Enumeration value determining the formatting method, including standard .NET format specifiers, custom and programmatic formatting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.Increment">
            <summary>
            Indicates the amount to increment/decrement when the user clicks up/down buttons.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.ShouldSerializeIncrement">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.ResetIncrement">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.CalculatorButtonStyle">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.CalculatorNumberFormat">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.Calculator">
            <summary>
            The dropdown calculator object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.ShouldSerializeCalculator">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.DateTimeInput">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.MinShortYear">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.TextDetached">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.Text">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.CausesValidation">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.CurrentTimeZone">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.GMTOffset">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.DaylightTimeAdjustment">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.WrapDateTimeFields">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.AutoChangePosition">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.SpinUp">
            <summary>
              Performs spin up.
            </summary>
            <remarks>
            <see cref="P:C1.Win.C1Input.C1NumericEdit.Increment"/> property is used to define the increment.
              This method has the same behavior with the Up key pressed.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinDown"/>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.SpinUp(System.Object)">
            <summary>
              Performs spin up.
            </summary>
            <param name="increment">
              The <see cref="T:System.Object"/> value that indicates the increment when spin up.
            </param>
            <remarks>
              This method has the same behavior with the Up key pressed.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinDown(System.Object)"/>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.SpinDown">
            <summary>
              Performs spin down.
            </summary>
            <remarks>
            <see cref="P:C1.Win.C1Input.C1NumericEdit.Increment"/> property is used to define the decrement.
              This method has the same behavior with the Down key pressed.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinUp"/>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.SpinDown(System.Object)">
            <summary>
              Performs spin down.
            </summary>
            <param name="decrement">
              The <see cref="T:System.Object"/> value that indicates the decrement when spin down.
            </param>
            <remarks>
              This method has the same behavior with the Down key pressed.
            </remarks>
            <seealso cref="M:C1.Win.C1Input.C1NumericEdit.SpinDown(System.Object)"/>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.OnUpDownButtonClick(C1.Win.C1Input.UpDownButtonClickEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.OpenDropDown">
            <summary>
            Shows the dropdown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1NumericEdit.UpdateDataType(System.Type)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyType"></param>
        </member>
        <member name="P:C1.Win.C1Input.C1NumericEdit.DefaultThemeRootPath">
            <summary>
            Default path for the control in xml theme file.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownCalculator">
            <summary>
            Represents the class of dropdown calculator form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.#ctor">
            <summary>
            Initializes a new instance of the DropDownCalculator class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the DropDownCalculator.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.DropDownCalculator.Calculator">
            <summary>
            The calculator used in a DropDownCalculator form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnPostChanges(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnCancelChanges(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnHandleCreated(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnVisibleChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.OnOpen(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownCalculator.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:C1.Win.C1Input.C1PictureBox">
            <summary>
            Represents a Windows PictureBox control supporting data binding to data source fields containing image data.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.#ctor">
            <summary>
            Initializes a new instance of the C1PictureBox class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1PictureBox.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1PictureBox.DataSource">
            <summary>
            The data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1PictureBox.DataField">
            <summary>
            The field of the data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1PictureBox.ImmediateUpdate">
            <summary>
            Gets or sets whether the image should be put into the data source right after the Image property has been changed or it shouldn't be put there until the following call of the CurrencyManager.EndCurrentEdit() method.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1PictureBox.Image">
            <summary>
            The image displayed in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1PictureBox.FocusOnClick">
            <summary>
            Gets or sets the value indicating whether the picture box receives focus when clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.ImageToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns the contents of an image.
            </summary>
            <param name="image">Image to return as a byte array.</param>
            <param name="format">Format in which to return the image contents.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.ImageFromByteArray(System.Byte[])">
            <summary>
            Converts a byte array to an image.
            </summary>
            <param name="buffer">The contents of an image. </param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.CopyImage">
            <summary>
            Copies the image currently in the control to the clipboard.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.PasteImage">
            <summary>
            If the clipboard contains an image, this method replaces the contents of the Image property of the control
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1PictureBox.BindingFormatting">
            <summary>
            Occurs when Image is retrieved from the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.OnBindingFormatting(System.Windows.Forms.ConvertEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1PictureBox.BindingParsing">
            <summary>
            Occurs when Image is stored in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.OnBindingParsing(System.Windows.Forms.ConvertEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1PictureBox.ImageChanged">
            <summary>
            Occurs when the Image changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.OnImageChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.OnGotFocus(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.OnLostFocus(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1PictureBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:C1.Win.C1Input.C1RangeSlider">
            <summary>
            Represents a Windows range slider control supporting additional visual styles.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.#ctor">
            <summary>
            Initializes a new instance of the C1RangeSlider class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1RangeSlider.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.LowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.UpperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the LowerValue or UpperValue properties when the lower value thumb or upper value thumb is moved a small distance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.LargeChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the LowerValue or UpperValue properties when the lower value thumb or upper value thumb is moved a large distance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.IsRangeBarVisible">
            <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.Orientation">
            <summary>
            Gets or sets a value indicating the horizontal or vertical orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.IsDirectionReversed">
            <summary>
            Gets or sets the direction of increasing value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.ScrollBehavior">
            <summary>
            Gets or sets how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.LowerThumbPath">
            <summary>
            Gets or sets custom thumb path for lower value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.UpperThumbPath">
            <summary>
            Gets or sets custom thumb path for upper value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.Styles">
            <summary>
            Gets or sets a collection of named Style objects.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.C1RangeSlider.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.C1RangeSlider.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.C1RangeSlider.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:C1.Win.C1Input.C1RangeSlider.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection">
            <summary>
            Represents a collection of named Style objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection">
            <summary>
            Represents a collection of named Style objects for bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.BackColor">
            <summary>
            Gets or sets background color of bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.BorderColor">
            <summary>
            Gets or sets border color of bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.DisabledBackColor">
            <summary>
            Gets or sets background color of bar if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.DisabledBorderColor">
            <summary>
            Gets or sets border color of bar if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyleCollection.SelectedAreaColor">
            <summary>
            Gets or sets color of selected area.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection">
            <summary>
            Represents a collection of named Style objects for thumb.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.BackColor">
            <summary>
            Gets or sets background color of thumb.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.BorderColor">
            <summary>
            Gets or sets border color of thumb.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.HotBackColor">
            <summary>
            Gets or sets background color of thumb if mouse is over it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.HotBorderColor">
            <summary>
            Gets or sets border color of thumb if mouse is over it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.PressedBackColor">
            <summary>
            Gets or sets background color of thumb when user performs mouse click on it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.PressedBorderColor">
            <summary>
            Gets or sets border color of thumb when user performs mouse click on it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.DisabledBackColor">
            <summary>
            Gets or sets background color of thumb if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.DisabledBorderColor">
            <summary>
            Gets or sets border color of thumb if control is disabled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.CornerRadius">
            <summary>
            Gets or sets corner radius of thumb.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyleCollection.Padding">
            <summary>
            Gets or sets padding within the thumb.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.BarStyle">
            <summary>
            Gets or sets a collection of named Style objects for bar.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.RangeSliderStyleCollection.ThumbStyle">
            <summary>
            Gets or sets a collection of named Style objects for thumb.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1RangeSlider.LowerValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.C1Input.C1RangeSlider.LowerValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1RangeSlider.UpperValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.C1Input.C1RangeSlider.UpperValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1RangeSlider.ValueChanged">
            <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1RangeSlider.OrientationChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.C1Input.C1RangeSlider.Orientation"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnOrientationChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1RangeSlider.DirectionChanged">
            <summary>
            Fires when the <see cref="P:C1.Win.C1Input.C1RangeSlider.IsDirectionReversed"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnDirectionChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.MouseWheel event.
            This method is for internal use only.
            </summary>
            <param name="e">A System.Windows.Forms.MouseEventArgs that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1RangeSlider.DefaultThemeRootPath">
            <summary>
            Default Theme root path.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1RangeSlider.ThemeChanged(System.Object)">
            <summary>
            This method is called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.C1Input.C1SplitButton">
            <summary>
            Represents a composite button control supporting additional visual styles and drop down item list.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.#ctor">
            <summary>
            Initializes a new instance of the C1SplitButton class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1SplitButton.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.ItemStyle">
            <summary>
            Gets the style of <see cref="T:C1.Win.C1Input.DropDownItem"/> components on this button.
            </summary>
            <remarks>This property works when the <see cref="P:C1.Win.C1Input.C1Button.VisualStyle"/> property is set to <see cref="F:C1.Win.C1Input.VisualStyle.System"/>.</remarks>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.ShouldSerializeItemStyle">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.C1SplitButton.ItemStyle"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.ResetItemStyle">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.C1SplitButton.ItemStyle"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.Items">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1Input.DropDownItem"/> components on this button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.DropDownImageList">
            <summary>
            The ImageList to get the images to display in the drop down items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.DefaultItem">
            <summary>
            Gets or sets the default drop down item.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked">
            <summary>
            Occurs when a <see cref="T:C1.Win.C1Input.DropDownItem"/> is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.OnDropDownItemClicked(C1.Win.C1Input.DropDownItemClickedEventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Input.DropDownItemClickedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="E:C1.Win.C1Input.C1SplitButton.DropDownClosed">
            <summary>
            Occurs when the dropdown has been closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.OnDropDownClosed(C1.Win.C1Input.DropDownClosedEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1SplitButton.DropDownOpened">
            <summary>
            Occurs after the dropdown is opened.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.OnDropDownOpened(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.InDesignMode">
            <summary>
            Gets a value that determines whether the control is currently in design mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.DroppedDown">
            <summary>
            Run-time property indicating if the dropdown is currently open.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1SplitButton.ReapplyTheme">
            <summary>
            Reapply the current theme to all input components.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1SplitButton.DefaultThemeRootPath">
            <summary>
            Default path for the control in xml theme file.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownItemCollection">
            <summary>
            Represents collection of drop down items.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified indexed location in the collection.
            </summary>
            <param name="index">The indexed location of the item in the collection. </param>
            <returns>An <see cref="T:C1.Win.C1Input.DropDownItem"/> that represents the item at the specified indexed location.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.Add(C1.Win.C1Input.DropDownItem)">
            <summary>
            Adds the specified item to the end of the collection. 
            </summary>
            <param name="value">The <see cref="T:C1.Win.C1Input.DropDownItem"/> to be added to the end of the collection. </param>
            <returns>The zero-based index value of the <see cref="T:C1.Win.C1Input.DropDownItem"/> added to the collection.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.IndexOf(C1.Win.C1Input.DropDownItem)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the list.
            </summary>
            <param name="value">The item to locate in the list.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.Insert(System.Int32,C1.Win.C1Input.DropDownItem)">
            <summary>
            Inserts the specified item into the collection at the specified location.
            </summary>
            <param name="index">The indexed location within the collection to insert the item. </param>
            <param name="value">The item to insert.</param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.Remove(C1.Win.C1Input.DropDownItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="value">The item to remove from the collection. </param>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.Contains(C1.Win.C1Input.DropDownItem)">
            <summary>
            Indicates whether the collection contains a specific <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.C1Input.DropDownItem"/> object for which to search.</param>
            <returns>Whether the collection contains the specific <see cref="T:C1.Win.C1Input.DropDownItem"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting an <see cref="T:C1.Win.C1Input.DropDownItem"/>
            into the <see cref="T:C1.Win.C1Input.DropDownItemCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an <see cref="T:C1.Win.C1Input.DropDownItem"/>
            from the <see cref="T:C1.Win.C1Input.DropDownItemCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting an <see cref="T:C1.Win.C1Input.DropDownItem"/>
            in the <see cref="T:C1.Win.C1Input.DropDownItemCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of
            the <see cref="T:C1.Win.C1Input.DropDownItemCollection"/> instance.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of
            the <see cref="T:C1.Win.C1Input.DropDownItemCollection"/> instance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownItem">
            <summary>
            Represents drop down item for <see cref="T:C1.Win.C1Input.C1SplitButton"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.#ctor">
            <summary>
            Creates an instance of DropDownItem class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the DropDownItem.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.SplitButton">
            <summary>
            Gets the <see cref="T:C1.Win.C1Input.C1SplitButton"/> that this <see cref="T:C1.Win.C1Input.DropDownItem"/> belongs to.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Items">
            <summary>
            Gets the collection of child items in that is associated with this DropDownItem.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.CheckOnClick">
            <summary>
            Gets or sets a value that indicates whether the item should toggle its pressed state when it is clicked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Text">
            <summary>
            Gets or sets the text associated with the component.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Checked">
            <summary>
            Gets or sets a value that indicates whether the item is checked.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.DialogResult">
            <summary>
            Gets or sets the dialog-box result produced in a modal form by clicking the button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Image">
            <summary>
            Gets or sets the image associated with the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.ImageIndex">
            <summary>
            Gets or sets the index of the image in the ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.ImageList">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.ImageKey">
            <summary>
            Gets or sets the image key in the ImageList.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.ImageSize">
            <summary>
            Gets or sets the size of the image that will be displayed on the button.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.ImageAlign">
            <summary>
            Gets or sets the alignment of the image within the bounds specified by the <see cref="P:C1.Win.C1Input.DropDownItem.ImageSize"/> property.
            </summary>
            <remarks>
            The value of this property is only used if <see cref="P:C1.Win.C1Input.DropDownItem.ImageScaling"/> = Clip and <see cref="P:C1.Win.C1Input.DropDownItem.ImageSize"/>
            exceeds the original size of the image.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.ImageScaling">
            <summary>
            Gets or sets how the image will be scaled to fit within the bounds specified by the <see cref="P:C1.Win.C1Input.DropDownItem.ImageSize"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Enabled">
            <summary>
            Gets or sets a value indicating whether the item can respond to user interaction.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Visible">
            <summary>
            Gets or sets a value indicating whether the item is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.Tag">
            <summary>
            Gets or sets the object that contains data about the item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItem.IsDisposed">
            <summary>
            Gets a value indicating whether the component has been disposed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.DropDown">
            <summary>
            Fires when the drop-down portion of this element is shown.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnDropDown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.DropDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.DropDownClosed">
            <summary>
            Indicates that the drop-down portion of this element has closed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnDropDownClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.DropDownClosed"/> event.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.Click">
            <summary>
            Fires when the component is clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.Click"/> event.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.KeyDown">
            <summary>
            Fires when a key is pressed while the component has focus. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.KeyDown"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.KeyPress">
            <summary>
            Fires when a key is pressed while the component has focus. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.KeyPress"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.KeyUp">
            <summary>
            Fires when a key is released while the component has focus. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.KeyUp"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.GotFocus">
            <summary>
            Fires when the component receives the focus.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.GotFocus"/> event.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.LostFocus">
            <summary>
            Fires when the component loses the focus.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.LostFocus"/> event.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItem.DoubleClick">
            <summary>
            Fires when the component is double-clicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItem.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.DropDownItem.DoubleClick"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownItemStyle">
            <summary>
            The <see cref="T:C1.Win.C1Input.DropDownItemStyle"/> class represents the styles for the <see cref="T:C1.Win.C1Input.DropDownItem"/> component.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.ForeColor">
            <summary>
             Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeForeColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ForeColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>    
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetForeColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ForeColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.BackColor">
            <summary>
             Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the background.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeBackColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.BackColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>    
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetBackColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.BackColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.ImageBarBackColor">
            <summary>
             Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the image bar background.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeImageBarBackColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ImageBarBackColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns> 
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetImageBarBackColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ImageBarBackColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.HotForeColor">
            <summary>
             Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text of seleced item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeHotForeColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.HotForeColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns> 
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetHotForeColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.HotForeColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.HotBackColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the background of seleced item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeHotBackColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.HotBackColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>  
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetHotBackColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.HotBackColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.DisabledForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text of disabled item.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeDisabledForeColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.DisabledForeColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>    
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetDisabledForeColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.DisabledForeColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.ArrowColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the arrow.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeArrowColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ArrowColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>    
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetArrowColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ArrowColor"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemStyle.ImageBarSeparatorColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the image bar separator.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ShouldSerializeImageBarSeparatorColor">
            <summary>
            Specifies whether to save the value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ImageBarSeparatorColor"/> property.
            </summary>
            <returns>Returns true if the property has changed; otherwise, returns false.</returns>  
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.ResetImageBarSeparatorColor">
            <summary>
            Restores the default value of the <see cref="P:C1.Win.C1Input.DropDownItemStyle.ImageBarSeparatorColor"/> property.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.DropDownItemStyle.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemStyle.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:C1.Win.C1Input.DropDownItemStyle.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.XInputDropDownPane">
            <summary>
            Base class for all panes that appear in a drop-down.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.XInputDropDownPane.IsEnabled">
            <summary>
            Gets whether this element and all its ancestors are enabled.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.XInputDropDownPane.ScrollIntoView(C1.Framework.Element)">
            <summary>
            Scrolls a given <see cref="T:C1.Framework.Element"/> into view.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to scroll into view.</param>
        </member>
        <member name="M:C1.Win.C1Input.XInputDropDownPane.ScrollIntoView(System.Drawing.Rectangle)">
            <summary>
            Scrolls a given <see cref="T:System.Drawing.Rectangle"/> into view.
            </summary>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> to scroll into view.</param>
        </member>
        <member name="T:C1.Win.C1Input.XInputMenuPane">
            <summary>
            Internal element for the drop-down pane of the InputMenu component.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.MenuTimer">
            <summary>
            Menu timer with threading support. Opens the submenu items of the selected(hovered) <see cref="T:C1.Win.C1Input.XInputMenu"/> object with a delay.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.MenuTimer.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Input.MenuTimer.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.XInputButton">
            <summary>
            Internal element for the InputButton component.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputButtonElement">
            <summary>
            Internal button element for the XInputButton.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputBaseButtonElement">
            <summary>
            The base class for all input button elements.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputRepeatButtonElement">
            <summary>
            A repeat button that can be pressed when the host application is inactive.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.HitTestableDockPanel">
            <summary>
            A dock panel that can fire the HotChanged event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputTextElement">
            <summary>
            A TextElement that supports AutoEllipsis.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputTextBoxElement">
            <summary>
            This element incapsulates the TextBox control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.InputTextBoxElement.TextBoxWithTabHandlingAndCustomCopyPaste.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ButtonImageElement">
            <summary>
            Adds the sizing/alignment/scaling features to the ImageElement.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.XInputDropDown">
            <summary>
            Base class for all elements with the drop-down.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputDropDownElement">
            <summary>
            Internal drop-down button element for the XInputDropDown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.XInputElement">
            <summary>
            Base class for internal elements of the input panel components.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.XInputElement.Dispose">
            <summary>
            Derived classes may override this method to dispose unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.XInputMenu">
            <summary>
            Internal element for the InputMenu component.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.InputMenuElement">
            <summary>
            Internal drop-down button element for the XInputMenu.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.XInputSeparator">
            <summary>
            Internal element for the InputSeparator component.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.BasePopupForm.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the BasePopupForm.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Input.MenuPopupForm.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:C1.Win.C1Input.CustomStyle">
            <summary>
            Defines style elements that override the defaults provided by the VisualStyle.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomStyle.Font">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Input.CustomStyle.Font"/> used by the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomStyle.FontPadding">
            <summary>
            Gets or sets whether the <see cref="T:C1.Win.C1Input.DropDownItem"/> should use padding to avoid text clipping.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomStyle.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to display text in the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomStyle.HorizontalAlign">
            <summary>
            Gets or sets how content is horizontally aligned within the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.CustomStyle.VerticalAlign">
            <summary>
            Gets or sets how content is vertically aligned within the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.InputTheme.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.C1Input.InputTheme.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ThemeImages">
            <summary>
            An instance for each VisualStyle is stored (with all images).
            So we should not dispose images obtained using this class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ThemeImages.GetDropDownArrow(C1.Win.C1Input.DropDownArrowState)">
            <summary>
            Returns the saved dropdown arrow image of the specified state. Do not dispose it.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ThemeImages.GetImageCell(C1.Win.C1Input.ImageCellStyle,System.Boolean)">
            <summary>
            Returns the saved image for the ImageCell of the specified style. Do not dispose it.
            </summary>
            <param name="style"></param>
            <param name="isFlipY"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ThemeImages.GetMenuPopupBackground">
            <summary>
            Returns the saved background image. Do not dispose it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ThemeImages.GetMenuSeparator">
            <summary>
            Returns the saved separator image. Do not dispose it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ThemeImages.GetSubMenuArrow(C1.Win.C1Input.SubMenuArrowState)">
            <summary>
            Returns the saved submenu arrow image of the specified state. Do not dispose it.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.ThemeImages.GetToggleButton(C1.Win.C1Input.ToggleButtonState)">
            <summary>
            Returns the saved toggle button image of the specified state. Do not dispose it.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Input.Enums.BreakType">
            <summary>
            Specifies whether the layout should break the flow after the component.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.BreakType.None">
            <summary>
            The layout should not break the flow after the component.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.BreakType.Row">
            <summary>
            Causes next component to be placed in a new row within the flow.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.BreakType.Column">
            <summary>
            Creates a new column after this component.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.BreakType.Group">
            <summary>
            Creates a new row starting below the current component, at the left edge of the current group.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.ContentAlignment">
            <summary>
            Defines values for the content alignment within the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.ContentAlignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.ContentAlignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputComboBoxStyle">
            <summary>
            Determines whether the user can edit a value in the text portion of the <see cref="T:C1.Win.C1Input.C1ComboBox"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputComboBoxStyle.DropDown">
            <summary>
            The text portion is editable.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputComboBoxStyle.DropDownList">
            <summary>
            The user cannot directly edit the text portion.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputContentAlignment">
            <summary>
            Defines values for the content alignment within the <see cref="T:C1.Win.C1Input.DropDownItem"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputContentAlignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputImageAlignment">
            <summary>
            Specifies the image alignment on the input components.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.TopLeft">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.TopCenter">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.TopRight">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.MiddleLeft">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.MiddleCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.MiddleRight">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.BottomLeft">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.BottomCenter">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageAlignment.BottomRight">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputImageLayout">
            <summary>
            Specifies the layout logic used to display the background image in a rich tooltip.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageLayout.None">
            <summary>
            The image is left-aligned at the top across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Tile">
            <summary>
            The image is tiled across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Center">
            <summary>
            The image is centered within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Stretch">
            <summary>
            The image is stretched across the control's client rectangle. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageLayout.Zoom">
            <summary>
            The image is enlarged within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageLayout.TileStretch">
            <summary>
            The image is split into nine pieces and tiled within the control's client rectangle.
            Center tiles are stretched, corner tiles are rendered with the original size.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputImageScaling">
            <summary>
            Specifies the image scaling on the input components.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputNavigatorButton">
            <summary>
            A list of all available navigator buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MoveFirst">
            <summary>
            The 'Move First' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MovePrevious">
            <summary>
            The 'Move Previous' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MoveNext">
            <summary>
            The 'Move Next' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.MoveLast">
            <summary>
            The 'Move Last' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.AddNew">
            <summary>
            The 'Add New' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Delete">
            <summary>
            The 'Delete' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Edit">
            <summary>
            The 'Edit' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Apply">
            <summary>
            The 'Apply' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Cancel">
            <summary>
            The 'Cancel' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Save">
            <summary>
            The 'Save Data' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorButton.Reload">
            <summary>
            The 'Reload Data' button
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.InputNavigatorItems">
            <summary>
            A set of navigator items.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.None">
            <summary>
            No items are in the set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MoveFirstButton">
            <summary>
            The 'Move First' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MovePreviousButton">
            <summary>
            The 'Move Previous' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.PositionInputBox">
            <summary>
            The input box that changes the current position.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.CountLabel">
            <summary>
            The text label that displays the total number of items.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MoveNextButton">
            <summary>
            The 'Move Next' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.MoveLastButton">
            <summary>
            The 'Move Last' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.AddNewButton">
            <summary>
            The 'Add New' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.DeleteButton">
            <summary>
            The 'Delete' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.ApplyButton">
            <summary>
            The 'Apply' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.CancelButton">
            <summary>
            The 'Cancel' button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.InputNavigatorItems.All">
            <summary>
            Includes all available items.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.Enums.Visibility">
            <summary>
            Specifies the display state of a component.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.Visibility.Visible">
            <summary>
            Display the component.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.Visibility.Hidden">
            <summary>
            Do not display the element, but reserve space for the element in layout.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.Enums.Visibility.Collapsed">
            <summary>
            Do not display the element, and do not reserve space for it in layout.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.IDropDownController">
            <summary>
            Implemented by the C1InputPanel control and its components.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ISupportAccelerator">
            <summary>
            This is a marker interface that indicates the component supports
            accelerator keys.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.IImageHolder">
            <summary>
            Passes the owner element properties to the ButtonImageElement.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.DropDownItemClickedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked"/> event of the <see cref="T:C1.Win.C1Input.C1SplitButton"/> class.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:C1.Win.C1Input.DropDownItemClickedEventArgs">
            <summary>
            Provides data for <see cref="E:C1.Win.C1Input.C1SplitButton.DropDownItemClicked"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.DropDownItemClickedEventArgs.#ctor(C1.Win.C1Input.DropDownItem)">
            <summary>
            Initializes a new instance of the DropDownItemClickedEventArgs class for the specified control.
            </summary>
            <param name="clickedItem">The <see cref="T:C1.Win.C1Input.DropDownItem"/> to store in this event.</param>
        </member>
        <member name="P:C1.Win.C1Input.DropDownItemClickedEventArgs.ClickedItem">
            <summary>
            Returns the clicked item.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.AutoSuggestMode">
            <summary>
            Gets or sets a value which determines the filtering criteria for items which appear in the dropdown that is displayed when the AutoCompleteMode property is set to 'Suggest' or 'SuggestAppend'.
            </summary>
            <remarks>
            The search is case-insensitive.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.AutoSuggestMode.Default">
            <summary>
            Default filtering method. Same to <see cref="F:C1.Win.C1Input.AutoSuggestMode.StartsWith"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.AutoSuggestMode.StartsWith">
            <summary>
            Beginning of a candidate string matches the entered string.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.AutoSuggestMode.Contains">
            <summary>
             A candidate string contains the entered string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.C1TextBox">
            <summary>
            The main data bound control used for entering and editing information in a text form. 
            Supports data formatting for all data types, including special features for date-time formats. 
            Also supports edit mask, data validation and other features.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.#ctor">
            <summary>
            Initializes a new instance of the C1TextBox class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the C1TextBox.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.FlatSystemBorder">
            <summary>
            Makes Fixed3D borders old-style looking (flat) 
            for System VisualStyle.
            This property is only for compatibility with legacy applications only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.MarkEmpty">
            <summary>
            Draws a red dotted line if Value is empty.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Placeholder">
            <summary>
            Gets or sets the textual place holder, that is displayed by <see cref="T:C1.Win.C1Input.C1TextBox"/> to prompt the user for information.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.BorderColor">
            <summary>
            Gets or sets the border color of the control.
            </summary>
            <remarks>
            <para>Use the <b>BorderColor</b> property to specify the border color of the control. 
            This property is set using a <see cref="T:System.Drawing.Color"/> object.</para>
            <para>The <b>BorderColor</b> property has an effect only when the <see cref="P:C1.Win.C1Input.C1TextBox.BorderStyle"/> property is set to <b>FixedSingle</b>. </para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.C1TextBox.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.C1TextBox.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.C1TextBox.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ShouldSerializeBackColor">
            This method is for internal use only.
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DisabledForeColor">
            <summary>
            Gets or sets the foreground color of the disabled control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.NegativeForeColor">
            <summary>
            Gets or sets the foreground color of the control which contains negative value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.UseColumnStyles">
            <summary>
            Indicates whether to honor the ColumnStyle properties defined on the
            C1ViewColumn object that this control is bound to.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Culture">
            <summary>
            The culture ID.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CalendarType">
            <summary>
            Calendar, used to format date.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CultureName">
            <summary>
            The name selected for the Culture property in the Properties grid
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.UserCultureOverride">
            <summary>
            If True, current user regional settings override the selected culture.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CultureInfo">
            <summary>
            The current CultureInfo object (available at runtime).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DisplayFormat">
            <summary>
            Format used to display the value when the control is not in edit mode (does not have input focus or is read-only).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.EditFormat">
            <summary>
            Format used to display the value when the control is in edit mode (has input focus and is not read-only).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CharCategory">
            <summary>
            Defines rules to filter keyboard input.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ParseInfo">
            <summary>
            Settings affecting parsing, that is, converting the string entered by the user to the data type.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.MaskInfo">
            <summary>
            Edit mask settings.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.MaxLength">
            <summary>
              Gets or sets the maximum number of characters the user can type or paste into the text box control.
            </summary>
            <value>
              The number of characters or bytes (determined by the 
              <b>LengthAsByte</b> property) 
              that can be entered into the control. <br/>The default is <b>zero</b>.
            </value>
            <remarks>
              The <b>MaxLength</b> property allows you to limit the number of characters 
              a user can enter in the control. The default value is 0, 
              which does not limit the number of characters. Any number greater than 0 indicates 
              the maximum number of characters.
               The <see cref="P:C1.Win.C1Input.MaxLengthUnit"/> effects the displayed result along with the <b>MaxLength</b> property.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              If value is less than zero, an ArgumentOutOfRangeException is thrown.
            </exception>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.MaxLineCount">
            <summary>
              Gets or sets the maximum number of lines.
            </summary>
            <value>
              An <b>int</b> value that indicates the maximum number of lines.
              <br/>The default is <b>zero</b>.
            </value>
            <remarks>
              <para><b>MaxLineCount</b> limits the acceptable lines of text when the <see cref="P:C1.Win.C1Input.C1TextBox.Multiline"/>
              property is <see langword="true"/>.
              </para>
              <para>
              This property does not work with wrapped lines, so preferrable is to use <b>MaxLineCount</b> when <see cref="P:System.Windows.Forms.TextBoxBase.WordWrap"/>
              property is <see langword="true"/>.
              </para>
              <para>
              The default value of this property, zero, means no limit.
              </para>
            </remarks>
            <seealso cref="P:C1.Win.C1Input.C1TextBox.Multiline"/>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.MaxLengthUnit">
            <summary>
              Gets or sets whether the maximum number of characters that fit in the control 
              are handled based on bytes, characters, or text elements.
            </summary>
            <remarks>
              Determines the unit for counting for the <see cref="P:C1.Win.C1Input.C1TextBox.MaxLength"/> property. 
              The value <b>LengthUnit.Byte</b> means the MaxLength is counted by Byte.
              The value <b>LengthUnit.Char</b> means the MaxLength is counted by Char.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CaseSensitive">
            <summary>
            True if string comparisons are case-sensitive; otherwise, False. Default: False
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.FormatType">
            <summary>
            Enumeration value determining the formatting method, including standard .NET format specifiers, custom and programmatic formatting.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CustomFormat">
            <summary>
            Custom format specifier used if FormatType = FormatTypeEnum.CustomFormat.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.NullText">
            <summary>
            String representing a DBNull value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.EmptyAsNull">
            <summary>
            If True, empty strings are interpreted as null values (DBNull).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.TrimStart">
            <summary>
            If True, leading spaces are removed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.TrimEnd">
            <summary>
            If True, trailing spaces are removed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.EditMask">
            <summary>
            The edit mask string restricting user input.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.NumericInput">
            <summary>
            Sets or gets a value indicating whether a special edit mode is used for numeric values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.NumericInputKeys">
            <summary>
            Enables/disables the special keys used when NumericInput = True. Default: NumericInputKeyFlags.Standard.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DateTimeInput">
            <summary>
            Whether or not a special edit mode is applied to DateTime values.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CurrentTimeZone">
            <summary>
            If True, the control's stored Value is in current time zone; otherwise, the Value is adjusted to the time zone defined by the GMTOffset property
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.GMTOffset">
            <summary>
            The time zone of the Value property used if CurrentTimeZone = False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.WrapDateTimeFields">
            <summary>
            If this property is False the month will be automatically incremented when the user spins the date past the end of the month. The same about other parts of the date/time value.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.LoopPosition">
            <summary>
            Gets or sets a value indicating whether the position of the caret is automatically moved to the first field when the last field is filled.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.AutoChangePosition">
            <summary>
            Gets or sets a value indicating whether the position of the character is automatically changed
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DaylightTimeAdjustment">
            <summary>
            The value specified in the GMTOffset property can be advanced or set back due to daylight-saving time changes. Default: NoAdjustments.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.MinShortYear">
            <summary>
            The minimum year that can be entered without leading zeros.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.PreValidation">
            <summary>
            Validation rules applied before parsing, that is, before converting the string entered by the user to the DataType (raw string validation).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.PostValidation">
            <summary>
            Validation rules applied after parsing, that is, after converting the string entered by the user to the DataType (typed validation).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.CausesValidation">
            <summary>
            Gets or sets a value indicating whether the control causes validation (i.e. calls Validated and Validating events)
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Tag">
            <summary>
            Gets or sets the object that contains data about the control
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.BaseText">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.TextLength">
            <summary>
            Gets the length of text in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Lines">
            <summary>
            The lines of text in a multiline control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.TextDetached">
            <summary>
            Specifies whether the Value and Text properties can be set independently.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DataSource">
            <summary>
            The data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DataField">
            <summary>
            The field of the data source object to which the control is bound.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DataType">
            <summary>
            Type of the Value property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ValueIsDbNull">
            <summary>
            Gets or sets a value indicating whether the Value is DBNull.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.TryGetValue(System.Object@)">
            <summary>
            For internal use.
            Works same as <see cref="P:C1.Win.C1Input.C1TextBox.Value"/> property but does not cause an exception
            if entered text can not be parsed.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Value">
            <summary>
            Gets or sets the current <see cref="P:C1.Win.C1Input.C1TextBox.DataType"/> representation of the visual information contained in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ErrorInfo">
            <summary>
            Settings affecting error handling in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.AcceptsEscape">
            <summary>
            Indicates if the Escape key that cancels modified value is handled by the control without passing it to the owner form (AcceptsEscape=True), or it is then passed to the form and can close it if the form has CancelButton (AcceptsEscape=False).
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.AcceptsTab">
            <summary>
            Indicates if Tab and Shift+Tab keys are accepted by control and move the focus to the next (previous) group of input characters in edit mask and in DateTimeInput mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Modified">
            <summary>
            Gets or sets a value that indicates that the control has been modified by the user since the control received the input focus or its Value last set.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.EditMode">
            <summary>
            Returns True, if the control has input focus and TextDetached = False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Label">
            <summary>
            Label control associated with this input field.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.InitialSelection">
            <summary>
            Determines the selection position when a control receives input focus. Default: InitialSelectionEnum.SelectAll.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DisableOnNoData">
            <summary>
            Gets or sets whether the text box should be disabled when it is bound to an empty data source, i.e. CurrencyManager.Count = 0.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ShowFocusRectangle">
            <summary>
            Specifies whether a focus rectangle should be displayed around the client area when the control has the input focus.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ShowContextMenu">
            <summary>
            Specifies whether the context menu can be displayed for the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.AutoSize">
            <summary>
            Gets or sets a value indicating whether the height of the control automatically adjusts when the font assigned to the control is changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.VerticalAlign">
            <summary>
            Gets or sets the vertical alignment of the content in the control. The default is VerticalAlignEnum.Top.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Margins">
            <summary>
            Gets or sets the spacing between the input control content and its edges, in pixels. Default: all margins are set to 0.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ValueChangedBehavior">
            <summary>
            Allows backward compatibility with the old behavior, when the ValueChanged event previously fired on any text change.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ExitOnLastChar">
            <summary>
              Gets or sets whether the next control in the tab order receives the focus as 
              soon as the control is filled at the last character. 
            </summary>
            <value>
              <see langword="true"/> if the focus is moved to the next control in the tab order as soon as the control
              is filled at the last character defined by the input control; otherwise, <see langword="false"/>. 
               <br/>
              The default is <see langword="false"/>.
            </value>
            <remarks>
              The input focus moves to the next control when the last entered character causes the text to exceed the limit of the control.
            </remarks>
            <seealso cref="P:C1.Win.C1Input.C1TextBox.ExitOnLeftRightKey"/>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.ExitOnLeftRightKey">
            <summary>
            Gets or sets whether the focus automatically moves to the previous or next control in the tab order when pressing the left or right arrow keys.
            </summary>
            <value>
              One of the <see cref="P:C1.Win.C1Input.C1TextBox.ExitOnLeftRightKey"/> enumeration values.  
              <br/> 
              The default is <see cref="F:C1.Win.C1Input.ExitOnLeftRightKey.None"/>.
            </value>
            <remarks>
              The value of this property indicates the key which moves the input focus to the next control. 
              When the caret is at the last character of this control, focus moves out by pressing the right arrow key. 
              When the caret is before the first character of this control, focus moves out by pressing the left key.
            </remarks>
            <seealso cref="P:C1.Win.C1Input.C1TextBox.ExitOnLastChar"/>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.Initialization">
            <summary>
            Gets a value indicating that the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit"/> method was called and the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> method was not called.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.SetProposedValue(System.Object)">
            <summary>
            This method works exactly as setting the Value property, except that it does not change the internal variable
            storing the value before editing, so the user can press Esc and restore the previous value. 
            This method works only in edit mode. If the control is not in edit mode, this methods does nothing.
            </summary>
            <param name="value">Value to set to the control.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.SuspendNumericInput(System.Boolean,System.Boolean)">
            <summary>
            This method temporarily disables numeric input mode
            </summary>
            <param name="suspend">True to suspend numeric input, False to resume it</param>
            <param name="updateValue">If True, control's Value is updated, obtained from the current control text.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ParseContent(System.Object@,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Parses the Text string.
            </summary>
            <param name="parsedValue">Output parameter: Parsing result</param>
            <param name="errorInfo">Output parameter: Object detailing error information, if an error occurred.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Sets culture.
            </summary>
            <param name="cultureInfo">New culture.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.SetCutureInfo(System.Globalization.CultureInfo)">
            <summary>
            Sets culture.
            </summary>
            <param name="cultureInfo">New culture.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.CheckValidationResult(C1.Win.C1Input.ErrorReasonEnum,System.Object@,C1.Win.C1Input.ErrorInfo)">
            <summary>
            Checks the result of the ParseContent method.
            </summary>
            <param name="reason">Value indicating the reason of validation failure</param>
            <param name="parsedValue">Parsed value of type DataType that was undergoing validation</param>
            <param name="errorInfo">Object detailing error information, if an error occurred</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.UpdateValueWithCurrentText">
            <summary>
            Triggers parsing of the Text property and updating the Value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.IncDateTimeInput">
            <summary>
            Increments the currently selected field in DateTimeInput mode.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.DecDateTimeInput">
            <summary>
            Decrements the currently selected field in DateTimeInput mode.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ValidateText">
            <summary>
            Validates current Text property in the same manner as it usually validated after the control loses focus.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.SafeRecreateHandle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.GoToField(C1.Win.C1Input.DateTimeField,System.Boolean)">
            <summary>
            Moves the selection to the specified date-time field. Works only if the <see cref="P:C1.Win.C1Input.C1TextBox.DataType"/> property 
            is set to <see cref="T:System.DateTime"/> and the date-time input is active.
            </summary>
            <param name="field">Field to select.</param>
            <param name="updateText">a value that determines whether the text should be updated.</param>
            <returns>returns true if success.</returns>
            <remarks>
            Can be used in the <see cref="M:C1.Win.C1Input.C1TextBox.UpdateSelection"/> method to customize initial selection if the value type is date-time.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.UpdateSelection">
            <summary>
            Updates selection of the text according to the <see cref="P:C1.Win.C1Input.C1TextBox.InitialSelection"/> property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.UpdateRegion">
            <summary>
            Handle Win11 borders.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.UpdateNC">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ShouldDrawPlaceholder">
            <summary>
            Indicates whether the placeholder should be drawn.
            </summary>        
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.DrawBorder(System.Drawing.Graphics,System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="g"></param>
            <param name="clear"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.DrawBorder(System.Drawing.Graphics,System.IntPtr,System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="g"></param>
            <param name="dc"></param>
            <param name="clear"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.DrawFocusRectangle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.CalcSizeInternal">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.WmNCPaintSingleline(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.BeginInit">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.EndInit">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.UpdateDataType(System.Type)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="propertyType"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.BorderColorChanged">
            <summary>
            Occurs when the BorderColor property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.CultureInfoSetup">
            <summary>
            CultureInfo can be set up (on startup) or has been changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnCultureInfoSetup(C1.Win.C1Input.CultureInfoSetupEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.FormatError">
            <summary>
            Occurs when the control receives data that cannot be formatted according to the current format and edit mask settings.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnFormatError(C1.Win.C1Input.FormatErrorEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.Formatting">
            <summary>
            Formatting the value programmatically.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnFormatting(C1.Win.C1Input.FormatEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.Formatted">
            <summary>
            Occurs after the value has been formatted.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnFormatted(C1.Win.C1Input.FormatEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.Parsing">
            <summary>
            Programmatic parsing of the input string.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnParsing(C1.Win.C1Input.ParseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.Parsed">
            <summary>
            Occurs after the input string value has been converted to the DataType.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnParsed(C1.Win.C1Input.ParseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.PreValidating">
            <summary>
            Programmatic input string validation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnPreValidating(C1.Win.C1Input.PreValidationEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.PreValidated">
            <summary>
            Occurs after the input string value has been validated.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnPreValidated(C1.Win.C1Input.PreValidationEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.PostValidating">
            <summary>
            Programmatic typed value validation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnPostValidating(C1.Win.C1Input.PostValidationEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.PostValidated">
            <summary>
            Occurs after the typed value has been validated
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnPostValidated(C1.Win.C1Input.PostValidationEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.DataTypeChanged">
            <summary>
            Occurs when the DataType property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnDataTypeChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.ValueChanged">
            <summary>
            Occurs when the Value changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnValueChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.ValidationError">
            <summary>
            Error occurred while parsing or validating the input string.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnValidationError(C1.Win.C1Input.ValidationErrorEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.BindingFormatting">
            <summary>
            Occurs when Value is retrieved from the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnBindingFormatting(System.Windows.Forms.ConvertEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.BindingParsing">
            <summary>
            Occurs when Value is stored in the data source.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnBindingParsing(System.Windows.Forms.ConvertEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.VerticalAlignChanged">
            <summary>
            Occurs when the value of the VerticalAlign property has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnVerticalAlignChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.MarginsChanged">
            <summary>
            Occurs when the Margins property or one of the margins has changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnMarginsChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.BackgroundImageChanged">
            <summary>
            Occurs when the value of the BackgroundImage property changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.RaiseInvalidInput(System.EventArgs)">
            <summary>
              Raises the <see cref="E:C1.Win.C1Input.C1TextBox.InvalidInput"/> event.
            </summary>
            <param name="e">
              An <see cref="T:System.EventArgs"/> that contains the event editor.
            </param>
        </member>
        <member name="E:C1.Win.C1Input.C1TextBox.InvalidInput">
            <summary>
              Occurs when invalid character is in input.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnRegionChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnModifiedChanged(System.EventArgs)">
            <summary>
            Raises the ModifiedChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnBorderColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Input.C1TextBox.BorderColorChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler through a delegate. </para>
            <para>The <b>OnBorderColorChanged</b> method also allows derived classes to handle the event without attaching a delegate. 
            This is the preferred technique for handling the event in a derived class.</para>
            <para><b>Notes to Inheritors.</b> When overriding <b>OnBorderColorChanged</b> in a derived class, 
            be sure to call the base class's <b>OnBorderColorChanged</b> method so that registered delegates receive the event. 
            </para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ResetText">
            <summary>
            Updates the control's Text with the current Value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnEnabledChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Win.C1Input.C1TextBox.m_c1embedded">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.C1TextBox.m_c1embedEndOnSideArrows">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorInitialize(System.Object,System.Collections.IDictionary)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="value"></param>
            <param name="attrs"></param>_displayFormat
            
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorGetValue">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorSetValue(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorValueIsValid">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorGetStyle">
            <summary>
            This method is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorUpdateBounds(System.Drawing.Rectangle)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorKeyDownFinishEdit(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.C1EditorFormat(System.Object,System.String)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnParentChanged(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Win.C1Input.C1TextBox.DefaultThemeRootPath">
            <summary>
            Default path for the control in xml theme file.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.ThemeChanged(System.Object)">
            <summary>
            This method is called when theme is changed.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="M:C1.Win.C1Input.C1TextBox.OnThemeChanged(System.Object)">
            <summary>
            Use this method for overriding in inherited control.
            </summary>
            <param name="theme">New theme.</param>
        </member>
        <member name="T:C1.Win.C1Input.HighlightingToolBar">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.HighlightingToolBar.VisualStyle">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.ResetVisualStyle">
            <summary>
            Resets <see cref="P:C1.Win.C1Input.HighlightingToolBar.VisualStyle"/> to the default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.ShouldSerializeVisualStyle">
            <summary>
            Tests whether <see cref="P:C1.Win.C1Input.HighlightingToolBar.VisualStyle"/> should be serialized.
            </summary>
            <returns>True if <see cref="P:C1.Win.C1Input.HighlightingToolBar.VisualStyle"/> should be serialized, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Invokes the VisualStyleChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="E:C1.Win.C1Input.HighlightingToolBar.VisualStyleChanged">
            <summary>
            Occurs when the VisualStyle property has changed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.HighlightingToolBar.VisualStyleBaseStyle">
            <summary>
            Gets or sets the base visual style of the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.CalcDesiredSize">
            <summary>
            Calculates and returns the desired size (incl. borders etc.).
            </summary>
            <returns>The desired size. If Size.Empty is returned,
            the toolbar does not contain any visible buttons and can be hidden.
            </returns>
        </member>
        <member name="P:C1.Win.C1Input.HighlightingToolBar.Themed">
            <summary>
            For testing. Indicates whether the theme is actually applied
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:C1.Win.C1Input.HighlightingToolBar.BeforeMouseDown">
            <summary>
            This event is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.HighlightingToolBar.ImageListHi">
            <summary>
            This property is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.HighlightingToolBar.UseImageListHi">
            <summary>
            Gets or sets the value indicating whether to use button images
            from ImageListHi to highlight the hot button.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnMouseEnter(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnMouseLeave(System.EventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.OnBeforeMouseDown(System.ComponentModel.CancelEventArgs)">
            <summary>
            This method is for internal use only.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Input.HighlightingToolBar.DoRecreateHandle">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CalendarType">
            <summary>
            Calendar used with C1DateEdit.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.Default">
            <summary>
            Represents default calendar.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.ChineseLunisolarCalendar">
            <summary>
            Represents Chinese Lunisolar Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.EastAsianLunisolarCalendar">
            <summary>
            Represents East Asian Lunisolar Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.GregorianCalendar">
            <summary>
            Represents Gregorian Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.HebrewCalendar">
            <summary>
            Represents Hebrew Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.HijriCalendar">
            <summary>
            Represents Hijri Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.JapaneseCalendar">
            <summary>
            Represents Japanese Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.JapaneseLunisolarCalendar">
            <summary>
            Represents Japanese Lunisolar Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.JulianCalendar">
            <summary>
            Represents Julian Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.KoreanCalendar">
            <summary>
            Represents Korean Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.KoreanLunisolarCalendar">
            <summary>
            Represents Korean Lunisolar Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.TaiwanCalendar">
            <summary>
            Represents Taiwan Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.TaiwanLunisolarCalendar">
            <summary>
            Represents Taiwan Lunisolar Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.ThaiBuddhistCalendar">
            <summary>
            Represents Thai Buddhist Calendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.UmAlQuraCalendar">
            <summary>
            Represents UmAlQuraCalendar
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CalendarType.PersianCalendar">
            <summary>
            Represents the Persian calendar.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.RangeSliderScrollBehavior">
            <summary>
            Specifies how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RangeSliderScrollBehavior.None">
            <summary>
            Both thumbs will not move.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RangeSliderScrollBehavior.Thumb">
            <summary>
            Closest thumb will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.RangeSliderScrollBehavior.Range">
            <summary>
            Both thumbs will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.UpDownButtonAlignment">
            <summary>
            Specifies alignment of spin button of a <see cref="T:C1.Win.C1Input.C1DropDownControl"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.UpDownButtonAlignment.Default">
            <summary>
            Vertically stacked Up and Down buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.UpDownButtonAlignment.UpLeftDownRight">
            <summary>
            Up button on the left and down button on the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.UpDownButtonAlignment.UpRightDownLeft">
            <summary>
            Up button on the right and down button on the left.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.ControlHelper">
            <summary>
              Represents the helper class for System.Windows.Forms.Control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.ControlHelper.MoveFocus(System.Windows.Forms.Control,System.Boolean)">
            <summary>
              Move focus to other control from focus control.
            </summary>
            <param name="focusControl">
              The focus control.
            </param>
            <param name="forward">
              <b>true</b> to move forward in the tab order; <b>false</b> to move backward in the tab order.
            </param>
            <returns>
              true if a control was activated; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.EnumExt.HasFlag(System.Enum,System.Enum)">
            <summary>
            Check to see if a flags enumeration has a specific flag set.
            </summary>
            <param name="variable">Flags enumeration to check</param>
            <param name="value">Flag to check for</param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Input.InputUtil.IsWinXPOrBetter">
            <summary>
            Returns true if running under Windows XP or better OS.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.InputUtil.IsVistaOrBetter">
            <summary>
            Returns true if running under Vista OS or better OS.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.InputUtil.IsLargeDPI">
            <summary>
            Returns true if running in 120DPI mode.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.InputUtil.ShouldSerializeObject(System.Object)">
            <summary>
            Returns true if the specified object has any properties which should be serialized.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CharType">
            <summary>
              Defines the category of a Unicode character.  
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.OtherChar">
            <summary>
              Indicates that the character is not of a particular category.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Control">
            <summary>
              Indicates that the character is a control code.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Numeric">
            <summary>
              Indicates that the character is a numeric digit.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.MathSymbol">
            <summary>
              Indicates that the character is a mathematical symbol.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Symbol">
            <summary>
              Indicates that the character is a symbol.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Punctuation">
            <summary>
              Indicates that the character is a punctuation. ( Open &amp; Close )
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Space">
            <summary>
              Indicates that the character is a space character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.UpperCase">
            <summary>
              Indicates that the character is an upper case letter.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.LowerCase">
            <summary>
              Indicates that the character is a lower case letter.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Katakana">
            <summary>
              Indicates that the character is a Japanese Katakana character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Hiragana">
            <summary>
              Indicates that the character is a Japanese Hiragana character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.FarEastPunctation">
            <summary>
              Indicates that the character is a CJK punctuation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.Hangul">
            <summary>
              Indicates that the character is a Hangal character.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharType.FullWidth">
            <summary>
              Indicates that the character is of full width.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CharHelper">
            <summary>
            Provides a set of static methods to work with Japanese encodings.
            </summary>
            <example>
            Shows how to use <see cref="T:C1.Win.C1Input.CharHelper"/> in <see cref="E:System.Windows.Forms.Control.KeyPress"/> event handler for conditioning filtering inputs.
            
            <code>
            		private void c1TextBox1_KeyPress(object sender, KeyPressEventArgs e)
                    {
                        if (CharHelper.IsKatakana(e.KeyChar))
                           e.KeyChar = CharHelper.ToHiragana(e.KeyChar);
                    } 
            </code> 
            </example>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper.Null">
            <summary>
             Defines the Null char.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper.Backspace">
            <summary>
              Defines the control char: Backspace
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper.Tab">
            <summary>
              Defines the control char: Tab.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper.Space">
            <summary>
              Defines the control char: Space.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper._charstarts">
            <summary>
              Character groups (character codes) based on Unicode 3.1.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.CharHelper.Blocks">
            <summary>
              Character blocks categorized base on the Unicode standard.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper._fullhalfblocks">
            <summary>
              Table of multi-width character blocks.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper._mwtable">
            <summary>
              Type of multi-width characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper._halfkana">
            <summary>
              Mapping table of full width Katakana.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper._fullkana">
            <summary>
              Mapping table of half-width Katakana.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper._accentkana">
            <summary>
              Mapping table for accents for the Japanese language.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper.MinValue">
            <summary>
              Represents the smallest possible value of a Char. 
              This field is constant.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.CharHelper.MaxValue">
            <summary>
              Represents the largest possible value of a Char. 
              This field is constant.
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.GetCharType(System.Char)">
            <summary>
              Retrieves the type of character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A CharType representing the type of character of c.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsCharOfType(System.Char,C1.Win.C1Input.CharType)">
            <summary>
              Determines whether the specified character is of the
              specified type.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="type">A CharType type.</param>
            <returns>
              true if specified c and type matches the type of the
              character; otherwise false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsMultiWidth(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a multi-width character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a multi-width character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsMultiWidth(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in a specified string is categorized as a multi-width 
              character. 
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a multi-width 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsFullWidth(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is a 
              full width character. Usually CJK characters are considers 
              as full widths.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a full width character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsFullWidth(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a full width character. Usually 
              CJK characters are considers as full widths.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a full width 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsOther(System.Char)">
            <summary>
              Indicates whether a Unicode character doesn't belong to
              any specific letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is doesn't a Katakana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsControl(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a control code.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a control code; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsControl(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a control code.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a control 
              code; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsKatakana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Katakana letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Katakana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsKatakana(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Katakana character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Katakana 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsHiragana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Hiragana letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Hiragana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsHiragana(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Hiragana character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Hiragana 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsDigit(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Numeric digit.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Numeric character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsDigit(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Numeric digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Numeric 
              digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsPunctuation(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Punctuation character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Punctuation character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsPunctuation(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Punctuation character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Punctuation 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsMathSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a mathematical symbol.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a mathematical character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsMathSymbol(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a mathematical symbol.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a mathematical 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Symbol character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Symbol character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsSymbol(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Symbol character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Symbol 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsLower(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Lowercase letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Lowercase letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsLower(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Lowercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Lowercase 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsUpper(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Uppercase letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Uppercase letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsUpper(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Uppercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Uppercase 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsDigitOrSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Numeric or a Math symbol.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a numeric or symbol character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsDigitOrSymbol(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a Numeric or a Math symbol.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Numeric 
              or a Math symbol; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsAlphabet(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a alphabet letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a alphabet letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsAlphabet(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a alphabet letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a alphabet 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsAlphaOrDigit(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a alphabet letter or digit.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a alphabet letter or digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsAlphaOrDigit(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in the specified string is a alphabet letter or digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a alphabet 
              letter or digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsUpperKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a upper (capital) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana upper (capital) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsBigKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a big (capital) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana upper (capital) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsLowerKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a lower (normal) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana lower (normal) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.HasLowerKana(System.Char)">
            <summary>
              Determines whether the related kana has a related lower case.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c has a related lower case kana; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToFullWidth(System.Char)">
            <summary>
              Transforms the specified character to a full width character
              if possible. Ranges are Latin basic, Katakana and Hangul 
              characters.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              Full width character of c, otherwise original character
              returned.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToFullWidth(System.Boolean@,System.Char[])">
            <summary>
              Tansforms the specified character to a full width character
              if possible. This method differs from the other where it 
              takes on an array of characters. In FarEast country there 
              are times when multiple half width characters make a one
              full width character.
            </summary>
            <param name="c">An array of characters.</param>
            <param name="processedAll">
              When the soundex character is processed a <b>true</b> is 
              returned; otherwise, a <b>false</b> returned.
            </param>
            <returns>
              Full width character of c, otherwise the original character
              is returned.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToHalfWidth(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's half
              width equivalent. Ranges are Latin basic, Katakana and 
              Hangul characters.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The half width equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a half
                 width or not a multi-width character.
              </para>
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToHalfWidthEx(System.Char)">
            <summary>
              Transforms the specified character to a half width character
              if possible. This method differs from the ToHalfWidth method
              where it tries to return the accurate half width character - 
              which most likely happens in FarEast countries.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A character array representing c in half width form. In most
              cases this array will have only one element.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToKatakana(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Katakana" equivalent. Special character handling 
              for the Japanese language.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToKatakana(System.Char,System.Boolean)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Katakana" equivalent with an optional setting of
              full or half width. Special character handling for
              the Japanese language 
            </summary>
            <param name="c">
              A Unicode character.
            </param>
            <param name="fullWidth">
              <b>true</b> to return a full width Katakana, and 
              <b>false</b> to return a half width Katakana.
            </param>
            <returns></returns>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToHiragana(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Hiragana" equivalent. Special character handling 
              for the Japanese language.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The Hiragana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Hiragana or not Katakana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToAnsi(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's
              ANSI equivalent.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              An Ansi character equivalent of c in the current culture.
            </returns>
            <remarks>
              Encodes the specified Unicode character to an ANSI
              character using the current culture.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
              Converts the value of a Unicode character to it's
              ANSI equivalent using the specified culture information.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="culture">
              A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Ansi character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToSJIS(System.Char)">
            <summary>
              Converts the value of a JIS (Japanese encoding) character
              to it's Shift-JIS equivalent.
            </summary>
            <param name="c">A JIS character.</param>
            <returns>
              <para>The Shift-JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a JIS character to it's equivalent Shift-JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as it's parameter - use the character value
                returned by the "ToJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToJIS(System.Char)">
            <summary>
              Converts the value of a Shift-JIS (Japanese encoding) 
              character to it's JIS equivalent.
            </summary>
            <param name="c">A Shift-JIS character.</param>
            <returns>
              <para>The JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a Shift-JIS character to it's equivalent JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as it's parameter - use the character value
                returned by the "ToSJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.FromAnsi(System.Char)">
            <summary>
              Converts the value of an ANSI character to it's Unicode
              equivalent.
            </summary>
            <param name="c">An ANSI character.</param>
            <returns>
              A Unicode character equivalent of c.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.FromAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
              Converts the value of a ANSI character to it's Unicode
              equivalent using the specified culture information.
            </summary>
            <param name="c">An ANSI character.</param>
            <param name="culture">
              A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Unicode character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToUpperKana(System.Char)">
            <summary>
              Converts an lower (normal) case kana into a upper (capital) case.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>The equivalent kana upper case character.</returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.ToLowerKana(System.Char)">
            <summary>
              Converts an upper (capital) case kana into a lower case (normal).
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>The equivalent kana lower case character.</returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.BelongTo(System.Char)">
            <summary>
              Retreives the Unicode character block the specified character
              belongs to. Current version supports a range from '\u000' 
              through '\uffff'.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A Unicode block the specified character belongs to.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.MultiWidthDetails(System.Char)">
            <summary>
              Returns further detail information of the character, since
              it lies in a range where it holds a fixture of different 
              character widths.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              An CharType describing the type of the character, and also
              the width whether it's full or half.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.IsFarEastBlock(C1.Win.C1Input.CharHelper.Blocks,System.Char)">
            <summary>
              Determines whether the specified block has to do with 
              CJK... ( only CJK have concepts of wide )
            </summary>
            <param name="block">A unicode char block.</param>
            <param name="c">
              A <see cref="T:System.Char"/> to process.
            </param>
            <returns>
              true if the block is related to CJK; otherwise false.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.innerToChar(System.Byte[])">
            <summary>
              Converts a byte array into a char type. (Internal usage)
            </summary>
            <param name="value">A byte array.</param>
            <returns>
              A character equivalent of value.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.innerToByte(System.Char)">
            <summary>
              Converts a single character into a byte array. (Internal usage)
            </summary>
            <param name="c">A character.</param>
            <returns>
              A byte array equivalent of c.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.CharHelper.GetFullHalfWidthSpecialChar(System.Char,System.Boolean)">
            <summary>
              Conversion between half and full width characters for Japanese
              special characters.
            </summary>
            <param name="c">A character.</param>
            <param name="toFull">
              <b>true</b> to convert to full width; otherwise, <b>false</b>.
            </param>
            <returns>
              The converted character. <see cref="F:System.Char.MinValue"/> means conversion
              didn't take place.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.JpnHelper.GetByteLength(System.String,System.Int32,System.Int32)">
            <summary>
              Gets the byte length of the specifed string segment.
            </summary>
            <param name="str">
              A <b>string</b> indicates the whole string.
            </param>
            <param name="start">
              An <b>int</b> indicates the start of the string segment.
            </param>
            <param name="length">
              An <b>int</b> indicates the length of the string segment.
            </param>
            <returns>
              The byte length of string segement.
            </returns>
        </member>
        <member name="M:C1.Win.C1Input.JpnHelper.GetByteLength(System.String)">
            <summary>
              Gets the byte length of the specifed string.
            </summary>
            <param name="str">
              A <b>string</b> indicates the whole string.
            </param>
            <returns>
              The byte length of string segement.
            </returns>
        </member>
        <member name="P:C1.Win.C1Input.XpTheme.IsWinXPOrBetter">
            <summary>
            Returns true if running under Windows XP or better OS.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.XpTheme.IsVistaOrBetter">
            <summary>
            Returns true if running under Vista OS or better OS.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.VsdOffice2007.TxtState">
            <summary>
            Flattens all possible Office 2007 textbox control states.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.VsdOffice2007.BtnFlavor">
            <summary>
            Defines the sub-style of buttons.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VsdOffice2007.BtnFlavor.Subdued">
            <summary>
            Like buttons in office comboboxes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Input.VsdOffice2007.BtnFlavor.Bright">
            <summary>
            Like buttons in office toolbars.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.VsdOffice2007.BtnState">
            <summary>
            Flattens all possible Office 2007 button states.
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.VsdOffice2007.BtnColors">
            <summary>
            Colors used to draw a button (some colors are start/end of gradients).
            </summary>
        </member>
        <member name="T:C1.Win.C1Input.IVisualStyleRenderer">
            <summary>
            Interface providing visual style rendering capabilities.
            NOTE: implementing classes must not cache any information about the control
            being rendered. A single instance of IVisualStyleRenderer may be created
            for a class of controls.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.IVisualStyleRenderer.VisualStyle">
            <summary>
            Gets the visual style associated with the renderer.
            </summary>
        </member>
        <member name="P:C1.Win.C1Input.IVisualStyleRenderer.StyledProperties">
            <summary>
            Gets the list of properties that are set by this style
            </summary>
        </member>
        <member name="M:C1.Win.C1Input.IVisualStyleRenderer.UpdateProperties(System.Object)">
            <summary>
            Updates the target properties if needed. Should be called by the styled control
            when its state changes in a way that could concievably cause the need to change
            styled properties such as colors (e.g. the control became disabled).
            </summary>
            <param name="target">The styled control.</param>
        </member>
        <member name="M:C1.Win.C1Input.IVisualStyleRenderer.ResetProperties(System.Object)">
            <summary>
            Resets styled properties to their default values.
            Should be called e.g. when an office 2007 style is changed to custom.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:C1.Win.C1Input.IVisualStyleRenderer.IsStyledProperty(System.String)">
            <summary>
            Tests whether the property is set by the visual style.
            It is the responsibility of the styled control to call this before trying to change any
            property that might be affected by a style.
            </summary>
            <param name="propName">The name of the property to test.</param>
            <returns>True if the property is set by the style, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Input.IVisualStyleRenderer.PropertyHasStyleValue(System.Object,System.String,System.Object)">
            <summary>
            Tests whether the current property value was set by the visual style.
            </summary>
            <param name="target">The styled control.</param>
            <param name="name">The name of the property to test.</param>
            <param name="value">The value of the property to test.</param>
            <returns>True if the property has value set by the style, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Input.VsrCustom">
            <summary>
            Defines a "Custom" visual style renderer.
            </summary>
            <remarks>
            A custom style consists of a base style (which can NOT be custom,
            but can be any other style), with some style related properties
            overridden by the user.
            
            The base style is persisted in the host class (control)
            as VisualStyleBaseStyle (hidden from users).
            
            
            
            </remarks>
        </member>
        <member name="F:C1.Win.C1Input.VsrOffice2007.DrawUtil.ButtonState.Active">
            <summary>
            Indicates that the button or its host control is acive (hovered or focused).
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.C1FrameworkHelper.ApplyStyle(C1.Win.C1Themes.Shared.C1ThemeProxy,C1.Framework.Style,System.String)">
            <summary>
            fills style props with values from the specified path
            </summary>
            <param name="tp"></param>
            <param name="style"></param>
            <param name="path"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.C1FrameworkHelper.ApplyHotStyle(C1.Win.C1Themes.Shared.C1ThemeProxy,C1.Framework.Style,System.String)">
            <summary>
            
            </summary>
            <param name="tp"></param>
            <param name="style">reference to the framework style, for which hot style should be applied</param>
            <param name="path">xml path to the hot style</param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.Dock_SizeMode">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Normal">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Fit">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.FillToEnd">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsHeaderOnly">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsLineOnly">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.Full">
            <summary>
            Borders are shown for all cells.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.CheckBoxStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            C1MultiSelect\C1CheckList\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.System">
            <summary>
            Standard system view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Black">
            <summary>
            Like a MS Office 2007 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Blue">
            <summary>
            Like a MS Office 2007 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Silver">
            <summary>
            Like a MS Office 2007 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Black">
            <summary>
            Like a MS Office 2010 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Blue">
            <summary>
            Like a MS Office 2010 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Silver">
            <summary>
            Like a MS Office 2010 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2013">
            <summary>
            Like a MS Office 2013.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Windows10">
            <summary>
            Like a Windows 10.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Fill">
            <summary>
            The image is stretched and aspect ratio is saved.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016">
            <summary>
            Office 2016 palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016Dark">
            <summary>
            Office 2016 dark palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.GroupTabStyle">
            <summary>
            Used in:
            C1Schedule\GroupTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.FullWidth">
            <summary>
            Group headers of rectangular shape take the full width of the corresponding group.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2007">
            <summary>
            Group headers of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2016">
            <summary>
            Group headers of Office2016 appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.WeekTabStyle">
            <summary>
            Used in:
            C1Schedule\WeekTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2007">
            <summary>
            Week tabs of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2016">
            <summary>
            Week tabs of Office2016 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Flat">
            <summary>
            Flat image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.Frame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.HalfFrame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Colorful">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Black">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.None">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.None">
            <summary>
            No gradient filling.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Horizontal">
            <summary>
            From left (first color) to right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.HorizontalCenter">
            <summary>
            From center (first color) to left and right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Vertical">
            <summary>
            From top (first color) to bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.VerticalCenter">
            <summary>
            From center (first color) to top and bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Diagonal">
            <summary>
            From left-bottom (first color) to right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalCenter">
            <summary>
            From center (first color) to left-bottom and right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBack">
            <summary>
            From left-top (first color) to right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBackCenter">
            <summary>
            From center (first color) to left-top and right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Radial">
            <summary>
            From center (first color) to corners (second color) in radial direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.FromCenter">
            <summary>
            From center (first color) to corners (second color).
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.C1Themes.Shared.ThemeBrushBase,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.C1Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
            <param name="color">Theme solid brush color to set.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.C1Themes.Shared.C1ThemeProxy,System.String,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.EmptyIfTransparent(System.Drawing.Color)">
            <summary>
            Gets an empty color instead of a transparent color; otherwise, it returns the specified color.
            </summary>
            <param name="color">The specified color.</param>
            <returns>Empty color if transparent color was set.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.C1Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorToString(System.Drawing.Color)">
            <summary>
            Converts color value to string.
            </summary>
            <param name="value">The color to be converted.</param>
            <returns>The string represents the color.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorFromString(System.String)">
            <summary>
            Converts string value to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <returns>The color value.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryColorFromString(System.String,System.Drawing.Color@)">
            <summary>
            Converts string to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <param name="value">The color is the result of the conversion.</param>
            <returns>True if the string to color conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.BoolToString(System.Boolean)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="value">Boolean value.</param>
            <returns>"true" if value is true and "false" if value is false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryBoolFromString(System.String,System.Boolean@)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="s">String value to convert.</param>
            <param name="value">Boolean result.</param>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.BlendToString(System.Drawing.Drawing2D.Blend)">
            <summary>
            Converts blend pattern object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object to convert.</param>
            <returns>Converted blend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryBlendFromString(System.String,System.Drawing.Drawing2D.Blend@)">
            <summary>
            Converts string to blend pattern object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.ColorBlendToString(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to convert.</param>
            <returns>Converted ColorBlend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryColorBlendFromString(System.String,System.Drawing.Drawing2D.ColorBlend@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value">Converted ColorBlend pattern as string if conversion was successful.</param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.PointToString(System.Drawing.Point)">
            <summary>
            Converts <see cref="T:System.Drawing.Point"/> object to string.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object to convert.</param>
            <returns>The string representing point.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.TryPointFromString(System.String,System.Drawing.Point@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Point"/> object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object.></param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
            <param name="data">The string of data to assign.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.GetData">
            <summary>
            Gets the data string.
            </summary>
            <returns>The data string.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.Add(System.String)">
            <summary>
            Appends a string to data.
            </summary>
            <param name="s">The string to add.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.ValuesStore.Next">
            <summary>
            Finds characters to the end of the string.
            </summary>
            <returns>True if characters were found; otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.Utils.ValuesStore.Value">
            <summary>
            Gets the characters to the end of the string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_C1PrefixRemovedFormatVersion">
            <summary>
            Version of theme XML when C1 prefix was removed
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewInputFormatVersion">
            <summary>
            Version of theme XML when structure of C1Input theme was changed
            </summary>
        </member>
        <member name="M:C1.Win.ImageWorkerService.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.ImageWorkerService.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientComponentPropertyMonitor._pName">
            <summary>
            The target property name.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientComponentPropertyMonitor._internalChange">
            <summary>
            Prevents raising the _propertySetByUser while we adjust the
            property ourselves.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientComponentPropertyMonitor._propertySetByUser">
            <summary>
            If true, we consider the property to have a value explicitly set
            ty the user, so we do not update it anymore until reset.
            </summary>
        </member>
        <member name="M:C1.Util.Win.AmbientComponentPropertyMonitor.#ctor(System.ComponentModel.Component,System.String)">
            <summary>
            Initializes a new instance of the AmbientPropertyMonitor class.
            </summary>
            <param name="host">Control on which the ambient property will be monitored.</param>
            <param name="propertyName">The name of the monitored property.
            The type of the property MUST be an enumeration.</param>
            <remarks>
            An instance of this class must be created in the constructor 
            of the host control.
            It is assumed that the value of the ambient property that will be monitored
            by the AmbientPropertyMonitor has not been set yet (i.e. has the default value)
            at the time the AmbientPropertyMonitor is constructed.
            </remarks>
        </member>
        <member name="M:C1.Util.Win.AmbientComponentPropertyMonitor.Dispose">
            <summary>
            Clears the all references.
            </summary>
            <remarks>
            Call Dispose() in the Dispose method 
            of the host control.
            
            An instance of the AmbientComponentPropertyMonitor class holds references to the 
            host in private variables and event handles.
            Host holds reference to the instance of the AmbientComponentPropertyMonitor.
            
            If not to clear the refs then the host control and the all referenced objects (Form, etc.) may be never released to GC.
            This cause a memory leak.
            </remarks>
            <example>
            public class C1CommandMenu...
            {
             public C1CommandMenu()
             {
               ...
               _ambientVisualStyleMonitor = new AmbientComponentPropertyMonitor(this, "VisualStyle");
             }
            
             protected override void Dispose(bool disposing)
             {
              if (disposing)
              {
                // To prevent the memory leak
                if (_ambientVisualStyleMonitor != null)
                {
                    _ambientVisualStyleMonitor.Dispose();
                    _ambientVisualStyleMonitor = null;
                }
                ...
                base.Dispose(disposing);
              }
            ...
            }
            </example>
        </member>
        <member name="M:C1.Util.Win.AmbientComponentPropertyMonitor.ResetValue">
            <summary>
            Notifies the AmbientPropertyMonitor that the value of the monitored property
            has been reset. If the host control is currently parented to a container
            which itself defines the monitored property, the value from that parent
            is assigned to the property on the host.
            </summary>
            <remarks>
            It is recommended that the host defines a Reset method for the target
            property, and calls this method from that. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected void ResetVisualStyle() {
                ...
                __ambientVisualStyleMonitor.ResetValue();
            }
            </code>
            </remarks>
        </member>
        <member name="P:C1.Util.Win.AmbientComponentPropertyMonitor.IsValueAmbient">
            <summary>
            Gets the value indicating whether the monitored property
            currently has the ambient value, i.e. the value has been set
            (by the AmbientPropertyMonitor) based on the value of a parent of the host.
            </summary>
            <remarks>
            It is recommended that the host defines a ShouldSerialize method for the target
            property, tests IsValueAmbient in that method, and returns false if IsValueAmbient
            returns true. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected bool ShouldSerializeVisualStyle() {
                if (__ambientVisualStyleMonitor.IsValueAmbient)
                    return false;
                ...
            }
            </code>
            </remarks>
        </member>
        <member name="T:C1.Util.Win.AmbientPropertyMonitor">
            <summary>
            A helper class for implementing an ambient property on a control.
            </summary>
            <remarks>
            Usage:
            An instance of AmbientPropertyMonitor must be created by the host control with the reference
            to that host as the parameter.
            The AmbientPropertyMonitor subscribes to the following events:
            <list type="bullet">
            <item>ParentChanged on the host and the whole parents' chain;
            </item>
            <item>(ambient property name)Changed or INotifyPropertyChanged on the host and all parents in the chain.
            NOTE: For the AmbientPropertyMonitor to work correctly, all controls that have the target property declared
            must also provide either a property changed event, or implement INotifyPropertyChanged and fire
            it at appropriate moments.
            </item>
            </list>
            <para>The AmbientPropertyMonitor monitors changes of the ambient property value on the host and all parents,
            and if a change occurs applies the value of the ambient property on the closest parent
            to that property on the host control, unless it has been changed independently of the AmbientPropertyMonitor
            (AmbientPropertyMonitor assumes that when it is created, the ambient property on the host has default,
            unchanged value).
            </para>
            <para>It is recommended that all controls declaring the target property also provide
            the Reset(property) and ShouldSerialize(property) methods, calling the
            <see cref="M:C1.Util.Win.AmbientPropertyMonitor.ResetValue"/> and <see cref="P:C1.Util.Win.AmbientPropertyMonitor.IsValueAmbient"/> methods as needed.
            </para>
            </remarks>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._pName">
            <summary>
            The target property name.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._parentChain">
            <summary>
            At all times, should contain the up-to-date parent chain,
            starting with the host itself. Needed to keep track of
            parent changes, and changes of ambient property on the parents.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._internalChange">
            <summary>
            Prevents raising the _propertySetByUser while we adjust the
            property ourselves.
            </summary>
        </member>
        <member name="F:C1.Util.Win.AmbientPropertyMonitor._propertySetByUser">
            <summary>
            If true, we consider the property to have a value explicitly set
            ty the user, so we do not update it anymore until reset.
            </summary>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            Initializes a new instance of the AmbientPropertyMonitor class.
            </summary>
            <param name="host">Control on which the ambient property will be monitored.</param>
            <param name="propertyName">The name of the monitored property.
            The type of the property MUST be an enumeration.</param>
            <remarks>
            An instance of this class must be created in the constructor 
            of the host control.
            It is assumed that the value of the ambient property that will be monitored
            by the AmbientPropertyMonitor has not been set yet (i.e. has the default value)
            at the time the AmbientPropertyMonitor is constructed.
            </remarks>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.Dispose">
            <summary>
            Clears the all references.
            </summary>
            <remarks>
            Call Dispose() in the Dispose method 
            of the host control.
            
            An instance of the AmbientPropertyMonitor class holds references to the 
            host in private variables and event handles.
            Host holds reference to the instance of the AmbientPropertyMonitor.
            
            If not to clear the refs then the host control and the all referenced objects (Form, etc.) may be never released to GC.
            This cause a memory leak.
            </remarks>
            <example>
            public class C1OutBar...
            {
             public C1OutBar()
             {
               ...
               _ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
             }
            
             protected override void Dispose(bool disposing)
             {
              if (disposing)
              {
                // To prevent the memory leak
                if (_ambientVisualStyleMonitor != null)
                {
                    _ambientVisualStyleMonitor.Dispose();
                    _ambientVisualStyleMonitor = null;
                }
                ...
                base.Dispose(disposing);
              }
            ...
            }
            </example>
        </member>
        <member name="M:C1.Util.Win.AmbientPropertyMonitor.ResetValue">
            <summary>
            Notifies the AmbientPropertyMonitor that the value of the monitored property
            has been reset. If the host control is currently parented to a container
            which itself defines the monitored property, the value from that parent
            is assigned to the property on the host.
            </summary>
            <remarks>
            It is recommended that the host defines a Reset method for the target
            property, and calls this method from that. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected void ResetVisualStyle() {
                ...
                __ambientVisualStyleMonitor.ResetValue();
            }
            </code>
            </remarks>
        </member>
        <member name="P:C1.Util.Win.AmbientPropertyMonitor.IsValueAmbient">
            <summary>
            Gets the value indicating whether the monitored property
            currently has the ambient value, i.e. the value has been set
            (by the AmbientPropertyMonitor) based on the value of a parent of the host.
            </summary>
            <remarks>
            It is recommended that the host defines a ShouldSerialize method for the target
            property, tests IsValueAmbient in that method, and returns false if IsValueAmbient
            returns true. E.g.:
            <code>
            private AmbientPropertyMonitor __ambientVisualStyleMonitor = null;
            ...
            ctor() {
                __ambientVisualStyleMonitor = new AmbientPropertyMonitor(this, "VisualStyle");
                ...
            }
            public VisualStyle VisualStyle {
                get { ... }
                set { ... }
            }
            protected bool ShouldSerializeVisualStyle() {
                if (__ambientVisualStyleMonitor.IsValueAmbient)
                    return false;
                ...
            }
            </code>
            </remarks>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AllowedCallerAttribute">
            <summary>
            Attribute used to specify assemblies that can use this product without a license.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Globalization.EraInfo">
            <summary>
              Represents the era info.
            </summary>
        </member>
        <member name="M:C1.Globalization.EraInfo.#ctor(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Globalization.EraInfo"/> class.
            </summary>
            <param name="era">The era.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="eraName">Name of the era.</param>
            <param name="abbreviatedEraName">Name of the abbreviated era.</param>
            <param name="englishEraName">Name of the English era.</param>
            <param name="symbolEraName">Name of the symbol era.</param>
        </member>
        <member name="P:C1.Globalization.EraInfo.Era">
            <summary>
              Gets the era.
            </summary>
            <value>The era.</value>
        </member>
        <member name="P:C1.Globalization.EraInfo.StartTime">
            <summary>
              Gets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:C1.Globalization.EraInfo.EndTime">
            <summary>
              Gets the end time.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:C1.Globalization.EraInfo.EraName">
            <summary>
              Gets the name of the era.
            </summary>
            <value>The name of the era.</value>
        </member>
        <member name="P:C1.Globalization.EraInfo.AbbreviatedEraName">
            <summary>
              Gets the name of the abbreviated era.
            </summary>
            <value>The name of the abbreviated era.</value>
        </member>
        <member name="P:C1.Globalization.EraInfo.EnglishEraName">
            <summary>
              Gets the name of the English era.
            </summary>
            <value>The name of the English era.</value>
        </member>
        <member name="P:C1.Globalization.EraInfo.SymbolEraName">
            <summary>
              Gets the name of the symbol era.
            </summary>
            <value>The name of the symbol era.</value>
        </member>
        <member name="M:C1.Globalization.EraInfo.IsValid(System.DateTime)">
            <summary>
              Determines whether the specified date time is valid.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>
              <b>true</b> if the specified date time is valid; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Globalization.EraInfo.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:C1.Globalization.CalendarEx">
            <summary>
              This class implement a calendar extend in order to we can configure era information.
            </summary>
        </member>
        <member name="F:C1.Globalization.CalendarEx._erasInfo">
            <summary>
              Save the data of eras info.
            </summary>
        </member>
        <member name="F:C1.Globalization.CalendarEx._maxSupportedDateTime">
            <summary>
              Save the data of max supported date time property.
            </summary>
        </member>
        <member name="F:C1.Globalization.CalendarEx._minSupportedDateTime">
            <summary>
              Save the data of min supported date time property.
            </summary>
        </member>
        <member name="M:C1.Globalization.CalendarEx.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CalendarEx"></see> class.
            </summary>
        </member>
        <member name="P:C1.Globalization.CalendarEx.ErasInfo">
            <summary>
              Gets the eras information of this calendar.
            </summary>
            <returns>
              Return a <see cref="T:C1.Globalization.EraInfo"/> array.
            </returns>
        </member>
        <member name="P:C1.Globalization.CalendarEx.Eras">
            <summary>
              Gets the list of eras in the <see cref="T:CalendarEx"></see>.
            </summary>
            <returns>
              An array of integers that represents the eras in the <see cref="T:CalendarEx"></see>.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetEraInfo(System.Int32)">
            <summary>
              Gets the specify era information.
            </summary>
            <param name="era">
              The specify era id.
            </param>
            <returns>
              Return a <see cref="T:C1.Globalization.EraInfo"/> value.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetEraInfo(System.DateTime)">
            <summary>
              Gets the specify era information.
            </summary>
            <param name="dateTime">
              The specify date time value.
            </param>
            <returns>
              Return a <see cref="T:C1.Globalization.EraInfo"/> value.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetGregorianYear(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Gets the Gregorian year from a era and a era year.
            </summary>
            <param name="year">
              The specify era year.
            </param>
            <param name="era">
              The specify era.
            </param>
            <param name="throwError">
              if set to <b>true</b> throw error when don't fit the condition.
            </param>
            <returns>
              Return a <b>int</b> year value.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetGregorianYear(System.Int32,System.Int32)">
            <summary>
              Gets the Gregorian year from a era and a era year.
            </summary>
            <param name="year">
              The specify era year.
            </param>
            <param name="era">
              The specify era.
            </param>
            <returns>
              Return a <b>int</b> year value.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.IsValidYear(System.Int32,System.Int32)">
            <summary>
              Determines whether [is valid year] [the specified year].
            </summary>
            <param name="year">The year.</param>
            <param name="era">The era.</param>
            <returns>
              <b>true</b> if [is valid year] [the specified year]; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMaxEra">
            <summary>
              Gets the max era.
            </summary>
            <returns>A max era.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMinEra">
            <summary>
              Gets the min era.
            </summary>
            <returns>A min era.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMaxEraYear(System.Int32)">
            <summary>
              Gets the max era year.
            </summary>
            <param name="era">The era.</param>
            <returns>A max era year.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMinEraYear(System.Int32)">
            <summary>
              Gets the min era year.
            </summary>
            <param name="era">The era.</param>
            <returns>A min era year.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMaxEraYear(System.DateTime)">
            <summary>
              Gets the max era year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMinEraYear(System.DateTime)">
            <summary>
              Gets the min era year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMaxYear(System.DateTime)">
            <summary>
              Gets the max year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> max year value.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMinYear(System.DateTime)">
            <summary>
              Gets the min year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> min year value.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMaxMonth(System.DateTime)">
            <summary>
              Gets the max month.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> max month value.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMinMonth(System.DateTime)">
            <summary>
              Gets the min month.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> min month value.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMaxDay(System.DateTime)">
            <summary>
              Gets the max day.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> max day value.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.GetMinDay(System.DateTime)">
            <summary>
              Gets the min day.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> min dayr value.</returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.ToFourDigitYear(System.Int32,System.Int32)">
            <summary>
              Converts the specified two-digit year to a four-digit year by using 
              the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax"></see>
              property to determine the appropriate century.
            </summary>
            <param name="year">
              A two-digit integer that represents the year to convert.
            </param>
            <param name="twoDigitYearMax">
              A <b>int</b> value indicates the two digit year max.
            </param>
            <returns>
              An integer that contains the four-digit representation of year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar or
              twoDigitYearMax large than 99 or twoDigitYearMax less than 9999. 
            </exception>
        </member>
        <member name="P:C1.Globalization.CalendarEx.MaxSupportedDateTime">
            <summary>
              Gets the latest date and time supported by the current <see cref="T:JapaneseCalendarEx"></see> object.
            </summary>
            <returns>
              The latest date and time supported by the <see cref="T:JapaneseCalendarEx"></see> type, 
              which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
            </returns>
        </member>
        <member name="P:C1.Globalization.CalendarEx.MinSupportedDateTime">
            <summary>
              Gets the earliest date and time supported by the current <see cref="T:JapaneseCalendarEx"></see> object.
            </summary>
            <returns>
              The earliest date and time supported by the <see cref="T:JapaneseCalendarEx"></see> type,
              which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar. 
              For more information, see Remarks.
            </returns>
        </member>
        <member name="M:C1.Globalization.CalendarEx.ClearEras">
            <summary>
            Removes all eras from the era list.
            </summary>
        </member>
        <member name="P:C1.Globalization.CalendarEx.DefaultErasInfo">
            <summary>
              Gets the default eras info.
            </summary>
            <value>The default eras info.</value>
        </member>
        <member name="T:C1.Globalization.JapaneseCalendarEx">
            <summary>
            Extended Japanese calendar.
            </summary>
        </member>
        <member name="F:C1.Globalization.JapaneseCalendarEx.GlobalErasInfo">
            <summary>
              An <see cref="T:C1.Globalization.EraInfo"/> array indicates the global eras info.
            </summary>
        </member>
        <member name="P:C1.Globalization.JapaneseCalendarEx.DefaultInstance">
            <summary>
              The <see cref="T:C1.Globalization.JapaneseCalendarEx"/> default instance.
            </summary>
        </member>
        <member name="F:C1.Globalization.JapaneseCalendarEx.DEFAULT_TWO_DIGIT_YEAR_MAX">
            <summary>
              The default two digit year max value.
            </summary>
        </member>
        <member name="F:C1.Globalization.JapaneseCalendarEx._prototypeCalendar">
            <summary>
              Save the data of prototype calendar property.
            </summary>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:JapaneseCalendarEx"></see> class.
            </summary>
        </member>
        <member name="P:C1.Globalization.JapaneseCalendarEx.DefaultErasInfo">
            <summary>
              Gets the default eras infomations.
            </summary>
        </member>
        <member name="P:C1.Globalization.JapaneseCalendarEx.PrototypeCalendar">
            <summary>
              Gets a prototype calendar.
            </summary>
            <returns>
              Always return the <see cref="T:System.Globalization.Calendar"/> value.
            </returns>
        </member>
        <member name="P:C1.Globalization.JapaneseCalendarEx.TwoDigitYearMax">
            <summary>
              Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
            </summary>
            <value></value>
            <returns>
              The last year of a 100-year range that can be represented by a 2-digit year.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              The current <see cref="T:System.Globalization.Calendar"></see> object is read-only.
            </exception>
        </member>
        <member name="P:C1.Globalization.JapaneseCalendarEx.AlgorithmType">
            <summary>
              Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.
            </summary>
            <returns>
              Always returns the <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar"></see> value.
            </returns>
        </member>
        <member name="P:C1.Globalization.JapaneseCalendarEx.ID">
            <summary>
              Gets the calendar id.
            </summary>
            <returns>
              Always return the <b>int</b> value 3.
            </returns>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.AddMonths(System.DateTime,System.Int32)">
            <summary>
              Returns a <see cref="T:System.DateTime"></see> that is the specified number of months away from
              the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              The <see cref="T:System.DateTime"></see> that results from adding the specified number of months
              to the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="months">
              The number of months to add. 
            </param>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to which to add months. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              months is less than -120000.-or- months is greater than 120000. 
            </exception>
            <exception cref="T:System.ArgumentException">
              The resulting <see cref="T:System.DateTime"></see> is outside the supported range. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.AddYears(System.DateTime,System.Int32)">
            <summary>
              Returns a <see cref="T:System.DateTime"></see> that is the specified number of years away from 
              the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              The <see cref="T:System.DateTime"></see> that results from adding the specified number of years to 
              the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to which to add years. 
            </param>
            <param name="years">
              The number of years to add. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              time is outside the supported range of the <see cref="T:JapaneseCalendarEx"></see> type.
              -or-years is less than -10,000 or greater than 10,000. 
            </exception>
            <exception cref="T:System.ArgumentException">
              The resulting <see cref="T:System.DateTime"></see> is outside the supported range. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetDayOfMonth(System.DateTime)">
            <summary>
              Returns the day of the month in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer from 1 to 31 that represents the day of the month in the 
              specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetDayOfWeek(System.DateTime)">
            <summary>
              Returns the day of the week in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              A <see cref="T:System.DayOfWeek"></see> value that represents the day of the week 
              in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetDayOfYear(System.DateTime)">
            <summary>
              Returns the day of the year in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
              Returns the number of days in the specified month in the specified year in the specified era.
            </summary>
            <returns>
              The number of days in the specified month in the specified year in the specified era.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetDaysInYear(System.Int32,System.Int32)">
            <summary>
              Returns the number of days in the specified year in the specified era.
            </summary>
            <returns>
              The number of days in the specified year in the specified era.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetEra(System.DateTime)">
            <summary>
              Returns the era in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer that represents the era in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="dateTime">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetLeapMonth(System.Int32,System.Int32)">
            <summary>
              Calculates the leap month for a specified year and era.
            </summary>
            <returns>
              The return value is always 0 because the <see cref="T:JapaneseCalendarEx"></see> type
              does not support the notion of a leap month.
            </returns>
            <param name="era">
              An era.
            </param>
            <param name="year">
              A year.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year or era is outside the range supported by the <see cref="T:JapaneseCalendarEx"></see> type.
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetMonth(System.DateTime)">
            <summary>
              Returns the month in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetMonthsInYear(System.Int32,System.Int32)">
            <summary>
              Returns the number of months in the specified year in the specified era.
            </summary>
            <returns>
              The return value is always 12.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
              Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime"></see> object.
            </summary>
            <returns>
              A 1-based integer that represents the week of the year that includes the date in the time parameter.
            </returns>
            <param name="rule">
              One of the <see cref="T:System.Globalization.CalendarWeekRule"></see> values that defines a calendar week. 
            </param>
            <param name="firstDayOfWeek">
              One of the <see cref="T:System.DayOfWeek"></see> values that represents the first day of the week. 
            </param>
            <param name="time">
              The <see cref="T:System.DateTime"></see> object to read. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              time or firstDayOfWeek is outside the range supported by the calendar.
              -or- rule is not a valid <see cref="T:System.Globalization.CalendarWeekRule"></see> value. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.GetYear(System.DateTime)">
            <summary>
              Returns the year in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer that represents the year in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="dateTime">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Determines whether the specified date in the specified era is a leap day.
            </summary>
            <returns>
              true, if the specified day is a leap day; otherwise, false.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="day">
              An integer from 1 to 31 that represents the day. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- day is outside the range supported by the calendar.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
              Determines whether the specified month in the specified year in the specified era is a leap month.
            </summary>
            <returns>
              This method always returns false, unless overridden by a derived class.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.IsLeapYear(System.Int32,System.Int32)">
            <summary>
              Determines whether the specified year in the specified era is a leap year.
            </summary>
            <returns>
              true, if the specified year is a leap year; otherwise, false.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.
              -or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Returns a <see cref="T:System.DateTime"></see> that is set to the specified date and time in the specified era.
            </summary>
            <returns>
              The <see cref="T:System.DateTime"></see> that is set to the specified date and time in the current era.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="millisecond">
              An integer from 0 to 999 that represents the millisecond. 
            </param>
            <param name="day">
              An integer from 1 to 31 that represents the day. 
            </param>
            <param name="minute">
              An integer from 0 to 59 that represents the minute. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <param name="hour">
              An integer from 0 to 23 that represents the hour. 
            </param>
            <param name="second">
              An integer from 0 to 59 that represents the second. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- day is outside the range supported by the calendar.-or- hour is less than zero or greater than 23.
              -or- minute is less than zero or greater than 59.-or- second is less than zero or greater than 59.
              -or- millisecond is less than zero or greater than 999.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:C1.Globalization.JapaneseCalendarEx.AddJapaneseEra(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Japanese era in the calendar.
            </summary>
            <param name="era">Index of the era</param>
            <param name="startTime">Era start date</param>
            <param name="endTime">Era end date</param>
            <param name="eraName">Japanese era name</param>
            <param name="abbreviatedEraName">Abbreviated Japanese era name</param>
            <param name="englishEraName">English era name</param>
            <param name="symbolEraName">Symbolic era name</param>
        </member>
        <member name="T:C1.Globalization.JapaneseEraHelper">
            <summary>
            Helper static class that contains AddJapaneseEra function.
            </summary>
        </member>
        <member name="M:C1.Globalization.JapaneseEraHelper.ClearJapaneseEras">
            <summary>
            Clears the all Japanese Eras.
            </summary>
        </member>
        <member name="M:C1.Globalization.JapaneseEraHelper.AddJapaneseEra(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
            Adds era to the Japanese calendar.
            </summary>
            <param name="era">Era numeric id. Must be non-negative integer</param>
            <param name="startTime">Start day of the era.</param>
            <param name="endTime">End day of the era.</param>
            <param name="eraName">Japanese name of the era.</param>
            <param name="abbreviatedEraName">Short Japanese name of the era.</param>
            <param name="englishEraName">Era name in English. Optional.</param>
            <param name="symbolEraName">One Latin symbol era name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:C1.Globalization.JapaneseEraHelper.ReadErasFromGCConfig(System.String)">
            <summary>
            Reads eras info from the GC configuration file.
            </summary>
            <param name="sectionName">Section name.</param>
        </member>
        <member name="T:C1.Framework.CharType">
            <summary>
              Defines the category of a Unicode character.  
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.OtherChar">
            <summary>
              Indicates that the character is not of a particular category.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Control">
            <summary>
              Indicates that the character is a control code.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Numeric">
            <summary>
              Indicates that the character is a numeric digit.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.MathSymbol">
            <summary>
              Indicates that the character is a mathematical symbol.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Symbol">
            <summary>
              Indicates that the character is a symbol.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Punctuation">
            <summary>
              Indicates that the character is a punctuation. ( Open &amp; Close )
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Space">
            <summary>
              Indicates that the character is a space character.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.UpperCase">
            <summary>
              Indicates that the character is an upper case letter.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.LowerCase">
            <summary>
              Indicates that the character is a lower case letter.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Katakana">
            <summary>
              Indicates that the character is a Japanese Katakana character.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Hiragana">
            <summary>
              Indicates that the character is a Japanese Hiragana character.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.FarEastPunctation">
            <summary>
              Indicates that the character is a CJK punctuation.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.Hangul">
            <summary>
              Indicates that the character is a Hangal character.
            </summary>
        </member>
        <member name="F:C1.Framework.CharType.FullWidth">
            <summary>
              Indicates that the character is of full width.
            </summary>
        </member>
        <member name="T:C1.Framework.CharHelper">
            <summary>
              Represents the extension functions to the standard .NET Char type. The purpose for this is to provide better
              CJK (Chinese, Japanese, Korean ) character support.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper.Null">
            <summary>
             Defines the Null char.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper.Backspace">
            <summary>
              Defines the control char: Backspace
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper.Tab">
            <summary>
              Defines the control char: Tab.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper.Space">
            <summary>
              Defines the control char: Space.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper._charstarts">
            <summary>
              Character groups (character codes) based on Unicode 3.1.
            </summary>
        </member>
        <member name="T:C1.Framework.CharHelper.Blocks">
            <summary>
              Character blocks categorized base on the Unicode standard.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper._fullhalfblocks">
            <summary>
              Table of multi-width character blocks.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper._mwtable">
            <summary>
              Type of multi-width characters.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper._halfkana">
            <summary>
              Mapping table of full width Katakana.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper._fullkana">
            <summary>
              Mapping table of half-width Katakana.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper._accentkana">
            <summary>
              Mapping table for accents for the Japanese language.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper.MinValue">
            <summary>
              Represents the smallest possible value of a Char. 
              This field is constant.
            </summary>
        </member>
        <member name="F:C1.Framework.CharHelper.MaxValue">
            <summary>
              Represents the largest possible value of a Char. 
              This field is constant.
            </summary>
        </member>
        <member name="M:C1.Framework.CharHelper.GetCharType(System.Char)">
            <summary>
              Retrieves the type of character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A CharType representing the type of character of c.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsCharOfType(System.Char,C1.Framework.CharType)">
            <summary>
              Determines whether the specified character is of the
              specified type.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="type">A CharType type.</param>
            <returns>
              true if specified c and type matches the type of the
              character; otherwise false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsMultiWidth(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a multi-width character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a multi-width character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsMultiWidth(System.String,System.Int32)">
            <summary>
              Indicates whether the character at the specified position 
              in a specified string is categorized as a multi-width 
              character. 
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a multi-width 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsFullWidth(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is a 
              full width character. Usually CJK characters are considers 
              as full widths.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a full width character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsFullWidth(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a full width character. Usually 
              CJK characters are considers as full widths.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a full width 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsOther(System.Char)">
            <summary>
              Indicates whether a Unicode character doesn't belong to
              any specific letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is doesn't a Katakana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsControl(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a control code.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a control code; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsControl(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a control code.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a control 
              code; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsKatakana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Katakana letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Katakana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsKatakana(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Katakana character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Katakana 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsHiragana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Hiragana letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Hiragana character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsHiragana(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Hiragana character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Hiragana 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsDigit(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Numeric digit.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Numeric character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsDigit(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Numeric digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Numeric 
              digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsPunctuation(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Punctuation character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Punctuation character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsPunctuation(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Punctuation character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Punctuation 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsMathSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a mathematical symbol.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a mathematical character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsMathSymbol(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a mathematical symbol.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a mathematical 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Symbol character.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Symbol character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsSymbol(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Symbol character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Symbol 
              character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsLower(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Lowercase letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Lowercase letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsLower(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Lowercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Lowercase 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsUpper(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Uppercase letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a Uppercase letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsUpper(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Uppercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Uppercase 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsDigitOrSymbol(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a Numeric or a Math symbol.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a numeric or symbol character; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsDigitOrSymbol(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a Numeric or a Math symbol.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a Numeric 
              or a Math symbol; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsAlphabet(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a alphabet letter.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a alphabet letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsAlphabet(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a alphabet letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a alphabet 
              letter; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsAlphaOrDigit(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a alphabet letter or digit.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a alphabet letter or digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsAlphaOrDigit(System.String,System.Int32)">
            <summary>
              Indicates wether the character at the specified position 
              in the specified string is a alphabet letter or digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The character position in s.</param>
            <returns>
              true if the character at position index in s is a alphabet 
              letter or digit; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsUpperKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a upper (capital) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana upper (capital) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsLowerKana(System.Char)">
            <summary>
              Indicates whether the specified Unicode character is 
              categorized as a lower (normal) case kana.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c is a kana lower (normal) case; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.HasLowerKana(System.Char)">
            <summary>
              Determines whether the related kana has a related lower case.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              true if c has a related lower case kana; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToFullWidth(System.Char)">
            <summary>
              Transforms the specified character to a full width character
              if possible. Ranges are Latin basic, Katakana and Hangul 
              characters.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              Full width character of c, otherwise original character
              returned.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToFullWidth(System.Boolean@,System.Char[])">
            <summary>
              Tansforms the specified character to a full width character
              if possible. This method differs from the other where it 
              takes on an array of characters. In FarEast country there 
              are times when multiple half width characters make a one
              full width character.
            </summary>
            <param name="c">An array of characters.</param>
            <param name="processedAll">
              When the soundex character is processed a <b>true</b> is 
              returned; otherwise, a <b>false</b> returned.
            </param>
            <returns>
              Full width character of c, otherwise the original character
              is returned.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToHalfWidth(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's half
              width equivalent. Ranges are Latin basic, Katakana and 
              Hangul characters.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The half width equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a half
                 width or not a multi-width character.
              </para>
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToHalfWidthEx(System.Char)">
            <summary>
              Transforms the specified character to a half width character
              if possible. This method differs from the ToHalfWidth method
              where it tries to return the accurate half width character - 
              which most likely happens in FarEast countries.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A character array representing c in half width form. In most
              cases this array will have only one element.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToKatakana(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Katakana" equivalent. Special character handling 
              for the Japanese language.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToKatakana(System.Char,System.Boolean)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Katakana" equivalent with an optional setting of
              full or half width. Special character handling for
              the Japanese language 
            </summary>
            <param name="c">
              A Unicode character.
            </param>
            <param name="fullWidth">
              <b>true</b> to return a full width Katakana, and 
              <b>false</b> to return a half width Katakana.
            </param>
            <returns></returns>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToHiragana(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's 
              "Hiragana" equivalent. Special character handling 
              for the Japanese language.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              <para>The Hiragana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Hiragana or not Katakana.
              </para>
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToAnsi(System.Char)">
            <summary>
              Converts the value of a Unicode character to it's
              ANSI equivalent.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              An Ansi character equivalent of c in the current culture.
            </returns>
            <remarks>
              Encodes the specified Unicode character to an ANSI
              character using the current culture.
            </remarks>
        </member>
        <member name="M:C1.Framework.CharHelper.ToAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
              Converts the value of a Unicode character to it's
              ANSI equivalent using the specified culture information.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="culture">
              A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Ansi character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToSJIS(System.Char)">
            <summary>
              Converts the value of a JIS (Japanese encoding) character
              to it's Shift-JIS equivalent.
            </summary>
            <param name="c">A JIS character.</param>
            <returns>
              <para>The Shift-JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a JIS character to it's equivalent Shift-JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as it's parameter - use the character value
                returned by the "ToJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Framework.CharHelper.ToJIS(System.Char)">
            <summary>
              Converts the value of a Shift-JIS (Japanese encoding) 
              character to it's JIS equivalent.
            </summary>
            <param name="c">A Shift-JIS character.</param>
            <returns>
              <para>The JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a Shift-JIS character to it's equivalent JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as it's parameter - use the character value
                returned by the "ToSJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Framework.CharHelper.FromAnsi(System.Char)">
            <summary>
              Converts the value of an ANSI character to it's Unicode
              equivalent.
            </summary>
            <param name="c">An ANSI character.</param>
            <returns>
              A Unicode character equivalent of c.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.FromAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
              Converts the value of a ANSI character to it's Unicode
              equivalent using the specified culture information.
            </summary>
            <param name="c">An ANSI character.</param>
            <param name="culture">
              A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Unicode character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToUpperKana(System.Char)">
            <summary>
              Converts an lower (normal) case kana into a upper (capital) case.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>The equivalent kana upper case character.</returns>
        </member>
        <member name="M:C1.Framework.CharHelper.ToLowerKana(System.Char)">
            <summary>
              Converts an upper (capital) case kana into a lower case (normal).
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>The equivalent kana lower case character.</returns>
        </member>
        <member name="M:C1.Framework.CharHelper.BelongTo(System.Char)">
            <summary>
              retrieves the Unicode character block the specified character
              belongs to. Current version supports a range from '\u000' 
              through '\uffff'.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              A Unicode block the specified character belongs to.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.MultiWidthDetails(System.Char)">
            <summary>
              Returns further detail information of the character, since
              it lies in a range where it holds a fixture of different 
              character widths.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns>
              An CharType describing the type of the character, and also
              the width whether it's full or half.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.IsFarEastBlock(C1.Framework.CharHelper.Blocks,System.Char)">
            <summary>
              Determines whether the specified block has to do with 
              CJK... ( only CJK have concepts of wide )
            </summary>
            <param name="block">A unicode char block.</param>
            <param name="c">
              A <see cref="T:System.Char"/> to process.
            </param>
            <returns>
              true if the block is related to CJK; otherwise false.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.innerToChar(System.Byte[])">
            <summary>
              Converts a byte array into a char type. (Internal usage)
            </summary>
            <param name="value">A byte array.</param>
            <returns>
              A character equivalent of value.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.innerToByte(System.Char)">
            <summary>
              Converts a single character into a byte array. (Internal usage)
            </summary>
            <param name="c">A character.</param>
            <returns>
              A byte array equivalent of c.
            </returns>
        </member>
        <member name="M:C1.Framework.CharHelper.GetFullHalfWidthSpecialChar(System.Char,System.Boolean)">
            <summary>
              Conversion between half and full width characters for Japanese
              special characters.
            </summary>
            <param name="c">A character.</param>
            <param name="toFull">
              <b>true</b> to convert to full width; otherwise, <b>false</b>.
            </param>
            <returns>
              The converted character. <see cref="F:System.Char.MinValue"/> means conversion
              didn't take place.
            </returns>
        </member>
        <member name="T:C1.Framework.EnumHelper">
            <summary>
              Represents the helper class for Validating whether an object is valid or not
            </summary>
        </member>
        <member name="M:C1.Framework.EnumHelper.GetBitCount(System.UInt32)">
            <summary>
              Count the total bit of value tested
            </summary>
            <param name="value">
              An <b>unit</b> indicate the test value
            </param>
            <returns>
              An <b>int</b> indicate the valid bit count (total number of 1 as sample) of value
            </returns>
            <remarks>
              Get the bit count from special bit value.
              For example, here is a bit value 0x5f, it bit count is 6. (0x5f = 10101111)
            </remarks>
        </member>
        <member name="M:C1.Framework.EnumHelper.IsValid(System.Int32,System.Int32,System.Int32)">
            <summary>
              Check current value is a valid Enum type
            </summary>
            <param name="enumValue">
              An <b>int</b> indivate the value you want to check
            </param>
            <param name="minValueOfEnum">
              An <b>int</b> indicate the minimum value of your enum type
            </param>
            <param name="maxValueOfEnum">
              An <b>int</b> indicate the maximum value of your enum type
            </param>
            <returns>
              A <b>bool</b> indicate the check result, if current value is a valid enum type, return <b>true</b>;
              otherwise <b>false</b>
            </returns>
            <remarks>
              This method is applicable to check a <b>Sequential</b> defined not-flag-style enum type
            </remarks>
        </member>
        <member name="M:C1.Framework.EnumHelper.IsValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Check current value is a valid Enum type
            </summary>
            <param name="enumValue">
              An <b>int</b> indivate the value you want to check
            </param>
            <param name="minValueOfEnum">
              An <b>int</b> indicate the minimum value of your enum type
            </param>
            <param name="maxValueOfEnum">
              An <b>int</b> indicate the maximum value of your enum type
            </param>
            <param name="maxNumberOfBitsOn">
              An <b>int</b> indicate the max count of bit for test enum value
            </param>
            <returns>
              A <b>bool</b> indicate the check result, if current value is a valid enum type, return <b>true</b>;
              otherwise <b>false</b>
            </returns>
            <remarks>
              This method is applicable to check a <b>Sequential</b> defined flag-style enum type
            <example>
              There is a enum value you want to test is <b>0x5f</b>, in this enum type, the min value is <b>0x0f</b>,
              and max value is <b>0x100</b>, then this method called below can test its validation:
            <code>
                EnumHelper.IsValid(0x5f, 0x0f, 0x100, 8);
            </code>
              In this scenario, the four parameter is <b>8</b>, because the max value is <b>0x100</b>(Binary as 100000000),
              the max bits on value is <b>0xff</b> (Binary as 11111111), it's the max number of bits on
            </example>
            </remarks>
        </member>
        <member name="T:C1.Framework.Mathematics.Fraction">
            <summary>
              Represents nn expression that indicates the quotient of two quantities.
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Fraction._numerator">
            <summary>
              The number written above the line in a common fraction to indicate 
              the number of parts of the whole.
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Fraction._denominator">
            <summary>
              The number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Fraction"/> structure with the specified numerator and denominator.
            </summary>
            <param name="numerator">
              A <b>double</b> that indicates the number written above the line in a common fraction to indicate
              the number of parts of the whole.
            </param>
            <param name="denominator">
              A <b>double</b> that indicats the number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Fraction.Numerator">
            <summary>
              Gets or sets the numertor of the fraction.
            </summary>
            <value>
              A <b>double</b> that indicates the number written above the line in a common fraction to indicate
              the number of parts of the whole.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Fraction.Denominator">
            <summary>
              Gets or sets the denominator of the fraction.
            </summary>
            <value>
              A <b>double</b> that indicats the number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_UnaryNegation(C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the unary "-" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Addition(C1.Framework.Mathematics.Fraction,C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the binary "+" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Subtraction(C1.Framework.Mathematics.Fraction,C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the binary "-" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Multiply(C1.Framework.Mathematics.Fraction,C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Multiply(System.Double,C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Multiply(C1.Framework.Mathematics.Fraction,System.Double)">
            <summary>
              Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Division(C1.Framework.Mathematics.Fraction,C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Division(System.Double,C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Division(C1.Framework.Mathematics.Fraction,System.Double)">
            <summary>
              Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_LogicalNot(C1.Framework.Mathematics.Fraction)">
            <summary>
              Defines the "!" operator. Note: "!" is used as simplify in here.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Implicit(C1.Framework.Mathematics.Fraction)~System.Double">
            <summary>
              Converts the fraction to double.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.op_Implicit(System.Double)~C1.Framework.Mathematics.Fraction">
            <summary>
              Converts the double to fraction.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.Reverse(C1.Framework.Mathematics.Fraction)">
            <summary>
              Reverse the fraction.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction.Simplify">
            <summary>
              Simplify the fraction.
            </summary>
        </member>
        <member name="T:C1.Framework.Mathematics.Fraction`1">
            <summary>
              Represents nn expression that indicates the quotient of two quantities.
            </summary>
            <typeparam name="T">
              Indicate the type of numerator and denominator.
            </typeparam>
        </member>
        <member name="F:C1.Framework.Mathematics.Fraction`1._numerator">
            <summary>
              The number written above the line in a common fraction to indicate 
              the number of parts of the whole.
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Fraction`1._denominator">
            <summary>
              The number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.#ctor(`0,`0)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Fraction`1"/> structure with the specified numerator and denominator.
            </summary>
            <param name="numerator">
              A <typeparamref name="T"/> that indicates the number written above the line in a common fraction to indicate
              the number of parts of the whole.
            </param>
            <param name="denominator">
              A <typeparamref name="T"/> that indicats the number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.#ctor(`0)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Fraction`1"/> structure with the specified numerator and denominator.
            </summary>
            <param name="numerator">
              A <typeparamref name="T"/> that indicates the number written above the line in a common fraction to indicate
              the number of parts of the whole.
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Fraction`1.Numerator">
            <summary>
              Gets or sets the numertor of the fraction.
            </summary>
            <value>
              A <typeparamref name="T"/> that indicates the number written above the line in a common fraction to indicate
              the number of parts of the whole.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Fraction`1.Denominator">
            <summary>
              Gets or sets the denominator of the fraction.
            </summary>
            <value>
              A <typeparamref name="T"/> that indicats the number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_UnaryNegation(C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the unary "-" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Addition(C1.Framework.Mathematics.Fraction{`0},C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the binary "+" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Subtraction(C1.Framework.Mathematics.Fraction{`0},C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the binary "-" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Multiply(C1.Framework.Mathematics.Fraction{`0},C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Multiply(`0,C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Multiply(C1.Framework.Mathematics.Fraction{`0},`0)">
            <summary>
              Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Division(C1.Framework.Mathematics.Fraction{`0},C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Division(`0,C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Division(C1.Framework.Mathematics.Fraction{`0},`0)">
            <summary>
              Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_LogicalNot(C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Defines the "!" operator. Note: "!" is used as simplify in here.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Implicit(C1.Framework.Mathematics.Fraction{`0})~System.Double">
            <summary>
              Converts the fraction to double.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Implicit(C1.Framework.Mathematics.Fraction{`0})~System.Single">
            <summary>
              Converts the fraction to float.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Explicit(System.Double)~C1.Framework.Mathematics.Fraction{`0}">
            <summary>
              Converts the double to fraction.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.op_Explicit(System.Single)~C1.Framework.Mathematics.Fraction{`0}">
            <summary>
              Converts the float to fraction.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.Reverse(C1.Framework.Mathematics.Fraction{`0})">
            <summary>
              Reverse the fraction.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Fraction`1.Simplify">
            <summary>
              Simplify the fraction.
            </summary>
        </member>
        <member name="T:C1.Framework.Mathematics.Math">
            <summary>
              Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
            <remarks>
              This class is used to reinforce the function of <see cref="T:System.Math"/>
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.CalculateGreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>
              Calculate the Greatest Common Divisor of <c>oneNumber</c> and <c>anotherNumber</c>.
            </summary>
            <param name="oneNumber">
              An <b>int</b> indicate the one number.
            </param>
            <param name="anotherNumber">
              An <b>int</b> indicate another number.
            </param>
            <returns>
              An <b>int</b> indicate the Greatest Common Divisor.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.CalculateLeaseCommonMultiple(System.Int32,System.Int32)">
            <summary>
              Calculate the Lease Common Multiple of <c>oneNumber</c> and <c>anotherNumber</c>.
            </summary>
            <param name="oneNumber">
              An <b>int</b> indicate the one number
            </param>
            <param name="anotherNumber">
              An <b>int</b> indicate another number
            </param>
            <returns>
              An <b>int</b> indicate the Lease Common Multiple.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.PercentageRelativeToAbsolute(System.Double)">
            <summary>
              Convertes the relative percentage to absolute percentage.
            </summary>
            <param name="value">
              An double value (>= -1.0) that indicates the relative percentage.
            </param>
            <returns>
              A double value that represents the absolute percentage.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.PercentageAbsoluteToRelative(System.Double)">
            <summary>
              Convertes the relative percentage to absolute percentage.
            </summary>
            <param name="value">
              An double value (>= 0.0) that indicates the absolute percentage.
            </param>
            <returns>
              A double value that represents the relative percentage.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.Round(System.Decimal,System.Int32)">
            <summary>
              Returns the number nearest the specified value.
            </summary>
            <param name="value">
              A <b>decimal</b> number to be rounded.
            </param>
            <param name="digits">
              The number of significant fractional digits (precision) in the return value.
            </param>
            <returns>
              The number nearest value with precision equal to decimals.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.Round(System.Single)">
            <summary>
              To make a round mathematic operation for float type number
            </summary>
            <param name="paraNum">
              A <b>float</b> number to be rounded.
            </param>
            <returns>
              The number nearest value with precision equal to float.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Math.Round(System.Double)">
            <summary>
              To make a round mathematic operation for double type number.
            </summary>
            <param name="paraNum">
              A <b>double</b> number to be rounded.
            </param>
            <returns>
              The number nearest value with precision equal to double.
            </returns>
        </member>
        <member name="T:C1.Framework.Mathematics.Matrix">
            <summary>
              Define a class that represents the matrix in mathematics. 
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Matrix._data">
            <summary>
              A two dimension <b>double</b> array used to save the data.
            </summary>
            <remarks>
              In order to improve speed of inherited classes, I give the proteced modification
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
            <param name="width">
              A <b>int</b> indicates the number of row.
            </param>
            <param name="height">
              A <b>int</b> indicates the number of column.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
            <summary>
              A two dimension <b>double</b> array used to save the elements.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.#ctor(System.Boolean,C1.Framework.Mathematics.Vector[])">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
            <param name="vertical">
              A <b>bool</b> indicates whether the direction of vectors is vertical.
            </param>
            <param name="vectors">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the vectors.
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Item(System.Int32,System.Int32)">
            <summary>
              Gets or sets the value of element at special location. 
            </summary>
            <value>
              A <b>double</b> indicates the element value.
            </value>
            <remarks>
              Note: The row and column are base on zero.
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Elements">
            <summary>
              Gets the elements of the matrix.
            </summary>
            <value>
              A two dimension <b>double</b> array save the elements.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Width">
            <summary>
              Get the column number of the matrix.
            </summary>
            <value>
              A <b>int</b> value indicates the width of the matrix.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Height">
            <summary>
              Get the row number of the matrix.
            </summary>
            <value>
              A <b>int</b> value indicates the height of the matrix.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.IsIdentity">
            <summary>
              Gets a value indicating whether this Matrix object is the identity matrix.
            </summary>
            <value>
              This property is true if this Matrix is identity; otherwise, false.
            </value>
            <remarks>
              | 1, 0, 0 |
              | 0, 1, 0 |
              | 0, 0, 1 |
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Columns">
            <summary>
              Get the vectors from the column direction.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the columns of the matrix.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Rows">
            <summary>
              Get the vectors from the row direction..
            </summary>
            <value>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the rows of the matrix.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.CheckOperationParameters(System.Boolean,System.String,C1.Framework.Mathematics.Matrix[])">
            <summary>
              Check the operation parameters, if the parameters is invalid, throw an exception.
            </summary>
            <param name="checkMode">
              A <b>bool</b> value indicates the check mode. <b>true</b> for the multiply operation.
            </param>
            <param name="operationDescription">
              A <b>string</b> indicates the operation description.
            </param>
            <param name="parameters">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the operation parameters.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_Addition(C1.Framework.Mathematics.Matrix,C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the + operator for Matrix class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the add operation result of two operands.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_Subtraction(C1.Framework.Mathematics.Matrix,C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the binary - operator for Matrix class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the binary nimus operation result of two operands.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_UnaryNegation(C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the binary - operator for Matrix class.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the unary nimus operation result of operand.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_Multiply(C1.Framework.Mathematics.Matrix,C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the * operator for Matrix class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the multiplication operation result of two operands.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.Transpose(C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the transpose operator for Matrix class.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the transpose operation result of operand.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_Explicit(C1.Framework.Mathematics.Matrix)~System.Double">
            <summary>
              Use the explicit convertion to get a value of matrix.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the matrix will calculate value of it. 
            </param>
            <returns>
              A <b>double</b> indicates the value of the speical matrix.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_Equality(C1.Framework.Mathematics.Matrix,C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.op_Inequality(C1.Framework.Mathematics.Matrix,C1.Framework.Mathematics.Matrix)">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left does not equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.Add(C1.Framework.Mathematics.Matrix)">
            <summary>
              Adds a speical <see cref="T:C1.Framework.Mathematics.Matrix"/> to this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the speical matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.LeftMultiply(C1.Framework.Mathematics.Matrix)">
            <summary>
              Left multiply a speical <see cref="T:C1.Framework.Mathematics.Matrix"/> to this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the speical matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.RightMultiply(C1.Framework.Mathematics.Matrix)">
            <summary>
              Right multiply a speical <see cref="T:C1.Framework.Mathematics.Matrix"/> to this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the speical matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.Transpose">
            <summary>
              Convertes this <see cref="T:C1.Framework.Mathematics.Matrix"/> to it's transpose matrix.
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix.Value">
            <summary>
              Gets the value of the current matrix.
            </summary>
            <value>
              A <b>double</b> indicates the value of the this matrix.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.Clone">
            <summary>
              Create a new object that is a copy of this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <returns>
              A <b>object</b> is a copy of this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.Equals(System.Object)">
            <summary>
              Determines whether the specified System.Object is equal to the current
              System.Object.
            </summary>
            <param name="obj">
              The System.Object to compare with the current System.Object. 
            </param>
            <returns>
              true if the specified System.Object is equal to the current System.Object;
              otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. System.Object.GetHashCode
              is suitable for use in hashing algorithms and data structures like a hash
              table.
            </summary>
            <returns>
              A hash code for the current System.Object.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix.ToString">
            <summary>
              Returns a string that represents the current matrix.
            </summary>
            <returns>
              A string that represents the current matrix.
            </returns>
        </member>
        <member name="T:C1.Framework.Mathematics.Matrix`1">
            <summary>
              Define a class that represents the matrix in mathematics. 
            </summary>
        </member>
        <member name="T:C1.Framework.Mathematics.Matrix`1.SupportedT">
            <summary>
              All supported type of T.
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Matrix`1.SupportedT.Double">
            <summary>
             C#: double
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Matrix`1.SupportedT.Single">
            <summary>
             C#: float
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Matrix`1._data">
            <summary>
              A two dimension <b>T</b> array used to save the data.
            </summary>
            <remarks>
              In order to improve speed of inherited classes, I give the proteced modification
            </remarks>
        </member>
        <member name="F:C1.Framework.Mathematics.Matrix`1._T">
            <summary>
              Saves the type of <b>T</b>.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
            <param name="width">
              A <b>int</b> indicates the number of row.
            </param>
            <param name="height">
              A <b>int</b> indicates the number of column.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.#ctor(`0[0:,0:])">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
            <summary>
              A two dimension <b>double</b> array used to save the elements.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.#ctor(System.Boolean,C1.Framework.Mathematics.Vector{`0}[])">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Mathematics.Matrix"/> class.
            </summary>
            <param name="vertical">
              A <b>bool</b> indicates whether the direction of vectors is vertical.
            </param>
            <param name="vectors">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the vectors.
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>
              Gets or sets the value of element at special location. 
            </summary>
            <value>
              A <b>T</b> indicates the element value.
            </value>
            <remarks>
              Note: The row and column are base on zero.
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Elements">
            <summary>
              Gets the elements of the matrix.
            </summary>
            <value>
              A two dimension <b>T</b> array save the elements.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Width">
            <summary>
              Get the column number of the matrix.
            </summary>
            <value>
              A <b>int</b> value indicates the width of the matrix.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Height">
            <summary>
              Get the row number of the matrix.
            </summary>
            <value>
              A <b>int</b> value indicates the height of the matrix.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.IsIdentity">
            <summary>
              Gets a value indicating whether this Matrix object is the identity matrix.
            </summary>
            <value>
              This property is true if this Matrix is identity; otherwise, false.
            </value>
            <remarks>
              | 1, 0, 0 |
              | 0, 1, 0 |
              | 0, 0, 1 |
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Columns">
            <summary>
              Get the vectors from the column direction.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the columns of the matrix.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Rows">
            <summary>
              Get the vectors from the row direction..
            </summary>
            <value>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the rows of the matrix.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.CheckOperationParameters(System.Boolean,System.String,C1.Framework.Mathematics.Matrix{`0}[])">
            <summary>
              Check the operation parameters, if the parameters is invalid, throw an exception.
            </summary>
            <param name="checkMode">
              A <b>bool</b> value indicates the check mode. <b>true</b> for the multiply operation.
            </param>
            <param name="operationDescription">
              A <b>string</b> indicates the operation description.
            </param>
            <param name="parameters">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the operation parameters.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_Addition(C1.Framework.Mathematics.Matrix{`0},C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the + operator for Matrix class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the add operation result of two operands.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_Subtraction(C1.Framework.Mathematics.Matrix{`0},C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the binary - operator for Matrix class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the binary nimus operation result of two operands.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_UnaryNegation(C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the binary - operator for Matrix class.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the unary nimus operation result of operand.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_Multiply(C1.Framework.Mathematics.Matrix{`0},C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the * operator for Matrix class.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand.
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the multiplication operation result of two operands.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.Transpose(C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the transpose operator for Matrix class.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the transpose operation result of operand.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_Explicit(C1.Framework.Mathematics.Matrix{`0})~`0">
            <summary>
              Use the explicit convertion to get a value of matrix.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the matrix will calculate value of it. 
            </param>
            <returns>
              A <b>double</b> indicates the value of the speical matrix.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_Equality(C1.Framework.Mathematics.Matrix{`0},C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.op_Inequality(C1.Framework.Mathematics.Matrix{`0},C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left does not equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.Add(C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Adds a speical <see cref="T:C1.Framework.Mathematics.Matrix"/> to this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the speical matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.LeftMultiply(C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Left multiply a speical <see cref="T:C1.Framework.Mathematics.Matrix"/> to this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the speical matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.RightMultiply(C1.Framework.Mathematics.Matrix{`0})">
            <summary>
              Right multiply a speical <see cref="T:C1.Framework.Mathematics.Matrix"/> to this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Matrix"/> indicates the speical matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.Transpose">
            <summary>
              Convertes this <see cref="T:C1.Framework.Mathematics.Matrix"/> to it's transpose matrix.
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.Matrix`1.Value">
            <summary>
              Gets the value of the current matrix.
            </summary>
            <value>
              A <b>T</b> indicates the value of the this matrix.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.Clone">
            <summary>
              Create a new object that is a copy of this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </summary>
            <returns>
              A <b>object</b> is a copy of this <see cref="T:C1.Framework.Mathematics.Matrix"/>.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.Equals(System.Object)">
            <summary>
              Determines whether the specified System.Object is equal to the current
              System.Object.
            </summary>
            <param name="obj">
              The System.Object to compare with the current System.Object. 
            </param>
            <returns>
              true if the specified System.Object is equal to the current System.Object;
              otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. System.Object.GetHashCode
              is suitable for use in hashing algorithms and data structures like a hash
              table.
            </summary>
            <returns>
              A hash code for the current System.Object.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Matrix`1.ToString">
            <summary>
              Returns a string that represents the current matrix.
            </summary>
            <returns>
              A string that represents the current matrix.
            </returns>
        </member>
        <member name="T:C1.Framework.Mathematics.MeasureConversionTable">
            <summary>
              A table used to convert value between the different measure units.
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.InchPerMillimeter">
            <summary>
              Gets the inch per millimeter. [1 millimeter = 6/127 inch]
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.InchPerDocument">
            <summary>
              Gets the inch per document. [1 document = 1/300 inch]
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.InchPerDisplay">
            <summary>
              Gets the inch per display. [1 document = 1/75 inch]
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.InchPerPoint">
            <summary>
              Gets the inch per point. [1 point = 1/72 inch]
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.InchPerTwips">
            <summary>
              Gets the inch per twips. [1 document = 1/1440 inch]
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.MillimeterPerInch">
            <summary>
              Gets the millimeter per inch.
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.DocumentPerInch">
            <summary>
              Gets the document per inch.
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.DisplayPerInch">
            <summary>
              Gets the display per inch.
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.PointPerInch">
            <summary>
              Gets the point per inch
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.MeasureConversionTable.TwipsPerInch">
            <summary>
              Gets the twips per inch.
            </summary>
        </member>
        <member name="T:C1.Framework.Mathematics.Vector">
            <summary>
              Define a Vector class that represents the mathematic vector. 
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Vector._data">
            <summary>
              Saves the data of this vector.
            </summary>
            <remarks>
              In order to improve speed of inherited classes, I give the proteced modification
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Mathematics.Vector"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Mathematics.Vector"/> class.
            </summary>
            <param name="dimension">
              A <b>int</b> indicates the dimension of the vector.
            </param>
            <remarks>
              The dimension of the vector must be bigger than or equal zero.
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.#ctor(System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Mathematics.Vector"/> class.
            </summary>
            <param name="items">
              A <b>double</b> array indicates the items.
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector.Dimension">
            <summary>
              Gets or sets the dimension of the vector.
            </summary>
            <value>
              A <b>int</b> indicates the dimension of the vector.
            </value>
            <remarks>
              As soon as a Vector instance is created, it's dimension is fixed.
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector.Item(System.Int32)">
            <summary>
              Gets or sets the value of element at special index. 
            </summary>
            <value>
              A <b>double</b> indicates the element value.
            </value>
            <remarks>
              Note: The index is base on zero.
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector.Elements">
            <summary>
              Gets the all elements in the vector. 
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector.IsZero">
            <summary>
              Gets a value indicating whether this Vector object is zero vector.
            </summary>
            <value>
              If this Vector object is zero vector, return <b>true</b>, otherwise, return <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector.IsIdentity">
            <summary>
              Gets a value indicating whether this Vector object is indentity vector.
            </summary>
            <value>
              If this Vector object is indentity vector, return <b>true</b>, otherwise, return <b>false</b>.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.CheckOperationParameters(System.String,C1.Framework.Mathematics.Vector[])">
            <summary>
              Check the operation parameters, if the parameters is invalid, throw an exception.
            </summary>
            <param name="operationDescription">
              A <b>string</b> indicates the operation description.
            </param>
            <param name="parameters">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the operation parameters.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.op_Addition(C1.Framework.Mathematics.Vector,C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the + operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the add result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) + (m1, m2, m3) = (n1 + m1, n2 + m2, n3 + m3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.op_Subtraction(C1.Framework.Mathematics.Vector,C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the binary - operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the binary minus result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) - (m1, m2, m3) = (n1 - m1, n2 - m2, n3 - m3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.op_UnaryNegation(C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the unary - operator for vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the operand. 
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the unary minus result of the operands.
            </returns>
            <remarks>
              -(n1, n2, n3) = (-n1, -n2, -n3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.op_Multiply(C1.Framework.Mathematics.Vector,C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the * operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the multiplying result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) * (m1, m2, m3) = (n1 * m1, n2 * m2, n3 * m3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.op_Equality(C1.Framework.Mathematics.Vector,C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.op_Inequality(C1.Framework.Mathematics.Vector,C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left dose not equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.CrossMultiply(C1.Framework.Mathematics.Vector,C1.Framework.Mathematics.Vector)">
            <summary>
              Defines the descarts multiplication operation for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the descarts multiplying result of the left and right operands.
            </returns>
            <remarks>
                                            | i,  j,  k |
              (n1, n2, n3) X (m1, m2, m3) = | n1, n2, n3| = (?, ?, ?)
                                            | m1, m2, m3|
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.CalculateModul(C1.Framework.Mathematics.Vector)">
            <summary>
              Get the modul of the special vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the vector.
            </param>
            <returns>
              A <b>double</b> indicates the modul of the speical vector.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.Add(C1.Framework.Mathematics.Vector)">
            <summary>
              Add a special vector to this vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the speical vector.. 
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.DotMultiply(C1.Framework.Mathematics.Vector)">
            <summary>
              Dot multiply a speical vector to this vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the speical vector.. 
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.CrossMultiply(C1.Framework.Mathematics.Vector)">
            <summary>
              Cross multiply a speical vector to this vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the speical vector.. 
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector.Modul">
            <summary>
              Get the modul of the this vector.
            </summary>
            <value>
              A <b>double</b> indicates the modul of the speical vector.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.Clone">
            <summary>
              Create a new object that is a copy of this <see cref="T:C1.Framework.Mathematics.Vector"/>.
            </summary>
            <returns>
              A <b>object</b> is a copy of this <see cref="T:C1.Framework.Mathematics.Vector"/>.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.Equals(System.Object)">
            <summary>
              Determines whether the specified System.Object is equal to the current
              System.Object.
            </summary>
            <param name="obj">
              The System.Object to compare with the current System.Object. 
            </param>
            <returns>
              true if the specified System.Object is equal to the current System.Object;
              otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. System.Object.GetHashCode
              is suitable for use in hashing algorithms and data structures like a hash
              table.
            </summary>
            <returns>
              A hash code for the current System.Object.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector.ToString">
            <summary>
              Returns a string that represents the current vector.
            </summary>
            <returns>
              A string that represents the current vector.
            </returns>
        </member>
        <member name="T:C1.Framework.Mathematics.Vector`1">
            <summary>
              Define a Vector class that represents the mathematic vector. 
            </summary>
        </member>
        <member name="T:C1.Framework.Mathematics.Vector`1.SupportedT">
            <summary>
              All supported type of T.
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Vector`1.SupportedT.Double">
            <summary>
             C#: double
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Vector`1.SupportedT.Single">
            <summary>
             C#: float
            </summary>
        </member>
        <member name="F:C1.Framework.Mathematics.Vector`1._data">
            <summary>
              Saves the data of this vector.
            </summary>
            <remarks>
              In order to improve speed of inherited classes, I give the proteced modification
            </remarks>
        </member>
        <member name="F:C1.Framework.Mathematics.Vector`1._T">
            <summary>
              Saves the type of <b>T</b>.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Mathematics.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Mathematics.Vector`1"/> class.
            </summary>
            <param name="dimension">
              A <b>int</b> indicates the dimension of the vector.
            </param>
            <remarks>
              The dimension of the vector must be bigger than or equal zero.
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Mathematics.Vector`1"/> class.
            </summary>
            <param name="items">
              A <typeparamref name="T"/> array indicates the items.
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector`1.Dimension">
            <summary>
              Gets or sets the dimension of the vector.
            </summary>
            <value>
              A <b>int</b> indicates the dimension of the vector.
            </value>
            <remarks>
              As soon as a Vector instance is created, it's dimension is fixed.
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector`1.Item(System.Int32)">
            <summary>
              Gets or sets the value of element at special index. 
            </summary>
            <value>
              A <typeparamref name="T"/> indicates the element value.
            </value>
            <remarks>
              Note: The index is base on zero.
            </remarks>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector`1.Elements">
            <summary>
              Gets the all elements in the vector. 
            </summary>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector`1.IsZero">
            <summary>
              Gets a value indicating whether this Vector object is zero vector.
            </summary>
            <value>
              If this Vector object is zero vector, return <b>true</b>, otherwise, return <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector`1.IsIdentity">
            <summary>
              Gets a value indicating whether this Vector object is indentity vector.
            </summary>
            <value>
              If this Vector object is indentity vector, return <b>true</b>, otherwise, return <b>false</b>.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.CheckOperationParameters(System.String,C1.Framework.Mathematics.Vector{`0}[])">
            <summary>
              Check the operation parameters, if the parameters is invalid, throw an exception.
            </summary>
            <param name="operationDescription">
              A <b>string</b> indicates the operation description.
            </param>
            <param name="parameters">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> array indicates the operation parameters.
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.op_Addition(C1.Framework.Mathematics.Vector{`0},C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the + operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the add result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) + (m1, m2, m3) = (n1 + m1, n2 + m2, n3 + m3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.op_Subtraction(C1.Framework.Mathematics.Vector{`0},C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the binary - operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the binary minus result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) - (m1, m2, m3) = (n1 - m1, n2 - m2, n3 - m3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.op_UnaryNegation(C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the unary - operator for vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the operand. 
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the unary minus result of the operands.
            </returns>
            <remarks>
              -(n1, n2, n3) = (-n1, -n2, -n3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.op_Multiply(C1.Framework.Mathematics.Vector{`0},C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the * operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the multiplying result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) * (m1, m2, m3) = (n1 * m1, n2 * m2, n3 * m3)
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.op_Equality(C1.Framework.Mathematics.Vector{`0},C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.op_Inequality(C1.Framework.Mathematics.Vector{`0},C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the == operator for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <b>bool</b> indicates whether left dose not equals right.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.CrossMultiply(C1.Framework.Mathematics.Vector{`0},C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Defines the descarts multiplication operation for vector.
            </summary>
            <param name="left">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the left operand. 
            </param>
            <param name="right">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the right operand.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Mathematics.Vector"/> that is the descarts multiplying result of the left and right operands.
            </returns>
            <remarks>
                                            | i,  j,  k |
              (n1, n2, n3) X (m1, m2, m3) = | n1, n2, n3| = (?, ?, ?)
                                            | m1, m2, m3|
            </remarks>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.CalculateModul(C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Get the modul of the special vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the vector.
            </param>
            <returns>
              A <b>double</b> indicates the modul of the speical vector.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.Add(C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Add a special vector to this vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the speical vector.. 
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.DotMultiply(C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Dot multiply a speical vector to this vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the speical vector.. 
            </param>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.CrossMultiply(C1.Framework.Mathematics.Vector{`0})">
            <summary>
              Cross multiply a speical vector to this vector.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Mathematics.Vector"/> indicates the speical vector.. 
            </param>
        </member>
        <member name="P:C1.Framework.Mathematics.Vector`1.Modul">
            <summary>
              Get the modul of the this vector.
            </summary>
            <value>
              A <b>double</b> indicates the modul of the speical vector.
            </value>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.Clone">
            <summary>
              Create a new object that is a copy of this <see cref="T:C1.Framework.Mathematics.Vector"/>.
            </summary>
            <returns>
              A <b>object</b> is a copy of this <see cref="T:C1.Framework.Mathematics.Vector"/>.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.Equals(System.Object)">
            <summary>
              Determines whether the specified System.Object is equal to the current
              System.Object.
            </summary>
            <param name="obj">
              The System.Object to compare with the current System.Object. 
            </param>
            <returns>
              true if the specified System.Object is equal to the current System.Object;
              otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. System.Object.GetHashCode
              is suitable for use in hashing algorithms and data structures like a hash
              table.
            </summary>
            <returns>
              A hash code for the current System.Object.
            </returns>
        </member>
        <member name="M:C1.Framework.Mathematics.Vector`1.ToString">
            <summary>
              Returns a string that represents the current vector.
            </summary>
            <returns>
              A string that represents the current vector.
            </returns>
        </member>
        <member name="T:C1.Framework.NumberTranslator">
            <summary>
              Translates number between different types.
            </summary>
        </member>
        <member name="M:C1.Framework.NumberTranslator.LowWord(System.UInt32)">
            <summary>
              Get the lower word from a unsigned integer value.
            </summary>
            <param name="value">
              An <b>uint</b> indicates the unsigned integer value.
            </param>
            <returns>
              Return the lower word as result.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.HighWord(System.UInt32)">
            <summary>
              Get the higher word from a unsigned integer value.
            </summary>
            <param name="value">
              An <b>unint</b> indicates the unsigned integer value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.LowWord(System.Int32)">
            <summary>
              Get the lower word from a integer value.
            </summary>
            <param name="value">
              An <b>int</b> indicates the integer value.
            </param>
            <returns>
              Returns the lower word as result.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.HighWord(System.Int32)">
            <summary>
              Get the higher word from a integer value.
            </summary>
            <param name="value">
              An <b>unint</b> indicates the integer value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.LowWord(System.IntPtr)">
            <summary>
              Get the higher word from a <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="intValue">
              An <b>unint</b> indicates the <see cref="T:System.IntPtr"/> value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.HighWord(System.IntPtr)">
            <summary>
              Get the higher word from a <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="intValue">
              An <b>unint</b> indicates the <see cref="T:System.IntPtr"/> value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.MakeDoubleWord(System.UInt16,System.UInt16)">
            <summary>
              Make a double word by low and high word.
            </summary>
            <param name="lowWord">
              An <b>ushort</b> indicates the low word of the long.
            </param>
            <param name="highWord">
              An <b>ushort</b> indicates the high word of the long.
            </param>
            <returns>
              An <b>uint</b> indicates the long.
            </returns>
        </member>
        <member name="M:C1.Framework.NumberTranslator.MakeDoubleWord(System.Int16,System.Int16)">
            <summary>
              Make a double word by low and high word.
            </summary>
            <param name="lowWord">
              A <b>short</b> indicates the low word of the long.
            </param>
            <param name="highWord">
              A <b>short</b> indicates the high word of the long.
            </param>
            <returns>
              An <b>int</b> indicates the long.
            </returns>
        </member>
        <member name="T:C1.Framework.SR`1">
            <summary>
              Represents the basic functionality used to get string information from assembly resource.
            </summary>
            <typeparam name="T">
              The type to provide the assembly information.
            </typeparam>
        </member>
        <member name="M:C1.Framework.SR`1.GetString(System.String)">
            <summary>
              Returns the value of the resource with the specified name in the assembly indicated by the template type.
            </summary>
            <param name="name">
              Name of the resource to get.
            </param>
            <returns>
              The value of a resource.
            </returns>
        </member>
        <member name="M:C1.Framework.SR`1.GetString(System.String,System.Object[])">
            <summary>
              Returns the value of the resource with the specified name in the assembly indicated by the template type 
              and returns the formated string that replaced the format specification in the String 
              with the textual equivalent of the value of a corresponding Object instance in a specified array.
            </summary>
            <param name="name">
              Name of the resource to get.
            </param>
            <param name="args">
              An Object array containing zero or more objects to be formatted. 
            </param>
            <returns>
              The formated value of a resource.
            </returns>
        </member>
        <member name="M:C1.Framework.SR`1.GetString(System.Globalization.CultureInfo,System.String)">
            <summary>
              Returns the value of the resource localized for the specified culture with the specified name in the assembly 
              indicated by the template type.
            </summary>
            <param name="culture">
              The CultureInfo object that represents the culture for which the resource is localized.
            </param>
            <param name="name">
              Name of the resource to get.
            </param>
            <returns>
              The value of a resource.
            </returns>
        </member>
        <member name="M:C1.Framework.SR`1.GetString(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
              Returns the value of the resource localized for the specified culture with the specified name in the assembly 
              indicated by the template type and returns the formated string that replaced the format specification in the 
              String with the textual equivalent of the value of a corresponding Object instance in a specified array.
            </summary>
            <param name="culture">
              The CultureInfo object that represents the culture for which the resource is localized.
            </param>
            <param name="name">
              Name of the resource to get.
            </param>
            <param name="args">
              An Object array containing zero or more objects to be formatted. 
            </param>
            <returns>
              The formated value of a resource.
            </returns>
        </member>
        <member name="M:C1.Framework.SR`1.GetImageByHighDpi(System.String)">
            <summary>
            If the dpi is larger than 150% and there is a bigger size image, this method will return the bigger image with scaled.
            </summary>
            <param name="resourceName">Resource name.</param>
            <returns>The bigger image with scaled in the resource.</returns>
        </member>
        <member name="M:C1.Framework.SR`1.GetImage(System.String)">
            <summary>
            Gets the image of the resource with the specified name in the assembly.
            </summary>
            <param name="resourceName">Resource name.</param>
            <returns>The image in the resource.</returns>
        </member>
        <member name="T:C1.Framework.SystemErrorException">
            <summary>
              Defines an exception class to handle the system error.
            </summary>
        </member>
        <member name="M:C1.Framework.SystemErrorException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.SystemErrorException"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.SystemErrorException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.SystemErrorException"/> class.
            </summary>
            <param name="message">
              The message that describes the error.
            </param>
        </member>
        <member name="M:C1.Framework.SystemErrorException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the System.SystemException class with a specified
              error message and a reference to the inner exception that is the cause of
              this exception.
            </summary>
            <param name="message">
              The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
              The exception that is the cause of the current exception. If the innerException
              parameter is not a null reference (Nothing in Visual Basic), the current
              exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="P:C1.Framework.SystemErrorException.ErrorCode">
            <summary>
              Gets the error code created by last error API.  
            </summary>
            <value>
              An <b>int</b> indicates the error code. 
            </value>
        </member>
        <member name="M:C1.Framework.SystemErrorException.GetErrorDescription(System.Int32)">
            <summary>
              Gets the description of the error.
            </summary>
            <param name="errorCode">
              An <b>int</b> indicates the code of the error.
            </param>
            <returns>
              A <b>string</b> indicates the description.
            </returns>
        </member>
        <member name="T:C1.Framework.Diagnostics.GdiTracer">
            <summary>
              This class is used to trace the gdi problems(such as: gdi leak).
            </summary>
        </member>
        <member name="M:C1.Framework.Diagnostics.GdiTracer.TraceConstructing(C1.Framework.Drawing.Gdi.GdiObject)">
            <summary>
              [Empty]
            </summary>
        </member>
        <member name="M:C1.Framework.Diagnostics.GdiTracer.TraceFinalizing(C1.Framework.Drawing.Gdi.GdiObject)">
            <summary>
              [Empty]
            </summary>
        </member>
        <member name="M:C1.Framework.Diagnostics.GdiTracer.EnableAutoCheck">
            <summary>
              [Empty]
            </summary>
        </member>
        <member name="M:C1.Framework.Diagnostics.GdiTracer.Check">
            <summary>
               [Empty]
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.BitsPerPixel">
            <summary>
              Represents the bits-per-pixel of the bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.SpecifiedByFormat">
            <summary>
              The number of bits-per-pixel is specified or is implied by the JPEG or PNG format. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.Bits1Monochrome">
            <summary>
              Each bit in the bitmap array represents a pixel. the items member of color table contains two entries.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.Bits4Colors16">
            <summary>
              The bitmap has a maximum of 16 colors, the items member of color table contains up to 16 entries.
              Each pixel in the bitmap is represented by a 4-bit index into the color table.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.Bits8Colors256">
            <summary>
              The bitmap has a maximum of 256 colors, and the items member of color table contains up to 256 entries. 
              Each byte in the array represents a single pixel.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.Bits16TrueColors">
            <summary>
              The bitmap has a maximum of 2^16 colors.
              In general, the color table is empty, each word in the bitmap array represents a single pixel
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.Bits24TrueColors">
            <summary>
              The bitmap has a maximum of 2^24 colors.
              In general, the color table is empty, each 3-byte triplet in the bitmap array represents the relative 
              intensities of blue, green, and red, respectively, for a pixel.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.BitsPerPixel.Bits32TrueColors">
            <summary>
              The bitmap has a maximum of 2^32 colors.
              In general, the color table is empty, each double-word in the bitmap array represents the relative intensities
              of blue, green, and red, respectively, for a pixel. 
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Bitmap">
            <summary>
              Represents the gid bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Bitmap._width">
            <summary>
              Saves the width of the bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Bitmap._height">
            <summary>
              Saves the height of the bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Bitmap._planes">
            <summary>
              Saves the planes of the bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Bitmap._bitsPerPixel">
            <summary>
              Saves the bits-per-pixel of the bitmap.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class 
              with the specified size.
            </summary>
            <param name="width">
              The width, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </param>
            <param name="height">
              The height, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(System.Int32,System.Int32,C1.Framework.Drawing.Gdi.BitsPerPixel)">
            <summary>
              Intializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class 
              with the specified size color format (color planes and bits-per-pixel). 
            </summary>
            <param name="width">
              The width, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </param>
            <param name="height">
              The height, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object. 
            </param>
            <param name="bitsPerPixel">
              The number of bits required to identify the color of a single pixel. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(System.Int32,System.Int32,System.Int32,C1.Framework.Drawing.Gdi.BitsPerPixel,System.Byte[])">
            <summary>
              Intializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class 
              with the specified size color format (color planes and bits-per-pixel). 
            </summary>
            <param name="width">
              The width, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </param>
            <param name="height">
              The height, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object. 
            </param>
            <param name="planes">
              Specifies the number of planes for the target device. This value must be set to 1.
            </param>
            <param name="bitsPerPixel">
              The number of bits required to identify the color of a single pixel. 
            </param>
            <param name="data">
              The pattern data array.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(C1.Framework.Drawing.Gdi.Graphics,System.Int32,System.Int32)">
            <summary>
              Intializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class 
              with the specified <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object and size.
            </summary>
            <param name="graphics">
              A <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </param>
            <param name="width">
              The width, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </param>
            <param name="height">
              The height, in pixels, of the new <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class.
            </summary>
            <param name="bitmapHandle">
              A <see cref="T:System.IntPtr"/> that indicates the handle of the bitmap.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class.
            </summary>
            <param name="gdiplusBitmap">
              A <see cref="T:System.Drawing.Bitmap"/> indicates the GDI+ bitmap.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.#ctor(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> class.
            </summary>
            <param name="gdiplusBitmap">
              A <see cref="T:System.Drawing.Bitmap"/> indicates the GDI+ bitmap.
            </param>
            <param name="backgroundColor">
              A <see cref="T:System.Drawing.Color"/> structure that specifies the background color. This
               parameter is ignored if the bitmap is totally opaque.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Bitmap.Size">
            <summary>
              Gets the width and height of this <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.Bitmap.Size"/> structure that represents the width and height 
              of this <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Bitmap.Height">
            <summary>
              Gets the height of this <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Bitmap.Width">
            <summary>
              Gets the width of this <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Bitmap.Planes">
            <summary>
              Gets the planes of the Bitmap. The value is always 1.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.GetData">
            <summary>
              Gets the data of the bitmap.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Bitmap.BitsPerPixel">
            <summary>
              Gets the bits-per-pixel of the bitmap.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.Clone">
            <summary>
              Creates an exact copy of this <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object.
            </summary>
            <returns>
              The <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> object that this method creates.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Bitmap.ToGdiplusBitmap(C1.Framework.Drawing.Gdi.Bitmap)">
            <summary>
              Creates a GDI+ Bitmap from a handle to a GDI bitmap.
            </summary>
            <param name="bitmap">
              A <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> indicates the GDI bitmap.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Bitmap"/> indicates the GDI+ bitmap.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Brush">
            <summary>
              Represents the base class of all kinds of brush
            </summary>
            <remarks>
              This is an abstract class, which is just details that it's ranged to Brush.
              To use a <see cref="T:C1.Framework.Drawing.Gdi.Brush"/>, you should create an instance from its inherited class.
              Refer to <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/>, <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/>, <see cref="T:C1.Framework.Drawing.Gdi.PatternBrush"/>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Brush.FillRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fills the <c>rectangle</c> on <c>deviceContext</c> by using the current brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to fill.
            </param>
            <remarks>
              When filling the specified rectangle, it does not include the rectangle's right and bottom sides. GDI fills
              a rectangle up to, but not including, the right column and bottom row, regardless of the current mapping mode. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Brush.FillEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fill the special ellipse on <c>deviceContext</c> by using the current brush
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Brush.FillPie(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Fill the interior of an pie specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
            <remarks>
              The curve begins at the point where the ellipse intersects the first radial and extends counterclockwise to
              the point where the ellipse intersects the second radial. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Brush.FillPolygon(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Fill a special polygon consisting of two or more vertices connected by straight lines. 
              The polygon is filled by using the current brush and polygon fill mode.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Brush.FillRegion(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Fills the region by the specified brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicate the region which be filled
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.SolidBrush">
            <summary>
              Represents the brush which always solid draw
            </summary>
            <remarks>
              Here we only can support NameKnowedColor or Null alpha ARGB color
              if <see cref="P:C1.Framework.Drawing.Gdi.SolidBrush.Color"/> is <see cref="P:System.Drawing.Color.Transparent"/> or <see cref="F:System.Drawing.Color.Empty"/>,
              it means create a <see cref="T:C1.Framework.Drawing.Gdi.HollowBrush"/>
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.SolidBrush._color">
            <summary>
              Place holder for the Color property.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidBrush.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> 
              class.
            </summary>
            <remarks>
              The <b>Color </b> property is set to <see cref="P:System.Drawing.Color.Black"/> 
              (default) and the <b>Width</b> property is set to 1 (default).
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidBrush.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/>
              class with the specified color.
            </summary>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.SolidBrush.Color"/> structure that indicates the color 
              of this <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> object. 
            </param>
            <remarks>
              The <see cref="P:C1.Framework.Drawing.Gdi.SolidBrush.Color"/> property is set to the color specified 
              by the <c>color</c> parameter. The <b>Width</b> property is set
              to 1 (default).
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SolidBrush.Color">
            <summary>
              Gets or sets the color of this <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> object.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.SolidBrush.Color"/> structure that represents the color of this <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> object.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidBrush.Clone">
            <summary>
              Create a <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> that has the same style as this brush.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> that has the same style as this brush.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidBrush.CreateHandle">
            <summary>
              Create the brush by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the brush.
            </returns>
            <remarks>
              Here we only can support NameKnowedColor or Null alpha ARGB color
              if <see cref="P:C1.Framework.Drawing.Gdi.SolidBrush.Color"/> is <see cref="P:System.Drawing.Color.Transparent"/> or <see cref="F:System.Drawing.Color.Empty"/>,
              it means create a <see cref="T:C1.Framework.Drawing.Gdi.HollowBrush"/>
            </remarks>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.HatchStyle">
            <summary>
              Represents the hatch style of the <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchStyle.Horizontal">
            <summary>
              Horizontal hatch
            </summary>
            <remarks>
              It seems like:
              | ==== |
              | ==== |
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchStyle.Vertical">
            <summary>
              Vertical hatch
            </summary>
            <remarks>
              It seems like:
              | |||| |
              | |||| |
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchStyle.ForwardDiagonal">
            <summary>
              A 45-degree downward, left-to-right hatch
            </summary>
            <remarks>
              It seems like:
              | \\\\ |
              | \\\\ |
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchStyle.BackwardDiagonal">
            <summary>
              A 45-degree downward, left-to-right hatch
            </summary>
            <remarks>
              It seems like:
              | //// |
              | //// |
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchStyle.Cross">
            <summary>
              Horizontal and vertical cross-hatch
            </summary>
            <remarks>
              It seems like:
              | ++++ |
              | ++++ |
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchStyle.DiagonalCross">
            <summary>
              45-degree crosshatch
            </summary>
            <remarks>
              It seems like:
              | \/\/ |
              | /\/\ |
            </remarks>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.HatchBrush">
            <summary>
              Represents the brush which draw with <see cref="T:C1.Framework.Drawing.Gdi.HatchStyle"/>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchBrush._hatchStyle">
            <summary>
              Save the <see cref="T:C1.Framework.Drawing.Gdi.HatchStyle"/> of this brush
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchBrush._foregroundColor">
            <summary>
              Save the foreground color of this brush
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HatchBrush._backgroundColor">
            <summary>
              Save the background color of this brush
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.#ctor(C1.Framework.Drawing.Gdi.HatchStyle)">
            <summary>
              Initialize a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> class
            </summary>
            <param name="style">
              A <see cref="T:C1.Framework.Drawing.Gdi.HatchStyle"/> indicate the drawing style of <see cref="T:C1.Framework.Drawing.Gdi.Brush"/>
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.#ctor(C1.Framework.Drawing.Gdi.HatchStyle,System.Drawing.Color)">
            <summary>
              Initialize a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> class
            </summary>
            <param name="style">
              A <see cref="T:C1.Framework.Drawing.Gdi.HatchStyle"/> indicate the drawing style of <see cref="T:C1.Framework.Drawing.Gdi.Brush"/>
            </param>
            <param name="foregroundColor">
              A <see cref="T:System.Drawing.Color"/> indicate the foreground color of the device on which be drawed
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.#ctor(C1.Framework.Drawing.Gdi.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
              Initialize a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> class
            </summary>
            <param name="style">
              A <see cref="T:C1.Framework.Drawing.Gdi.HatchStyle"/> indicate the drawing style of <see cref="T:C1.Framework.Drawing.Gdi.Brush"/>
            </param>
            <param name="foregroundColor">
              A <see cref="T:System.Drawing.Color"/> indicate the foreground color of the device on which be drawed
            </param>
            <param name="backgroundColor">
              A <see cref="T:System.Drawing.Color"/> indicate the backgound color of the device on which be drawed
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.HatchBrush.BackgroundColor">
            <summary>
              Gets or sets the color of this <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> object.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Color"/> structure that represents the foreground color of this <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.HatchBrush.ForegroundColor">
            <summary>
              Gets or sets the color of this <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> object.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Color"/> structure that represents the background color of this <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.HatchBrush.Style">
            <summary>
              Gets or sets the style of the <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/>.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.HatchStyle"/> indicates the line style of the brush.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.CreateHandle">
            <summary>
              Create the brush by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the brush.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.Clone">
            <summary>
              Create a <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> that has the same style as this brush.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.HatchBrush"/> that has the same style as this brush.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.FillRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fill the specified rectangle by using the given hatch brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object that represents the device context.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the rectangle to be filled.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.FillEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fill the special ellipse on <c>deviceContext</c> by using the current brush
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.FillPie(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Fill the interior of an pie specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.FillPolygon(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Fill a special polygon consisting of two or more vertices connected by straight lines. 
              The polygon is filled by using the current brush and polygon fill mode.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HatchBrush.FillRegion(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Fills the region by the specified brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicate the region which be filled
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.HollowBrush">
            <summary>
              Represents the brush which draw nothing
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HollowBrush.#ctor">
            <summary>
              Initialize a new instance of <see cref="T:C1.Framework.Drawing.Gdi.HollowBrush"/>
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HollowBrush.CreateHandle">
            <summary>
              Create the brush by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the brush.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HollowBrush.Clone">
            <summary>
              Create a <see cref="T:C1.Framework.Drawing.Gdi.HollowBrush"/> that has the same style as this brush.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.HollowBrush"/> that has the same style as this brush.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.PatternBrush">
            <summary>
              Defines a brush with a pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.HorizontalPattern">
            <summary>
              Gets the Horizontal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.VerticalPattern">
            <summary>
              Gets the Vertical pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.ForwordDiagonalPattern">
            <summary>
              Gets the ForwordDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.BackwardDiagonalPattern">
            <summary>
              Gets the BackwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LargeGridPattern">
            <summary>
              Gets the LargeGrid pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DiagonalCrossPattern">
            <summary>
              Gets the DiagonalCross pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent5Pattern">
            <summary>
              Gets the Percent5 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent10Pattern">
            <summary>
              Gets the Percent10 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent20Pattern">
            <summary>
              Gets the Percent20 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent25Pattern">
            <summary>
              Gets the Percent25 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent30Pattern">
            <summary>
              Gets the Percent30 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent40Pattern">
            <summary>
              Gets the Percent40 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent50Pattern">
            <summary>
              Gets the Percent50 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent60Pattern">
            <summary>
              Gets the Percent60 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent70Pattern">
            <summary>
              Gets the Percent70 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent75Pattern">
            <summary>
              Gets the Percent75 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent80Pattern">
            <summary>
              Gets the Percent80 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Percent90Pattern">
            <summary>
              Gets the Percent90 pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LightDownwardDiagonalPattern">
            <summary>
              Gets the LightDownwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LightUpwardDiagonalPattern">
            <summary>
              Gets the LightUpwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DarkDownwardDiagonalPattern">
            <summary>
              Gets the DarkDownwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DarkUpwardDiagonalPattern">
            <summary>
              Gets the DarkUpwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.WideDownwardDiagonalPattern">
            <summary>
              Gets the WideDownwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.WideUpwardDiagonalPattern">
            <summary>
              Gets the WideUpwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LightVerticalPattern">
            <summary>
              Gets the LightVertical pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LightHorizontalPattern">
            <summary>
              Gets the LightHorizontal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.NarrowVerticalPattern">
            <summary>
              Gets the NarrowVertical pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.NarrowHorizontalPattern">
            <summary>
              Gets the NarrowHorizontal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DarkVerticalPattern">
            <summary>
              Gets the DarkVertical pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DarkHorizontalPattern">
            <summary>
              Gets the DarkHorizontal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DashedDownwardDiagonalPattern">
            <summary>
              Gets the DashedDownwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DashedUpwardDiagonalPattern">
            <summary>
              Gets the DashedUpwardDiagonal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DashedHorizontalPattern">
            <summary>
              Gets the DashedHorizontal pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DashedVerticalPattern">
            <summary>
              Gets the DashedVertical pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.SmallConfettiPattern">
            <summary>
              Gets the SmallConfetti pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LargeConfettiPattern">
            <summary>
              Gets the LargeConfetti pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.ZigZagPattern">
            <summary>
              Gets the ZigZag pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.WavePattern">
            <summary>
              Gets the Wave pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DiagonalBrickPattern">
            <summary>
              Gets the DiagonalBrick pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.HorizontalBrickPattern">
            <summary>
              Gets the HorizontalBrick pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.WeavePattern">
            <summary>
              Gets the Weave pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.PlaidPattern">
            <summary>
              Gets the Plaid pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DivotPattern">
            <summary>
              Gets the Divot pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DottedGridPattern">
            <summary>
              Gets the DottedGrid pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.DottedDiamondPattern">
            <summary>
              Gets the DottedDiamond pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.ShinglePattern">
            <summary>
              Gets the Shingle pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.TrellisPattern">
            <summary>
              Gets the Trellis pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.SpherePattern">
            <summary>
              Gets the Sphere pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.SmallGridPattern">
            <summary>
              Gets the SmallGrid pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.SmallCheckerBoardPattern">
            <summary>
              Gets the SmallCheckerBoard pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.LargeCheckerBoardPattern">
            <summary>
              Gets the LargeCheckerBoard pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.OutlinedDiamondPattern">
            <summary>
              Gets the OutlinedDiamond pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.SolidDiamondPattern">
            <summary>
              Gets the SolidDiamond pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.HollowPattern">
            <summary>
              Gets the Hollow pattern.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternBrush._pattern">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.PatternBrush.Pattern"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternBrush._backgroundColor">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.PatternBrush.BackgroundColor"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternBrush._foregroundColor">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.PatternBrush.ForegroundColor"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternBrush._patternBitmapHandle">
            <summary>
              Caches the handle of the bitmap that presents the pattern.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.#ctor(System.Byte[0:,0:])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.PatternBrush"/> class.
            </summary>
            <param name="pattern">
              A <b>byte</b> array that indicates the pattern.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.#ctor(System.Byte[0:,0:],System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.PatternBrush"/> class.
            </summary>
            <param name="pattern">
              A <b>byte</b> array that indicates the pattern.
            </param>
            <param name="foregroundColor">
              A <see cref="T:System.Drawing.Color"/> that indicates the foreground color of the pattern.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.#ctor(System.Byte[0:,0:],System.Drawing.Color,System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.PatternBrush"/> class.
            </summary>
            <param name="pattern">
              A <b>byte</b> array that indicates the pattern.
            </param>
            <param name="foregroundColor">
              A <see cref="T:System.Drawing.Color"/> that indicates the foreground color of the pattern.
            </param>
            <param name="backgroundColor">
              A <see cref="T:System.Drawing.Color"/> that indicates the background color of the pattern.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.BackgroundColor">
            <summary>
              Gets or sets the background color of the pattern.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Color"/> structure that indicates the background color of the pattern.
            </value>
            <remarks>
              If the value is Color.Empty the background color is the currrent background color of the device context.
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.ForegroundColor">
            <summary>
              Gets or sets the foreground color of the pattern.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Color"/> structure that indicates the foreground color of the pattern.
            </value>
            <remarks>
              If the value is Color.Empty the foreground color is the currrent foreground color of the device context.
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Pattern">
            <summary>
              Gets or sets the pattern mask.
            </summary>
            <value>
              A <b>int</b> array that indicates the pattern. 
              Each bit represents a pixel. 
              0 - indicates to fill the pixel with  foreground color.
              1 - indicates to fill the pixel with background color.
            </value>
            <remarks>
              If the Pattern is null or empty, all pixel will be filled with background color. 
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternBrush.Handle">
            <summary>
              Returns a handle to this <b>GdiObject</b> object.
            </summary>
            <value>
              A Windows handle to this <b>GdiObject</b> object.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.UpdateHandle">
            <summary>
              Delete the old handle and Create the new handle when the 
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.CreateHandle(System.IntPtr@)">
            <summary>
              Create the handle by the current value of Patterns property.
            </summary>
            <param name="patternBitmapHandle">
              The handle of the pattern bitmap
            </param>
            <returns>
              Returns the handle of the pattern brush.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiObject</b> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.Clone">
            <summary>
              Creates an exact copy if this <b>GdiObject</b> object.
            </summary>
            <returns>
              The <b>GdiObject</b> object that this method creates.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.FillRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fill the specified rectangle by using the given pattern brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object that represents the device context.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the rectangle to be filled.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.PatternBrush.FillAction">
            <summary>
              Defines the filling action.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.Fill(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.PatternBrush.FillAction)">
            <summary>
              Adds the colors to the filling action.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="action">
              The original filling action.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.FillEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fill the special ellipse on <c>deviceContext</c> by using the current brush
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.FillPie(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Fill the interior of an pie specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.FillPolygon(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Fill a special polygon consisting of two or more vertices connected by straight lines. 
              The polygon is filled by using the current brush and polygon fill mode.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.FillRegion(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Fills the region by the specified brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicate the region which be filled
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.BaseFillRegionWrapper(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              A wrapper method to call base logic.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicate the region which be filled
            </param>
            <remarks>
              We could not call base.XXX() on anonymous delegate.
              Otherwise compiler error CS_1911 (Undocumented) will be warned.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.BaseFillEllipseWrappper(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              A wrapper method to call base logic.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              We could not call base.XXX() on anonymous delegate.
              Otherwise compiler error CS_1911 (Undocumented) will be warned.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.BaseFillPolygonWrapper(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              A wrapper method to call base logic.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
            <remarks>
              We could not call base.XXX() on anonymous delegate.
              Otherwise compiler error CS_1911 (Undocumented) will be warned.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternBrush.BaseFillPieWrapper(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              A wrapper method to call base logic.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
            <remarks>
              We could not call base.XXX() on anonymous delegate.
              Otherwise compiler error CS_1911 (Undocumented) will be warned.
            </remarks>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.TextureBrush">
            <summary>
              Represent a texture brush be used to fill with texture
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TextureBrush._bitmap">
            <summary>
              A <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> indicate the texture
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TextureBrush.#ctor(C1.Framework.Drawing.Gdi.Bitmap)">
            <summary>
              Initialize a new istance of <see cref="T:C1.Framework.Drawing.Gdi.TextureBrush"/>
            </summary>
            <param name="bitmap">
              A <see cref="T:C1.Framework.Drawing.Gdi.Bitmap"/> indicate an unit of the texture
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TextureBrush.CreateHandle(System.IntPtr)">
            <summary>
              Create the handle by the current value of bitmap.
            </summary>
            <param name="bitmapHandle">
              The handle of the pattern bitmap
            </param>
            <returns>
              Returns the handle of the pattern brush.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TextureBrush.Clone">
            <summary>
              Creates an exact copy if this <b>TextureBrush</b> object.
            </summary>
            <returns>
              A new <see cref="T:C1.Framework.Drawing.Gdi.TextureBrush"/> which properties same as current brush
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TextureBrush.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiObject</b> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.GradientDirection">
            <summary>
              An <see cref="T:System.Enum"/> represents the gradient direction.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GradientDirection.Left">
            <summary>
              Towards to left.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GradientDirection.Right">
            <summary>
              Towards to right.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GradientDirection.Up">
            <summary>
              Towards to up.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GradientDirection.Down">
            <summary>
              Towards to down.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.GradientBrush">
            <summary>
              Represents the brush to be used to fill the gradient shape.
            </summary>
            <remarks>
              The handle of the inherited class of  <see cref="T:C1.Framework.Drawing.Gdi.GradientBrush"/> is always IntPtr.Zero, 
              so it can not be used to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GradientBrush.ReverseColors(System.Drawing.Color[])">
            <summary>
              Get the reverse order colors
            </summary>
            <param name="colors">
              A <see cref="T:System.Drawing.Color"/> array indicates the original colors.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Color"/> array indicates the reverse order colors.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GradientBrush.CombineColors(System.Drawing.Color[][])">
            <summary>
              Combines the colors.
            </summary>
            <param name="colorsList">
              A <see cref="T:System.Drawing.Color"/> array indicates the colors.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Color"/> array indicates the combined colors.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GradientBrush.FillTriangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color[])">
            <summary>
              Fills triangle with specified colors.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicates the dc.
            </param>
            <param name="vertex1">
              A <see cref="T:System.Drawing.Point"/> indicates the vertex1 of triangle.
            </param>
            <param name="vertex2">
              A <see cref="T:System.Drawing.Point"/> indicates the vertex2 of triangle.
            </param>
            <param name="vertex3">
              A <see cref="T:System.Drawing.Point"/> indicates the vertex3 of triangle.
            </param>
            <param name="colors">
              A <see cref="T:System.Drawing.Color"/> array indicates the gradient colors.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.BoxGradientBrush">
            <summary>
              Represents the brush to be used to fill the gradient shape.
            </summary>
            <remarks>
              The handle of the <see cref="T:C1.Framework.Drawing.Gdi.BoxGradientBrush"/> is always IntPtr.Zero, so it can not be used 
              to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.BoxGradientBrush.FillEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fills the specified pie on the device context by using this brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> that indicates the device context.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> that just contains the ellipse.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.BoxGradientBrush.FillPie(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Fills the specified pie on the device context by using this brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> that indicates the device context.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.BoxGradientBrush.FillPolygon(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Fills the specified polygon on the device context by using this brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> that indicates the device context.
            </param>
            <param name="points">
              An array of <see cref="T:System.Drawing.Point"/> that indicates the vertexes of polygon.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.BoxGradientBrush.FillRegion(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Fills the specified region on the device context by using this brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> that indicates the device context.
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> that indicates the region.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.BoxGradientBrush.Clone">
            <summary>
              Creates an exact copy if this <b>BoxGradientBrush</b> object.
            </summary>
            <returns>
              The <b>BoxGradientBrush</b> object that this method creates.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush">
            <summary>
              Represents the brush to be used to fill the gradient shape.
            </summary>
            <remarks>
              The handle of the <see cref="T:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush"/> is always IntPtr.Zero, so it can not be used 
              to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush._colors">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush.Colors"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush._direction">
            <summary>
              Saves the data of the <see cref="T:C1.Framework.Drawing.Gdi.GradientDirection"/> property.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush.#ctor(System.Drawing.Color[],C1.Framework.Drawing.Gdi.GradientDirection)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush"/> class.
            </summary>
            <param name="colors">
              An array of <see cref="T:System.Drawing.Color"/> that indicates the linear gradient colors.
            </param>
            <param name="direction">
              A <see cref="T:C1.Framework.Drawing.Gdi.GradientDirection"/> that indicates the gradient direction.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush.Colors">
            <summary>
              Gets or sets the linear gradient colors.
            </summary>
            <value>
              An array of <see cref="T:System.Drawing.Color"/> that indicates the linear gradient colors.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush.Direction">
            <summary>
              Gets or sets the gradient direction.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.GradientDirection"/> that indicates the gradient direction.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush.FillRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fills the specified rectangle on the device context by using this brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> that indicates the device context.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> that indicates the rectangle.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush">
            <summary>
              Represents the brush to be used to fill the gradient shape.
            </summary>
            <remarks>
              The handle of the <see cref="T:C1.Framework.Drawing.Gdi.LinearBoxGradientBrush"/> is always IntPtr.Zero, so it can not be used 
              to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush._colors">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.Colors"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush._centrePoint">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.CentrePoint"/> property.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.#ctor(System.Drawing.Color[],System.Drawing.PointF)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush"/> class.
            </summary>
            <param name="colors">
              An array of <see cref="T:System.Drawing.Color"/> that indicates the linear gradient colors.
            </param>
            <param name="centrePoint">
              A <see cref="T:System.Drawing.PointF"/> that indicates the gradient centre point.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.#ctor(System.Drawing.Color[],System.Drawing.ContentAlignment)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush"/> class.
            </summary>
            <param name="colors">
              An array of <see cref="T:System.Drawing.Color"/> that indicates the linear gradient colors.
            </param>
            <param name="centrePoint">
              A <see cref="T:System.Drawing.ContentAlignment"/> that indicates the gradient centre point.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.Colors">
            <summary>
              Gets or sets the linear gradient colors.
            </summary>
            <value>
              An array of <see cref="T:System.Drawing.Color"/> that indicates the linear gradient colors.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.CentrePoint">
            <summary>
              Gets or sets the gradient direction.
            </summary>
            <value>
              A <see cref="T:System.Drawing.PointF"/> that indicates the gradient centre point.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TriangleBoxGradientBrush.FillRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fills the specified rectangle on the device context by using this brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> that indicates the device context.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> that indicates the rectangle.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.LinearGradientBrush">
            <summary>
              Represents the brush to be used to fill the gradient shape.
            </summary>
            <remarks>
              The handle of the <see cref="T:C1.Framework.Drawing.Gdi.LinearGradientBrush"/> is always IntPtr.Zero, so it can not be used 
              to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color[])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.LinearGradientBrush"/> class.
            </summary>
            <param name="startPoint">
            </param>
            <param name="endPoint">
            </param>
            <param name="linearColors">
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.LinearGradientBrush.Clone">
            <summary>
              Creates an exact copy if this <b>LinearGradientBrush</b> object.
            </summary>
            <returns>
              The <b>LinearGradientBrush</b> object that this method creates.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.ColorBrush">
            <summary>
              Defines a brush that has a solid color.
            </summary>
            <remarks>
              This brush has the same funtion as <see cref="T:C1.Framework.Drawing.Gdi.SolidBrush"/> in painting. 
              This brush will not consume gdi handle. In other word, the Handle property is always IntPtr.Zero. So it 
              can not be used to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.ColorBrush._color">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.ColorBrush.Color"/> property.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> class.
            </summary>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.ColorBrush.Color"/> indicates the color of the brush. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.CreateHandle">
            <summary>
              Create the brush by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the brush.
            </returns>
            <remarks>
              Here we only can support NameKnowedColor or Null alpha ARGB color
              if <see cref="P:C1.Framework.Drawing.Gdi.ColorBrush.Color"/> is <see cref="P:System.Drawing.Color.Transparent"/> or <see cref="F:System.Drawing.Color.Empty"/>,
              it means create a <see cref="T:C1.Framework.Drawing.Gdi.HollowBrush"/>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.ColorBrush.Color">
            <summary>
              Gets or sets the color of the brush.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.ColorBrush.Color"/> indicates the color of the brush.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.Clone">
            <summary>
              Creates an exact copy if this <b>ColorBrush</b> object.
            </summary>
            <returns>
              The <b>ColorBrush</b> object that this method creates.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.FillRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fills the <c>rectangle</c> on <c>deviceContext</c> by using the current brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to fill.
            </param>
            <remarks>
              When filling the specified rectangle, it does not include the rectangle's right and bottom sides. GDI fills
              a rectangle up to, but not including, the right column and bottom row, regardless of the current mapping mode. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.FillEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Fill the special ellipse on <c>deviceContext</c> by using the current brush
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.FillPie(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Fill the interior of an pie specified by a bounding <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
            <remarks>
              The curve begins at the point where the ellipse intersects the first radial and extends counterclockwise to
              the point where the ellipse intersects the second radial. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.FillPolygon(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Fill a special polygon consisting of two or more vertices connected by straight lines. 
              The polygon is filled by using the current brush and polygon fill mode.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorBrush.FillRegion(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Fills the region by the specified brush.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicate the region which be filled
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Brushes">
            <summary>
              Brushes for all the standard colors. 
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Transparent">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.AliceBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.AntiqueWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Aqua">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Aquamarine">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Azure">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Beige">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Bisque">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Black">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.BlanchedAlmond">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Blue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.BlueViolet">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Brown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.BurlyWood">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.CadetBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Chartreuse">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Chocolate">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Coral">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.CornflowerBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Cornsilk">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Crimson">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Cyan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkCyan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkGoldenrod">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkKhaki">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkMagenta">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkOliveGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkOrange">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkOrchid">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkSalmon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkSeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkSlateBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkSlateGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkTurquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DarkViolet">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DeepPink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DeepSkyBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DimGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.DodgerBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Firebrick">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.FloralWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.ForestGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Fuchsia">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Gainsboro">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.GhostWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Gold">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Goldenrod">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Gray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Green">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.GreenYellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Honeydew">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.HotPink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.IndianRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Indigo">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Ivory">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Khaki">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Lavender">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LavenderBlush">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LawnGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LemonChiffon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightCoral">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightCyan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightGoldenrodYellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightPink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightSalmon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightSeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightSkyBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightSlateGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightSteelBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LightYellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Lime">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.LimeGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Linen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Magenta">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Maroon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumAquamarine">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumOrchid">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumPurple">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumSeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumSlateBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumSpringGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumTurquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MediumVioletRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MidnightBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MintCream">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.MistyRose">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Moccasin">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.NavajoWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Navy">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.OldLace">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Olive">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.OliveDrab">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Orange">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.OrangeRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Orchid">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PaleGoldenrod">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PaleGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PaleTurquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PaleVioletRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PapayaWhip">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PeachPuff">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Peru">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Pink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Plum">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.PowderBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Purple">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Red">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.RosyBrown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.RoyalBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SaddleBrown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Salmon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SandyBrown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SeaShell">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Sienna">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Silver">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SkyBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SlateBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SlateGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Snow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SpringGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.SteelBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Tan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Teal">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Thistle">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Tomato">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Turquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Violet">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Wheat">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.White">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.WhiteSmoke">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.Yellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Brushes.YellowGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object set to a system-defined color.
            </value>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.SystemBrushes">
            <summary>
              Each property of the SystemBrushes class is a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of 
              a Windows display element.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ActiveBorder">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the active window's border.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the active window's border.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ActiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the active window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the active window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ActiveCaptionText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text in the active window's
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text in the active window's
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.AppWorkspace">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the application workspace.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the application workspace.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ButtonFace">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the face color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the face color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ButtonHighlight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the highlight color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the highlight color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ButtonShadow">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the shadow color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the shadow color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.Control">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the face color of a 3-D element
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the face color of a 3-D element
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ControlDark">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the shadow color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the shadow color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ControlDarkDark">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the dark shadow color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the dark shadow color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ControlLight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the light color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the light color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ControlLightLight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the highlight color of a 3-D
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the highlight color of a 3-D
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ControlText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of text in a 3-D
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of text in a 3-D
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.Desktop">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the desktop.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the desktop.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.GradientActiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the lightest color
              in the color gradient of an active window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the lightest color in the color gradient of an active window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.GradientInactiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the lightest color in the color
              gradient of an inactive window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the lightest color in the color gradient of an inactive window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.GrayText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of dimmed text.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of dimmed text.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.Highlight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of selected items.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of selected items.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.HighlightText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text of selected items.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text of selected items.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.HotTrack">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color used to designate a hot-tracked item.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color used to designate a hot-tracked item.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.InactiveBorder">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of an inactive window's border.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of an inactive window's border.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.InactiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of an inactive window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of an inactive window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.InactiveCaptionText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text in an inactive window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text in an inactive window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.Info">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of a ToolTip.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of a ToolTip.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.InfoText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text of a ToolTip.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text of a ToolTip.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.Menu">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of a menu's background.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of a menu's background.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.MenuBar">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of a menu bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of a menu bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.MenuHighlight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color used to highlight menu items
              when the menu appears as a flat menu.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color used to highlight menu items when the menu appears as a flat menu.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.MenuText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of a menu's text.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of a menu's text.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.ScrollBar">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of a scroll bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background of a scroll bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.Window">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background in the client area of a window.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the background in the client area of a window.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.WindowFrame">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of a window frame.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of a window frame.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemBrushes.WindowText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text in the client area of a window.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorBrush"/> object that is the color of the text in the client area of a window.
            </value>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState">
            <summary>
              Saves the state of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState.State">
            <summary>
              A handle that represents the state of this <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState"/> class.
            </summary>
            <param name="state">
              A handle that represents the state of this <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode">
            <summary>
              Represents the raster operation code.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.Invert">
            <summary>
              Inverts the destination rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.Blackness">
            <summary>
              Fills the destination rectangle using the color associated with index 0 in the physical palette. 
              (This color is black for the default physical palette.)
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.Whiteness">
            <summary>
              Fills the destination rectangle using the color associated with index 1 in the physical palette. 
              (This color is white for the default physical palette.) 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.SourceCopy">
            <summary>
              Copies the source rectangle directly to the destination rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.SourcePaint">
            <summary>
              Combines the colors of the source and destination rectangles by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.SourceAnd">
            <summary>
              Combines the colors of the source and destination rectangles by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.SourceInvert">
            <summary>
              Combines the colors of the source and destination rectangles by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.SourceErase">
            <summary>
              Combines the inverted colors of the destination rectangle with the colors of the source rectangle
              by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.NotSourceCopy">
            <summary>
              Copies the inverted source rectangle to the destination.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.NotSourceErase">
            <summary>
              Combines the colors of the source and destination rectangles by using the Boolean OR operator
              and then inverts the resultant color.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.MergeCopy">
            <summary>
              Merges the colors of the source rectangle with the brush currently selected in hdcDest,
              by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.MergePaint">
            <summary>
              Merges the colors of the inverted source rectangle with the colors of the destination rectangle
              by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.PatCopy">
            <summary>
              Copies the brush currently selected in hdcDest, into the destination bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.PatPaint">
            <summary>
              Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle
              by using the Boolean OR operator. The result of this operation is combined with the colors of the destination
              rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.PatInvert">
            <summary>
              Combines the colors of the brush currently selected in hdcDest, 
              with the colors of the destination rectangle by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.PatAnd">
            <summary>
              Combines the colors of the brush currently selected in hdcDest, 
              with the colors of the destination rectangle by using the Boolean And operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.PatOr">
            <summary>
              Combines the colors of the brush currently selected in hdcDest, 
              with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode.DestinationInvert">
            <summary>
              Inverts the destination rectangle.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.BackgroundMode">
            <summary>
              Represents the mode of the background.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.BackgroundMode.Transparent">
            <summary>
              Background remains untouched.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.BackgroundMode.Opaque">
            <summary>
              Background is filled with the current background color before the text, hatched brush, or pen is drawn.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection">
            <summary>
              Represents the circum-direction.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection.Counterclockwise">
            <summary>
              Figures drawn counterclockwise
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection.Clockwise">
            <summary>
              Figures drawn clockwise.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode">
            <summary>
              Enumerate the fill mode for region
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode.Alternate">
            <summary>
              Selects alternate mode (fills the area between odd-numbered and even-numbered polygon sides on each scan line).
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode.Winding">
            <summary>
              Selects winding mode (fills any region with a nonzero winding value).
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.GraphicsMode">
            <summary>
              Define a enumeration indicates the graphics mode.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.GraphicsMode.Compatible">
            <summary>
              The current graphics mode is the compatible graphics mode, a mode 
              that is compatible with 16-bit Windows. In this graphics mode, an 
              application cannot set or modify the world transformation for the 
              specified device context. The compatible graphics mode is the 
              default graphics mode.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.GraphicsMode.Advance">
            <summary>
               Windows NT/2000/XP: The current graphics mode is the advanced 
               graphics mode, a mode that allows world transformations. In this 
               graphics mode, an application can set or modify the world 
               transformation for the specified device context. 
            </summary>
            <remarks>
              Windows 95/98/Me: This mode is not supported. 
            </remarks>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode">
            <summary>
              Defines the unit of measure used to transform page-space units into device-space units, and also defines 
              the orientation of the device's x and y axes. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.Anisotropic">
            <summary>
              Logical units are mapped to arbitrary units with arbitrarily scaled axes. 
              Use the WindowExtent and ViewportExtent properties to specify the units, orientation, and scaling.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.Isotropic">
            <summary>
              Logical units are mapped to arbitrary units with equally scaled axes; that is, one unit along the x-axis is 
              equal to one unit along the y-axis. 
              Use the WindowExtent and ViewportExtent properties to specify the units and the orientation of the axes. 
              Graphics device interface (GDI) makes adjustments as necessary to ensure the x and y units remain the same size
              (When the window extent is set, the viewport will be adjusted to keep the units isotropic).
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.Twips">
            <summary>
              Each logical unit is mapped to one twentieth of a printer's point (1/1440 inch, also called a twip). 
              Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.HiEnglish">
            <summary>
              Each logical unit is mapped to 0.001 inch. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.LoEnglish">
            <summary>
              Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.HiMetric">
            <summary>
              Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.LoMetric">
            <summary>
              Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode.Text">
            <summary>
              Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment">
            <summary>
              Specifies the text alignment by using a mask of the values in the following list. 
              Only one flag can be chosen from those that affect horizontal and vertical alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment.Left">
            <summary>
              The reference point will be on the left edge of the bounding rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment.Right">
            <summary>
              The reference point will be on the right edge of the bounding rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment.Center">
            <summary>
              The reference point will be aligned horizontally with the center of the bounding rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment.Top">
            <summary>
              The reference point will be on the top edge of the bounding rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment.Bottom">
            <summary>
              The reference point will be on the bottom edge of the bounding rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment.Baseline">
            <summary>
              The reference point will be on the base line of the text.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat">
            <summary>
              Specifies the method of formatting the text.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.Default">
            <summary>
              The default text format is "Top|Left".
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.Top">
            <summary>
              Justifies the text to the top of the rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.VerticalCenter">
            <summary>
              Centers text vertically. This value is used only with the SingleLine value.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.Bottom">
            <summary>
              Justifies the text to the bottom of the rectangle. This value is used only with the SingleLine value.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.Left">
            <summary>
              Aligns text to the left.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.HorizontalCenter">
            <summary>
              Centers text horizontally in the rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.Right">
            <summary>
              Aligns text to the right.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.EndEllipsis">
            <summary>
              For displayed text, if the end of a string does not fit in the rectangle, it is truncated and 
              ellipses are added. If a word that is not at the end of the string goes beyond the limits of 
              the rectangle, it is truncated without ellipses. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.WordEllipsis">
            <summary>
              Truncates any word that does not fit in the rectangle and adds ellipses.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.PathEllipsis">
            <summary>
              For displayed text, replaces characters in the middle of the string with ellipses so that the result 
              fits in the specified rectangle. If the string contains backslash (\) characters, PathEllipsis 
              preserves as much as possible of the text after the last backslash. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.NoPrefix">
            <summary>
              Turns off processing of prefix characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.HidePrefix">
            <summary>
              Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, 
              but other mnemonic-prefix characters are still processed. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.PrefixOnly">
            <summary>
              Draws only an underline at the position of the character following the ampersand (&amp;) prefix character.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.NoClip">
            <summary>
              Draws without clipping.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.ExternalLeading">
            <summary>
              Includes the font external leading in line height. Normally, external leading is not included in the 
              height of a line of text.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.EditControl">
            <summary>
              Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average 
              character width is calculated in the same manner as for an edit control, and the function does not 
              display a partially visible last line.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.RightToLeft">
            <summary>
              Layout in right-to-left reading order for bi-directional text when the font selected into the device context
              is a Hebrew or Arabic font. The default reading order for all text is left-to-right.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.SingleLine">
            <summary>
              Displays text on a single line only. Carriage returns and line feeds do not break the line.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.WordBreak">
            <summary>
              Breaks words. Lines are automatically broken between words if a word would extend past the edge of the 
              pecified rectangle. A carriage return-line feed sequence also breaks the line. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.NoFullWidthCharacterBreak">
            <summary>
              Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent 
              to SBCS strings. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat.ExpandTabs">
            <summary>
              Expands tab characters. The default number of characters per tab is eight.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext">
            <summary>
              Represents the GDI device conext.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext._handle">
            <summary>
              Saves the handle of the device context.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Finalize">
            <summary>
              Deletes this <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>, and frees the memory allocated for it.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Dispose">
            <summary>
              Releases all resources used by this <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object.
            </summary>
            <remarks>
              Calling <b>Dispose</b> allows the resources used by the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object 
              to be reallocated for other purposes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Handle">
            <summary>
              Gets or [protected] sets the handle of the device context.
            </summary>
            <remarks>
              A <see cref="T:System.IntPtr"/> that indicates the handle of the device context.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.System#Drawing#IDeviceContext#GetHdc">
            <summary>
              Returns the handle to a Windows device context.
            </summary>
            <returns>
              An System.IntPtr representing the handle of a device context.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.System#Drawing#IDeviceContext#ReleaseHdc">
            <summary>
              Releases the handle of a Windows device context.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SelectObject(System.IntPtr)">
             <summary>
               Selects an object into the specified device context(DC). The new object replaces the previous 
               object of the same type. 
             </summary>
             <param name="gdiObjectHandle">
               A <see cref="T:System.IntPtr"/> that indicates the handle to the gdi object to be selected.
             </param>
             <returns>
               Returns the handle of the previous gdi object of the same type.
             </returns>
             <remarks>
               Note: When the handle of a gdi object is selected to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>, the properties 
               of the gdi object can not changed and the gdi object can not be disposed.
             </remarks>
             <example>
               <code>
                //
                // Paints a rectangle that is single black border and filled with white.
                //
                using (Pen pen = new SolidPen(Color.Black))
                {
                    using (Brush brush = new SolidBrush(Color.Wheat))
                    {
                        DeviceContext dc = DeviceContext.Screen;
                        IntPtr defaultPenHandle = dc.SelectObject(pen.Handle);
                        IntPtr defaultBrushHandle = dc.SelectObject(brush.Handle);
            
                        dc.PaintRectangle(new Rectangle(0, 0, 100, 100));
            
                        dc.SelectObject(defaultPenHandle);
                        dc.SelectObject(defaultBrushHandle);
                    }
                }
               </code>
             </example>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DeleteObject(System.IntPtr)">
            <summary>
              Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object.
              After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="gdiObjectHandle">
              Handle to a logical pen, brush, font, bitmap, region, or palette.
            </param>
            <remarks>
              Do not delete a drawing object (pen or brush) while it is still selected into a DC.
              When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException">
              If the specified handle is not valid or is currently selected into a DC, it would throw a <see cref="T:C1.Framework.SystemErrorException"/>.
            </exception>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.BackgroundColor">
            <summary>
              Gets or sets the color of the background of the device context.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Color"/> structure that indicates the color of the background of the device context.
            </value>
            <remarks>
            <para>
              If the background mode is <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.BackgroundMode"/> is <see cref="F:C1.Framework.Drawing.Gdi.DeviceContexts.BackgroundMode.Opaque"/>, 
              the background color is used to fill gaps between styled lines, gaps between hatched lines in brushes, and
              character cells. The background color is also used when converting bitmaps from color to monochrome and vice versa. 
            </para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetBackgroundColor(System.Drawing.Color)">
            <summary>
              Sets the color of the background of the device context.
            </summary>
            <value>
              Returns the previous color of the background of the device context.
            </value>
            <para>
              If the background mode is <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.BackgroundMode"/> is <see cref="F:C1.Framework.Drawing.Gdi.DeviceContexts.BackgroundMode.Opaque"/>, 
              the background color is used to fill gaps between styled lines, gaps between hatched lines in brushes, and
              character cells. The background color is also used when converting bitmaps from color to monochrome and vice versa. 
            </para>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.ForegroundColor">
            <summary>
              Gets or sets the color of the foreground of the device context.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Color"/> structure that indicates the color of the foreground of the device context.
            </value>
            <remarks>
              The <b>Color</b> is used to draw the face of each character written by the <b>TextOut</b> and <b>ExtTextOut</b> functions.
              The <b>Color</b> is also used in converting bitmaps from color to monochrome and vice versa. 
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetForegroundColor(System.Drawing.Color)">
            <summary>
              Sets the color of the foreground of the device context.
            </summary>
            <value>
              Returns the previous color of the foreground of the device context.
            </value>
            <remarks>
              The <b>Color</b> is used to draw the face of each character written by the <b>TextOut</b> and <b>ExtTextOut</b> functions.
              The <b>Color</b> is also used in converting bitmaps from color to monochrome and vice versa. 
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.BackgroundMode">
            <summary>
              Gets or sets the background mode of the device context.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.BackgroundMode"/> structure that indicates the background mode of the device context.
            </value>
            <remarks>
            <para>
              The <b>BackgroundMode</b> affects the line styles for lines drawn using a pen created
              by the <b>CreatePen</b> GDI API function. The <b>BackgroundMode</b> does not affect lines drawn using a pen created
              by the <b>ExtCreatePen</b> GDI API function.
            </para>
            <para>
              <c>value</c> parameter can also be set to driver-specific values. 
              GDI passes such values to the device driver and otherwise ignores them.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetBackgroundMode(C1.Framework.Drawing.Gdi.DeviceContexts.BackgroundMode)">
            <summary>
              Sets the background mode of the device context.
            </summary>
            <value>
              Returns the previous foreground mode of the device context.
            </value>
            <remarks>
            <para>
              The <b>BackgroundMode</b> affects the line styles for lines drawn using a pen created
              by the <b>CreatePen</b> GDI API function. The <b>BackgroundMode</b> does not affect lines drawn using a pen created
              by the <b>ExtCreatePen</b> GDI API function.
            </para>
            <para>
              <c>backgroundMode</c> parameter can also be set to driver-specific values. 
              GDI passes such values to the device driver and otherwise ignores them.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Save">
            <summary>
              Saves the current state of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object and 
              identifies the saved state with a handle.
            </summary>
            <returns>
              This methods returns a <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState"/> state that saves current state of this
              <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Restore(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState)">
            <summary>
              Restores the state of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to the 
              state represented by a handle.
            </summary>
            <param name="state">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContextState"/> that represents the state to which to restore this
              <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.CircumDirection">
            <summary>
              Gets or sets the drawing direction of the circle shapes.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.CircumDirection"/> indicates the circum-direction.
            </value>
            <remarks>
              The default direction is <see cref="F:C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection.Counterclockwise"/>. 
              The <b>CircumDirection</b> function specifies the direction in which the following functions draw:
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Point,System.UInt32,System.Single,System.Single)"/>,
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintChord(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintEllipse(System.Drawing.Rectangle)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintPie(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRectangle(System.Drawing.Rectangle)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GetCircleDirection">
            <summary>
              Gets the drawing direction of the circle shapes.
            </summary>
            <returns>
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.CircumDirection"/> indicates the circum-direction.
            </returns>
            <remarks>
              The default direction is <see cref="F:C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection.Counterclockwise"/>. 
              The SetCircumDirection function specifies the direction in which the following functions draw:
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Point,System.UInt32,System.Single,System.Single)"/>,
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintChord(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintEllipse(System.Drawing.Rectangle)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintPie(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRectangle(System.Drawing.Rectangle)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetCircumDirection(C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection)">
            <summary>
              Sets the drawing direction of the circle shapes.
            </summary>
            <param name="circumDirection">
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.CircumDirection"/> indicates the circum-direction.
            </param>
            <returns>
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.CircumDirection"/> indicates the previous circum-direction.
            </returns>
            <remarks>
              The default direction is <see cref="F:C1.Framework.Drawing.Gdi.DeviceContexts.CircumDirection.Counterclockwise"/>. 
              The SetCircumDirection function specifies the direction in which the following functions draw:
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Point,System.UInt32,System.Single,System.Single)"/>,
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintChord(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintEllipse(System.Drawing.Rectangle)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintPie(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRectangle(System.Drawing.Rectangle)"/>
              <see cref="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.RasterOperationCode">
            <summary>
              Get or set the current foreground mix mode.GDI uses the foreground mix mode to combine pens and interiors of filled
              objects with the colors already on the screen. The foreground mix mode defines how colors from the brush or pen
              and the colors in the existing image are to be combined.
            </summary>
            <value>
              Specifies the mix mode. This parameter can be one of the following values.
            </value>
            <remarks>
              Mix modes define how GDI combines source and destination colors when drawing with the current pen.
              The mix modes are binary raster operation codes, representing all possible Boolean functions of two variables,
              using the binary operations AND, OR, and XOR (exclusive OR), and the unary operation NOT. The mix mode is for
              raster devices only; it is not available for vector devices. 
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GetRasterOperationCode">
            <summary>
              retrieves the foreground mix mode of the specified device context. The mix mode specifies how the pen or interior
              color and the color already on the screen are combined to yield a new color. 
            </summary>
            <returns>
              If the function succeeds, the return value specifies the foreground mix mode. otherwise zero indicates failed.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetRasterOperationCode(C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode)">
            <summary>
              Sets the current foreground mix mode. GDI uses the foreground mix mode to combine pens and interiors of filled
              objects with the colors already on the screen. The foreground mix mode defines how colors from the brush or pen
              and the colors in the existing image are to be combined. 
            </summary>
            <param name="rasterOperationCode">
              Specifies the mix mode. This parameter can be one of the following values.
            </param>
            <returns>
              If the function succeeds, the return value specifies the previous mix mode. otherwise, zero indicates failed
            </returns>
            <remarks>
              Mix modes define how GDI combines source and destination colors when drawing with the current pen.
              The mix modes are binary raster operation codes, representing all possible Boolean functions of two variables,
              using the binary operations AND, OR, and XOR (exclusive OR), and the unary operation NOT. The mix mode is for
              raster devices only; it is not available for vector devices. 
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Point,System.UInt32,System.Single,System.Single)">
            <summary>
              Draws a line segment and an arc. 
              The line segment is drawn from the position which is defined by <c>radius</c> and <c>startAngle</c>. 
              The arc is drawn along the perimeter of a circle with the given radius and center. 
              The length of the arc is defined by the given start and sweep angles.  
            </summary>
            <param name="origin">
              A <see cref="T:System.Drawing.Point"/> specifies the center of the circle. 
            </param>
            <param name="radius">
              A <b>uint</b> specifies the radius of the circle. This value must be positive.
            </param>
            <param name="startAngle">
              A <b>float</b> specifies the start angle, in degrees. 
            </param>
            <param name="sweepAngle">
              A <b>float</b> specifies the sweep angle, in degrees, relative to the starting angle.
            </param>
            <remarks>
              The arc is drawn by constructing an imaginary circle around the specified center point with the specified radius.
              The starting point of the arc is determined by measuring counterclockwise from the x-axis of the circle
              by the number of degrees in the start angle. The ending point is similarly located by measuring counterclockwise
              from the starting point by the number of degrees in the sweep angle.
              If the sweep angle is greater than 360 degrees,the arc is swept multiple times.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawArc(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws an elliptical arc. 
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> specifies the bounding rectangle.
            </param>
            <param name="firstRadial">
              A <see cref="T:System.Drawing.Point"/> specifies the ending point of the radial line defining the starting point of the arc.
            </param>
            <param name="secondRadial">
              A <see cref="T:System.Drawing.Point"/> specifies the ending point of the radial line defining the ending point of the arc.
            </param>
            <remarks>
              The <c>rectangle</c> specify the bounding rectangle. An ellipse formed by the specified bounding rectangle
              defines the curve of the arc. The arc extends in the current drawing direction from the point where it intersects
              the radial from the center of the bounding rectangle to the <c>firstRadial</c> point. The arc ends where
              it intersects the radial from the center of the bounding rectangle to the <c>secondRadial</c> point.
              If the starting point and ending point are the same, a complete ellipse is drawn. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawLine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws the special line by using the current pen of the device context.
            </summary>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line start point
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawPolyLine(System.Drawing.Point[])">
            <summary>
              Draws a series of line segments by connecting the points in the specified array.
            </summary>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> array indicates the line segments.
            </param>
            <remarks>
            <para>
              The lines are drawn from the first point through subsequent points by using the current pen.
              <b>Windows 95/98/Me</b>: DrawPolyLine cannot draw more than a certain number of points.
              The limit depends on the line width (that is, the width of the pen selected into the DC)
            
              <b>Line width</b>                                                 <b>Maximum points allowed</b>
              line width is 1                                                   16K
              line width > 1 (that is, wideline) and device supports wideline   16K
              line width > 1 but device does not support wideline               approximately 1360 (that is, approximately 16K/12)
            </para>
            <para>
              Any extra points are ignored. To draw a line with more points, divide the data into groups
              that have less than the maximum number of points and call the function for each group of points.
              Remember to connect the line segments.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawPolyBezier(System.Drawing.Point[])">
            <summary>
              Draws one or more Bezier curves.
            </summary>
            <param name="points">
              An array of <see cref="T:System.Drawing.Point"/>structures that contain the endpoints and control points of the curve(s).
              This value must be one more than three times the number of curves to be drawn,
              because each Bzier curve requires two control points and an endpoint,
              and the initial curve requires an additional starting point. 
            </param>
            <remarks>
            <para>
              DrawPolyBezier draws cubic Bzier curves by using the endpoints and control points specified by the <c>points</c> parameter.
              The first curve is drawn from the first point to the fourth point by using the second and third points
              as control points. Each subsequent curve in the sequence needs exactly three more points: the ending point of
              the previous curve is used as the starting point, the next two points in the sequence are control points,
              and the third is the ending point.
            </para>
            <para>
              The lines are drawn from the first point through subsequent points by using the current pen.
              <b>Windows 95/98/Me</b>: DrawPolyBezier cannot draw more than a certain number of points.
              The limit depends on the line width (that is, the width of the pen selected into the DC)
            
              <b>Line width</b>                                                 <b>Maximum points allowed</b>
              line width is 1                                                   16K
              line width > 1 (that is, wideline) and device supports wideline   16K
              line width > 1 but device does not support wideline               approximately 1360 (that is, approximately 16K/12)
            </para>
            <para>
              Any extra points are ignored. To draw a line with more points, divide the data into groups
              that have less than the maximum number of points and call the function for each group of points.
              Remember to connect the line segments.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.FillRectangle(System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean)">
            <summary>
              Gradient fills the rectangle with colors.
            </summary>
            <param name="startColor">
              <see cref="T:System.Drawing.Color"/> structure that represents the start color 
              of gradient.
            </param>
            <param name="endColor">
              <see cref="T:System.Drawing.Color"/> structure that represents the end color of 
              gradient.
            </param>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle 
              to fill.
            </param>
            <param name="verticalDirection">
              A <b>bool</b> indicates the fill direction. 
              <b>false</b> is horizontal direction. <b>true</b> is vertical direction.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.FillTriangle(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Gradient fills the triangle with specified colors.
            </summary>
            <param name="color1">
              A <see cref="T:System.Drawing.Color"/> indicates the color of the vertex1.
            </param>
            <param name="color2">
              A <see cref="T:System.Drawing.Color"/> indicates the color of the vertex2.
            </param>
            <param name="color3">
              A <see cref="T:System.Drawing.Color"/> indicates the color of the vertex3.
            </param>
            <param name="vertex1">
              A <see cref="T:System.Drawing.Point"/> indicates the vertex1 of triangle.
            </param>
            <param name="vertex2">
              A <see cref="T:System.Drawing.Point"/> indicates the vertex2 of triangle.
            </param>
            <param name="vertex3">
              A <see cref="T:System.Drawing.Point"/> indicates the vertex3 of triangle.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.FillRectangle(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
              Fills the specified rectangle by using the specified brush.
            </summary>
            <param name="brushHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of the brush.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to fill.
            </param>
            <remarks>
              When filling the specified rectangle, it does not include the rectangle's right and bottom sides. GDI fills
              a rectangle up to, but not including, the right column and bottom row, regardless of the current mapping mode. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.FillRectangle(System.Drawing.Rectangle,C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode)">
            <summary>
              Fills the specified rectangle by using the current brush of device context.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the rectangle to fill.
            </param>
            <param name="rasterOperationCode">
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.RasterOperationCode"/> indicates the rester operation code.
            </param>
            <remarks>
              Not all devices support the this function. For more information, see the description of
              the <b>RC_BITBLT</b> capability in the <b>GetDeviceCaps</b> function.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.FillRegion(System.IntPtr,System.IntPtr)">
            <summary>
              Fills the region by the specified brush.
            </summary>
            <param name="brushHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of the brush.
            </param>
            <param name="regionHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of the region.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.FillRegionFrame(System.IntPtr,System.IntPtr,System.Drawing.Size)">
            <summary>
              Draws a border around the specified region by using the specified brush.
            </summary>
            <param name="brushHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of the brush.
            </param>
            <param name="regionHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of the region.
            </param>
            <param name="strokeSize">
              A <see cref="T:System.Drawing.Size"/> that specifies the width of vertical brush strokes and 
              the height of the horizontal brush strokes.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintChord(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Paints a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant). 
              The chord is outlined by using the current pen and filled by using the current brush. 
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounds of the ellipse.
            </param>
            <param name="firstRadial">
              A <see cref="T:System.Drawing.Point"/> indicates the endpoint of the first radial.
            </param>
            <param name="secondRadial">
              A <see cref="T:System.Drawing.Point"/> indicates the endpoint of the second radial.
            </param>
            <remarks>
            <para>
              The curve of the chord is defined by an ellipse that fits the specified bounding rectangle.
              The curve begins at the point where the ellipse intersects the first radial and extends counterclockwise to
              the point where the ellipse intersects the second radial. The chord is closed by drawing a line from
              the intersection of the first radial and the curve to the intersection of the second radial and the curve. 
            </para>
            <para>
              If the starting point and ending point of the curve are the same, a complete ellipse is drawn.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintEllipse(System.Drawing.Rectangle)">
            <summary>
              Paints an ellipse.
              The center of the ellipse is the center of the specified bounding rectangle. 
              The ellipse is outlined by using the current pen and is filled by using the current brush. 
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle.
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintPie(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Paints a pie-shaped wedge bounded by the intersection of an ellipse and two radials. 
              The pie is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounds of the ellipse.
            </param>
            <param name="firstRadial">
              A <see cref="T:System.Drawing.Point"/> indicates the endpoint of the first radial.
            </param>
            <param name="secondRadial">
              A <see cref="T:System.Drawing.Point"/> indicates the endpoint of the second radial.
            </param>
            <remarks>
              The curve of the pie is defined by an ellipse that fits the specified bounding rectangle.
              The curve begins at the point where the ellipse intersects the first radial and extends counterclockwise to
              the point where the ellipse intersects the second radial. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintPolygon(System.Drawing.Point[])">
            <summary>
              Paints a polygon consisting of two or more vertices connected by straight lines. 
              The polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode.
            </summary>
            <param name="vertices">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
            <remarks>
            <para>
              The polygon is closed automatically by drawing a line from the last vertex to the first. 
            </para>
            <para>
              <b>Windows 95/98/Me</b>: PaintPolygon cannot draw more than a certain number of points.
              The limit depends on the line width (that is, the width of the pen selected into the DC)
            
              <b>Line width</b>                                                 <b>Maximum points allowed</b>
              line width is 1                                                   16K
              line width > 1 (that is, wideline) and device supports wideline   16K
              line width > 1 but device does not support wideline               approximately 1360 (that is, approximately 16K/12)
            </para>
            <para>
              Any extra points are ignored. To draw a line with more points, divide the data into groups
              that have less than the maximum number of points and call the function for each group of points.
              Remember to connect the line segments.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRectangle(System.Drawing.Rectangle)">
            <summary>
              Draw the special rectangle by using the current pen of the device context and fill the rectangle by using 
              the current brush of the device context.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to paint.
            </param>
            <remarks>
              The rectangle that is drawn excludes the bottom and right edges.
              If a <see cref="T:C1.Framework.Drawing.Gdi.HollowPen"/> is used, the dimensions of the rectangle are 1 pixel less in height and 1 pixel less in width.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PaintRoundRectangle(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
              Paints a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using 
              the current brush. 
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the rectangle to paint.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the ellipse used to draw the rounded corners.
            </param>
            <param name="height">
              An <b>int</b> indicates the height of the ellipse used to draw the rounded corners.
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Copy(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Drawing.Point,C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode)">
            <summary>
              Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from 
              the specified source <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object into a destination <b>DeviceContext</b> object.
            </summary>
            <param name="deviceContext">
              The source <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object.
            </param>
            <param name="destRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the destination rectangle.
            </param>
            <param name="srcPoint">
              A <see cref="T:System.Drawing.Point"/> indicates the upper-left corner of source rectangle. 
              The width and height of source rectangle are same as the destination rectangle.
            </param>
            <param name="rop">
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.RasterOperationCode"/> indicates the raster operation code.
            </param>
            <remarks>
            <para>
              Copy only does clipping on the destination DC.
            </para>
            <para>
              If a rotation or shear transformation is in effect in the source device context, Copy will throw
              a <see cref="T:C1.Framework.SystemErrorException"/>. If other transformations exist in the source device context (and a matching
              transformation is not in effect in the destination device context), the rectangle in the destination device context
              is stretched, compressed, or rotated, as necessary. 
            </para>
            <para>
              If the color formats of the source and destination device contexts do not match, the Copy function converts
              the source color format to match the destination format. 
            </para>
            <para>
              When an enhanced metafile is being recorded, an error occurs if the source device context identifies
              an enhanced-metafile device context. it means a <see cref="T:C1.Framework.SystemErrorException"/> would be throw out.
            </para>
            <para>
              Not all devices support the Copy function. For more information, see the <b>RC_BITBLT</b> raster capability entry
              in the <b>GetDeviceCaps</b> function as well as the following: <B>MaskBlt</B>, <b>PlgBlt</b>, and <b>StretchBlt</b>.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Copy(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Drawing.Rectangle,C1.Framework.Drawing.Gdi.DeviceContexts.RasterOperationCode)">
            <summary>
              Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from 
              the specified source <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object into a destination <b>DeviceContext</b> object.
            </summary>
            <param name="deviceContext">
              The source <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object.
            </param>
            <param name="srcRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the source rectangle.
            </param>
            <param name="destRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the destination rectangle.
            </param>
            <param name="rop">
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.RasterOperationCode"/> indicates the raster operation code.
            </param>
            <remarks>
            <para>
              Copy only does clipping on the destination DC.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.AlphaBlend(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
              Displays bitmaps that have transparent or semitransparent pixels.
            </summary>
            <param name="deviceContext">
              The source <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object.
            </param>
            <param name="destRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the destination rectangle.
            </param>
            <param name="srcRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the source rectangle.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.AlphaBlend(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Byte)">
            <summary>
              Displays bitmaps with a constant transparent value.
            </summary>
            <param name="deviceContext">
              The source <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> object.
            </param>
            <param name="destRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the destination rectangle.
            </param>
            <param name="srcRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the source rectangle.
            </param>
            <param name="srcConstantAlpha">
              A <b>byte</b> indicates the constant alpha value of source.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.InvertRectangle(System.Drawing.Rectangle)">
            <summary>
              Inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel 
              in the rectangle's interior. 
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Point"/>structure that contains the logical coordinates of the rectangle to be inverted.
            </param>
            <remarks>
              On monochrome screens, InvertRectangle makes white pixels black and black pixels white. On color screens, 
              the inversion depends on how colors are generated for the screen. Calling InvertRectangle twice
              for the same rectangle restores the display to its previous colors. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.InvertRegion(System.IntPtr)">
            <summary>
              Inverts the colors in the specified region.
            </summary>
            <param name="regionHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of the region.
            </param>
            <remarks>
              On monochrome screens, the InvertRegion function makes white pixels black and black pixels white.
              On color screens, this inversion is dependent on the type of technology used to generate the colors for the screen.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GetPixel(System.Drawing.Point)">
            <summary>
              retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates.
            </summary>
            <param name="point">
              Specifies the coordinate, in logical units, of the pixel to be examined. 
            </param>
            <returns>
              The return value is the RGB value of the pixel. If the pixel is outside of the current clipping region, 
              the return value is Color.Empty. 
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetPixel(System.Drawing.Color,System.Drawing.Point)">
            <summary>
              Sets the pixel at the specified coordinates to the closest approximation of the specified color. 
              The point must be in the clipping region and the visible part of the device surface. 
            </summary>
            <param name="color">
              Specifies the color to be used to paint the point.
            </param>
            <param name="point">
              Specifies the coordinate, in logical units, of the point to be set.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.ClippingRegion">
            <summary>
              Gets or sets the handle of the current clipping region of the device context. 
            </summary>
            <value>
              A <see cref="T:System.IntPtr"/> that indicates the handle of the clipping region.
            </value>
            <remarks>
              <para>
              Note: 
                [Get] The getting region is a copy of the current region.
                [Set] Only a copy of the setting region is used. The region itself can be seted 
                for any number of other device contexts or it can be deleted.
              </para>
              <para>
                To remove a device-context's clipping region, specify a IntPtr.Zero region handle.
              </para>
              <para>
                The coordinate of region will not be effected by current origin of page space.
              </para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetClippingRegion(System.IntPtr,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Combines the specified region with the current clipping region using the specified mode. 
            </summary>
            <param name="regionHandle">
              A <see cref="T:System.IntPtr"/> that indicates handle to the region to be selected. 
              This handle can only be IntPtr.Zero when the CombineMode.Replace mode is specified
            </param>
            <param name="combineMode">
              A <see cref="T:System.Drawing.Drawing2D.CombineMode"/> that indicates the combine mode. 
            </param>
            <remarks>
              The coordinate of region will not be effected by current origin of page space.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TranslateClippingRegion(System.Int32,System.Int32)">
            <summary>
              Moves the clipping region of a device context by the specified offsets.
            </summary>
            <param name="dx">
              Specifies the number of logical units to move left or right.
            </param>
            <param name="dy">
              Specifies the number of logical units to move up or down.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.Clip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Clips the device context by the specified rectangle and operation mode.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the rectangle.
            </param>
            <param name="clippingMode">
              A <see cref="T:System.Drawing.Drawing2D.CombineMode"/> indicates operation mode.
            </param>
            <remarks>
              The coordinate of rectangle is base one the space page.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.InnerSetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Clips the device context by the specified rectangle and operation mode.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the rectangle.
            </param>
            <param name="clippingMode">
              A <see cref="T:System.Drawing.Drawing2D.CombineMode"/> indicates operation mode.
            </param>
            <remarks>
              The coordinate of rectangle is base one the space page.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GetClippingBox">
            <summary>
              Retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current 
              visible area on the device. The visible area is defined by the current clipping region or clip 
              path, as well as any overlapping windows.
            </summary>
            <returns>
              A <see cref="T:System.Drawing.Rectangle"/> indicates the dimensions, in logical units.
            </returns>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GraphicsMode">
            <summary>
              Gets or sets a <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GraphicsMode"/> indicating whether use the world transform in this DC.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.GraphicsMode"/> indicates the graphics mode.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.WorldTransform">
            <summary>
              Gets or sets the world transform.
            </summary>
            <value>
              <para>
                An array of <b>float</b> that includes six elements. 
              </para>
              <code>
              | M11,  M12,  0 |
              | M21,  M22,  0 |
              | Dx,   Dy,   1 |
              </code>
               <para>
                The order is [M11, M12, M21, M22, Dx, Dy].
               </para>  
            </value>
            <remarks>
              Notes: The length of the array must be six.
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.WindowExtent">
            <summary>
              Gets or sets the x-extent and y-extent of the current window for the device context.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Size"/> indicates the x-extent and y-extent of the current window for the device context.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.WindowOrigin">
            <summary>
              Gets or sets the x-coordinates and y-coordinates of the window origin for the device context
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> indicates the x-coordinates and y-coordinates of the window origin for the device context.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TranslateWindow(System.Int32,System.Int32)">
            <summary>
              Modifies the window origin for a device context using the specified horizontal and vertical offsets. 
            </summary>
            <param name="dx">
              An <b>int</b> specifies the horizontal offset. 
            </param>
            <param name="dy">
              An <b>int</b> specifies the vertical offset. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.ScaleWindow(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors. 
            </summary>
            <param name="numX">
              A <b>int</b> specifies the amount by which to multiply the current horizontal extent.
            </param>
            <param name="denomX">
              A <b>int</b> specifies the amount by which to divide the current horizontal extent. 
            </param>
            <param name="numY">
              A <b>int</b> specifies the amount by which to multiply the current vertical extent.
            </param>
            <param name="denomY">
              A <b>int</b> specifies the amount by which to divide the current vertical extent.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.MappingMode">
            <summary>
              Gets or sets the mapping mode of the device context.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.MappingMode"/> indicates the value of the mapping mode.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.ViewportExtent">
            <summary>
              Gets or sets the x-extent and y-extent of the current viewport for the device context.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Size"/> indicates the x-extent and y-extent of the current viewport for the device context.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.ViewportOrigin">
            <summary>
              Gets or sets the x-coordinates and y-coordinates of the viewport origin for the device context
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> indicates the x-coordinates and y-coordinates of the viewport origin for the device context.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TranslateViewport(System.Int32,System.Int32)">
            <summary>
              Modifies the viewport origin for a device context using the specified horizontal and vertical offsets. 
            </summary>
            <param name="dx">
              An <b>int</b> specifies the horizontal offset. 
            </param>
            <param name="dy">
              An <b>int</b> specifies the vertical offset. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.ScaleViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Modifies the viewport for a device context using the ratios formed by the specified multiplicands and divisors. 
            </summary>
            <param name="numX">
              A <b>int</b> specifies the amount by which to multiply the current horizontal extent.
            </param>
            <param name="denomX">
              A <b>int</b> specifies the amount by which to divide the current horizontal extent. 
            </param>
            <param name="numY">
              A <b>int</b> specifies the amount by which to multiply the current vertical extent.
            </param>
            <param name="denomY">
              A <b>int</b> specifies the amount by which to divide the current vertical extent.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PixelsPerInchX">
            <summary>
              Gets the number of pixels per logical inch along the screen width. 
              In a system with multiple display monitors, this value is the same for all monitors.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PixelsPerInchY">
            <summary>
              Gets the number of pixels per logical inch along the screen height. 
              In a system with multiple display monitors, this value is the same for all monitors.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PointLogicalToDevice(System.Drawing.Point[])">
            <summary>
              converts logical coordinates into device coordinates. The conversion depends on the mapping mode of the device
              context, the settings of the origins and extents for the window and viewport, and the world transformation. 
            </summary>
            <param name="logicalPoints">
              An <b>array</b> of <see cref="T:System.Drawing.Point"/> structures.
              The x- and y-coordinates contained in each <see cref="T:System.Drawing.Point"/> structure will be transformed.
            </param>
            <returns>
              An <b>array</b> of <see cref="T:System.Drawing.Point"/> structures indicate the point which is converted to Device coordinates
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.PointDeviceToLogical(System.Drawing.Point[])">
            <summary>
              converts device coordinates into logical coordinates. The conversion depends on the mapping mode of the device
              context, the settings of the origins and extents for the window and viewport, and the world transformation. 
            </summary>
            <param name="devicePoints">
              An <b>array</b> of <see cref="T:System.Drawing.Point"/> structures.
              The x- and y-coordinates contained in each <see cref="T:System.Drawing.Point"/> structure will be transformed.
            </param>
            <returns>
              An <b>array</b> of <see cref="T:System.Drawing.Point"/> structures indicate the point which is converted to Logical coordinates
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.HorizontalSize">
            <summary>
              Width, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.HorizontalResters">
            <summary>
              Width, in pixels, of the screen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.VerticalSize">
            <summary>
              Height, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.VerticalResters">
            <summary>
              Height, in raster lines, of the screen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TextAlign">
            <summary>
              Gets or sets the text-alignment flags for this device context. 
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment"/> that specifies the text alignment.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetTextAlign(C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment)">
            <summary>
              Sets the text-alignment flags for this device context. 
            </summary>
            <param name="textAlignment">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment"/> that specifies the new text alignment.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.TextAlignment"/> that specifies the previous text alignment.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TextOut(System.String,System.Drawing.Point)">
            <summary>
              Writes a character string at the specified location, using the currently selected 
              font, background color, and text color. 
            </summary>
            <param name="text">
              A <b>string</b> that saves the characters to be written.
            </param>        
            <param name="position">
              A <see cref="T:System.Drawing.Point"/> that indicates the reference point that the system uses to align the string. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TextExtent(System.String)">
            <summary>
              Computes the width and height of the specified string of text.
            </summary>
            <param name="text">
              A <b>string</b> that saves a character string to be computed.
            </param>
            <returns>
              If the function succeeds, the return value is the dimensions of the string in logical units.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TextExtentEx(System.String,System.Int32,System.Int32@,System.Int32[])">
            <summary>
              Retrieves the number of characters in a specified string that will fit within a specified space and 
              fills an array with the text extent for each of those characters.
            </summary>
            <param name="text">
              A string for which extents are to be retrieved. 
            </param>
            <param name="maxExtent">
              Specifies the maximum allowable width, in logical units, of the formatted string.
            </param>
            <param name="fitCharNumber">
              Receives a count of the maximum number of characters that will fit in the space specified by the 
              maxExtent parameter.
            </param>
            <param name="fitExtents">
              Pointer to an array of integers that receives partial string extents. 
              Each element in the array gives the distance, in logical units, between the beginning of the string 
              and one of the characters that fits in the space specified by the maxExtent parameter.
              This array must have at least as many elements as character count in text. The function fills the 
              array with valid extents for as many characters as are specified by the fitCharNumber parameter.
            </param>
            <returns>
              Receives the dimensions of the string, in logical units.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TabbedTextOut(System.String,System.Drawing.Point,System.Int32[],System.Int32)">
            <summary>
              Writes a character string at a specified location, expanding tabs to the values specified in an array of 
              tab-stop positions. Text is written in the currently selected font, background color, and text color. 
            </summary>
            <param name="text">
              A <b>string</b> that saves the characters to be written.
            </param>        
            <param name="position">
              A <see cref="T:System.Drawing.Point"/> that indicates the reference point that the system uses to align the string. 
            </param>
            <param name="tabStopPositions">
              Pointer to an array containing the tab-stop positions. The tab stops must be sorted in increasing order;
              the smallest x-value should be the first item in the array. If this parameter is null, tabs are expanded 
              to eight times the average character width.
            </param>        
            <param name="tabOrigin">
              Specifies the x-coordinate of the starting position from which tabs are expanded.
            </param>
            <returns>
              Returns the dimensions, of the string.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TabbedTextExtent(System.String,System.Int32[],System.Drawing.Size@)">
            <summary>
              The TabbedTextExtent method computes the width and height of a character string.If the string contains 
              one or more tab characters, the width of the string is based upon the specified tab stops. 
              The TabbedTextExtent method uses the currently selected font to compute the dimensions of the string. 
            </summary>
            <param name="text">
              A <b>string</b> that saves a character string to be computed.
            </param>
            <param name="tabStopPositions">
              An array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; 
              the smallest x-value should be the first item in the array. 
            </param>
            <param name="size">
              If the function succeeds, the value is the dimensions of the string in logical units. 
              Else the value is Size.Empty.
            </param>
            <returns>
              Retrun a value indictaes whether this function succeed or not.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TabbedTextExtent(System.String,System.Int32[])">
            <summary>
              The TabbedTextExtent method computes the width and height of a character string.If the string contains 
              one or more tab characters, the width of the string is based upon the specified tab stops. 
              The TabbedTextExtent method uses the currently selected font to compute the dimensions of the string. 
            </summary>
            <param name="text">
              A <b>string</b> that saves a character string to be computed.
            </param>
            <param name="tabStopPositions">
              An array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; 
              the smallest x-value should be the first item in the array. 
            </param>
            <returns>
              If the function succeeds, the return value is the dimensions of the string in logical units.
            </returns>
              Ted changed this function's modifier as private in 2007.07.14,
              And provide a new interface fucntion.
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetTextJustification(System.Int32,System.Int32)">
            <summary>
              Specifies the amount of space the system should add to the break characters in a string of text. 
              The space is added when an application calls the TextOut method.
            </summary>
            <param name="breakExtra">
              Specifies the total extra space, in logical units, to be added to the line of text.
            </param>
            <param name="breakCount">
              Specifies the number of break characters in the line.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.TextCharacterExtra">
            <summary>
              Gets or sets the current intercharacter spacing for the device context. 
            </summary>
            <value>
              Specifies the amount of extra space to be added to each character.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.SetTextCharacterExtra(System.Int32)">
            <summary>
              Sets the current intercharacter spacing for the device context.
            </summary>
            <param name="charExtra">
              Specifies the amount of extra space to be added to each character. 
            </param>
            <returns>
              Returns the previous intercharacter spacing.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.DrawText(System.String,System.Drawing.Rectangle,C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat)">
            <summary>
              Draws formatted text in the specified rectangle.
            </summary>
            <param name="text">
              The string that specifies the text to be drawn. 
            </param>        
            <param name="rectangle">
              Contains the rectangle in which the text is to be formatted. 
            </param>
            <param name="format">
              Specifies the method of formatting the text.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext.MeasureText(System.String,System.Drawing.Size,C1.Framework.Drawing.Gdi.DeviceContexts.TextFormat)">
            <summary>
              Draws formatted text in the specified rectangle.
            </summary>
            <param name="text">
              The string that specifies the text to be drawn. 
            </param>        
            <param name="proposedSize">
              Contains the proposed size in which the text is to be formatted. 
            </param>
            <param name="format">
              Specifies the method of formatting the text.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.RawDeviceContext">
            <summary>
              Represents a wrapper of the gid device context handle. 
            </summary>
            <remarks>
              The handle will not be released when RawDeviceContext is disposed.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.RawDeviceContext.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.RawDeviceContext"/> class.
            </summary>
            <param name="handle">
              An <see cref="T:System.IntPtr"/> that indicates the handle of the device context.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.RawDeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>RawDeviceContext</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext">
            <summary>
              Represents a gdi device context that created by gdi+ Graphics.
            </summary>
            <remarks>
              The Graphics will be locked, until the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext"/> is disposed.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext._gdiplusGraphics">
            <summary>
              Saves the gdi+ graphics.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext.GdiplusGraphics">
            <summary>
              Gets the local cached Gdiplus <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext.#ctor(System.Drawing.Graphics)">
            <summary>
              Initializes a new instance of <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext"/> class.
            </summary>
            <param name="gdiplusGraphics">
              A <see cref="T:System.Drawing.Graphics"/> indicates the gdi+ graphics.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.GdiplusGraphicDeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiplusGraphicDeviceContext</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.WindowDeviceContext">
            <summary>
              Represents a gdi device context coming directly from a window.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.WindowDeviceContext._windowHandle">
            <summary>
              Saves the window handle.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.WindowDeviceContext.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.WindowDeviceContext"/> class.
            </summary>
            <param name="windowHandle">
              A <see cref="T:System.IntPtr"/> indicates the handle of a window.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.WindowDeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>WindowDeviceContext</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.ControlDeviceContext">
            <summary>
              Represents a gdi device context coming directly from a control.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.ControlDeviceContext.#ctor(System.Windows.Forms.Control)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.ControlDeviceContext"/> class.
            </summary>
            <param name="control">
              A <see cref="T:System.Windows.Forms.Control"/> indicates the control.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.DesktopDeviceContext">
            <summary>
              Represents a gdi device context coming directly from the desktop.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DesktopDeviceContext.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.ControlDeviceContext"/> class.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.ImageDeviceContext">
            <summary>
              Represents a gdi device context coming directly from a gdi+ image.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DeviceContexts.ImageDeviceContext._image">
            <summary>
              Saves the local cache.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DeviceContexts.ImageDeviceContext.Image">
            <summary>
              Gets the local cached image.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.ImageDeviceContext.#ctor(System.Drawing.Image)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.ImageDeviceContext"/> class.
            </summary>
            <param name="image">
              A <see cref="T:System.Drawing.Image"/>indicates the gdi+ image.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.ImageDeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiplusGraphicDeviceContext</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.DummyDeviceContext">
            <summary>
              Represents a gdi device context that used as a dummy.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DummyDeviceContext.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DummyDeviceContext"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.DummyDeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiplusGraphicDeviceContext</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DeviceContexts.CompatibleDeviceContext">
            <summary>
              Represents a gdi device context coming directly another device context. 
              It has the same format as the another device context.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.CompatibleDeviceContext.#ctor(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.WindowDeviceContext"/> class.
            </summary>
            <param name="deviceContext">
              A <see cref="T:System.IntPtr"/> indicates the handle of a window.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DeviceContexts.CompatibleDeviceContext.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>WindowDeviceContext</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Font">
            <summary>
              Represents a GDI font object.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._defaultFont">
            <summary>
              Indicates the static default Gdi font.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.ControlDefault">
            <summary>
              Gets the default <see cref="T:C1.Framework.Drawing.Gdi.Font"/> of the control.
            </summary>
            <value>
              The default <see cref="T:C1.Framework.Drawing.Gdi.Font"/> of the control.
            </value>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._Dpis">
            <summary>
              Indicates the DPIs for 96DPI(Small font) or 120DPI(Big font).
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.DPIs">
            <summary>
              Gets the screen the DPIs for 96DPI(Small font) or 120DPI(Big font).
            </summary>
            <value>
              The DPIs of current <see cref="T:C1.Framework.Drawing.Gdi.Font"/>.
            </value>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._graphicsUnit">
            <summary>
              Indicates the graphics unit for converting between <see cref="T:C1.Framework.Drawing.Gdi.Font"/> and <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._fontStyle">
            <summary>
              A <see cref="T:System.Drawing.FontStyle"/>Indicates the <see cref="T:C1.Framework.Drawing.Gdi.Font"/> style.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._faceName">
            <summary>
              A <b>string</b> indicate the face name of the <see cref="T:C1.Framework.Drawing.Gdi.Font"/>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._charSet">
            <summary>
              A <b>byte</b> value that specifies the character set that this <see cref="T:C1.Framework.Drawing.Gdi.Font"/>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._height">
            <summary>
              An <b>int</b> indicate the height of this <see cref="T:C1.Framework.Drawing.Gdi.Font"/>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Font._metric">
            <summary>
              Saves the base information of this font.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.#ctor(C1.Framework.Drawing.Gdi.Font,System.Drawing.FontStyle)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object from the specified <b>Font</b> object and special style
            </summary>
            <param name="font">
              Special <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from which is used to create new font
            </param>
            <param name="style">
              A <see cref="T:System.Drawing.FontStyle"/> indicate the special style
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.#ctor(C1.Framework.Drawing.Gdi.Font,System.Single)">
             <summary>
               Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object from the specified <b>Font</b> object and special style
             </summary>
             <param name="font">
               Special <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from which is used to create new font
             </param>
             <param name="size">
               The size of the new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
             </param>
             <remarks>
             <para>
               this is used to create a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from template font which is given by parameter <b>Font</b>,
               the parameter <b>size</b> show you a chance to redefine the <see cref="P:C1.Framework.Drawing.Gdi.Font.Size"/>.
             </para>
             <para>
               if you want to zoom <see cref="P:C1.Framework.Drawing.Gdi.Font.Size"/>, you can get the size from your template font, and multiply it
               with the zoom factor you expected, which a new size you will got, for example named new size variable newSize,
               then use this constructor to create new <see cref="T:C1.Framework.Drawing.Gdi.Font"/>:
             <code>
               Font newFont = new Font(templateFont, newSize);
             </code>
             </para>
             <example>
               This is a simple WinForm program which draw two line text on special position of form.
               The first line, a string was drawed with winForm default font: Microsoft Sans Serif, 8.25pt,
               The second line, a sting was drawed with Font whic size is as twice as fiest line
             <code>
             public class TestForm : Form 
             {
                protected override void OnPaint(PaintEventArgs e)
                {
                  base.OnPaint(e);
            
                  IntPtr hDc = e.Graphics.GetHdc();
                  // create a font from default Form.Font (Microsoft Sans Serif, 8.25pt), size = 8.25
                  Gdi.Font font = new Gdi.Font(this.Font);
                  IntPtr oldFont = SelectObject(hDc, font.Handle);
                  string test1 = "1. This is drawing by GDI with GdiFont";
                  TextOut(hDc, 50, 50, test1, test1.Length);
                  SelectObject(hDc, oldFont);
            
                  // here I want to a font which size is as twice as current's
                  Drawing.Gdi.Font font2 = new Drawing.Gdi.Font(font, 2 * font.Size);
                  oldFont = SelectObject(hDc, font2.Handle);
                  string test2 = "2. This is drawing by GDI with GdiFont";
                  TextOut(hDc, 50, 100, test2, test2.Length);
                  font.Dispose();
                  font2.Dispose();
                  SelectObject(hDc, oldFont);
                  e.Graphics.ReleaseHdc(hDc);
                }
             
                [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
                public static extern IntPtr SelectObject(
                     IntPtr hdc,
                     IntPtr hObject
                     );
            
                [DllImport("gdi32.dll", EntryPoint = "TextOut")]
                public static extern int TextOut(
                     IntPtr hdc,
                     int x,
                     int y,
                     string lpString,
                     int nCount
                 );
             }
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.#ctor(System.String,System.Single)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object using the specified font attributes.
            </summary>
            <param name="fontName">
              A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </param>
            <param name="size">
              The size of the new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Byte)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object using the specified settings.
            </summary>
            <param name="fontName">
              A string representation of the <see cref="T:System.Drawing.FontFamily"/> object for the new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </param>
            <param name="size">
              The size of the new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </param>
            <param name="style">
              The <see cref="T:System.Drawing.FontStyle"/> enumeration to be applied to the new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object. 
            </param>
            <param name="charSet">
              A <b>Byte</b> that specifies a GDI character set to use for this font. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.#ctor(C1.Framework.Platform.NativeMethods.LOGFONT)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from a <see cref="T:C1.Framework.Platform.NativeMethods.LOGFONT"/>
            </summary>
            <param name="logFont">
              A <b>LOGFONT</b> indicate the font proerties
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Name">
            <summary>
              Gets the face name of this <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </summary>
            <value>
              A string representation of the face name of this <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Style">
            <summary>
              Gets style information for this <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </summary>
            <value>
              A <see cref="T:System.Drawing.FontStyle"/> indicate that contains style information for this <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Bold">
            <summary>
              Gets a value that indicates whether this <b>Font</b> object is bold.
            </summary>
            <value>
              This property returns <b>true</b> if this <b>Font</b> 
              object is bold; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Italic">
            <summary>
              Gets a value that indicates whether this <b>Font</b>
              object is italic.
            </summary>
            <value>
              This property returns <b>true</b> if this <b>Font</b> 
              object is italic; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Underline">
            <summary>
              Gets a value that indicates whether this <b>Font</b>
              object is underlined.
            </summary>
            <value>
              This property returns <b>true</b> if this <b>Font</b> 
              object is underlined; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Strikeout">
            <summary>
              Gets a value that indicates whether this <b>Font</b> object 
              specifies a horizontal line through the font.
            </summary>
            <value>
              This property is <b>true</b> if this <b>Font</b> object has 
              a horizontal line through it; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.CharSet">
            <summary>
              Gets a byte value that specifies the character set that this <b>Font</b> object uses.
            </summary>
            <value>
              A byte value that specifies the character set that this <b>Font</b> object uses.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Height">
            <summary>
              Gets the height of this <b>Font</b> object.
            </summary>
            <value>
              The height of this <b>Font</b> object in current graphics units.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Size">
            <summary>
              Gets the size, in points, of this <b>Font</b> object.
            </summary>
            <value>
              The size, in points, of this <b>Font</b> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Font.Metric">
            <summary>
              Gets basic information about this font. All sizes are specified in pixels.
            </summary>
            <value>
              The basic information about this font.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.Clone">
            <summary>
              Creates an exact copy of this <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </summary>
            <returns>
              The <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object that this method creates.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.Initialize(System.IntPtr)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from a existed font handle
            </summary>
            <param name="hFont">
              A font handle that defines to instance the <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.CreateFont(System.IntPtr,C1.Framework.Platform.NativeMethods.LOGFONT@)">
            <summary>
              Creates a <see cref="P:C1.Framework.Drawing.Gdi.GdiObject.Handle"/> from existed handle
            </summary>
            <param name="hFont">
              A <see cref="M:System.Drawing.Font.ToHfont">font handle</see> that defines to create the <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object. 
            </param>
            <param name="logFont">
              A <see cref="T:C1.Framework.Platform.NativeMethods.LOGFONT"/> contains the font information
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.FromGdiplusFont(System.Drawing.Font)">
            <summary>
              Creates a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object from the specified <see cref="T:System.Drawing.Font"/> object.
            </summary>
            <param name="gdiplusFont">
              The font is defined in .NET.
            </param>
            <remarks>
              This constructor creates a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> object from a Gdiplus <see cref="T:System.Drawing.Font"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Font.ToGdiplusFont(C1.Framework.Drawing.Gdi.Font)">
            <summary>
              Creates a GDI+ .NET <see cref="T:System.Drawing.Font"/> object from this object instance.
            </summary>
            <param name="font">
              A <see cref="T:C1.Framework.Drawing.Gdi.Font"/> indicate the Gdi Font
            </param>
            <returns>
              A <see cref="T:System.Drawing.Font"/> object that this method creates.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontMetric">
            <summary>
              Represents the basic information about a physical font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Height">
            <summary>
              Specifies the height (ascent + descent) of characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Ascent">
            <summary>
              Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Descent">
            <summary>
              Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.InternalLeading">
            <summary>
              Specifies the amount of leading (space) inside the bounds set by 
              the tmHeight member. Accent marks and other diacritical characters 
              may occur in this area. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.ExternalLeading">
            <summary>
              Specifies the amount of extra leading (space) that the application 
              adds between rows. Since this area is outside the font, it contains 
              no marks and is not altered by text output calls in either OPAQUE or 
              TRANSPARENT mode. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.AveCharWidth">
            <summary>
              Specifies the average width of characters in the font 
              (generally defined as the width of the letter x). This value 
              does not include the overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.MaxCharWidth">
            <summary>
              Specifies the width of the widest character in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Weight">
            <summary>
              Specifies the weight of the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Overhang">
            <summary>
              Specifies the extra width per string that may be added to 
              some synthesized fonts. When synthesizing some attributes, 
              such as bold or italic, graphics device interface (GDI) or 
              a device may have to add width to a string on both a 
              per-character and per-string basis.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.DigitizedAspectX">
            <summary>
              Specifies the horizontal aspect of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.DigitizedAspectY">
            <summary>
              Specifies the vertical aspect of the device for which the font was designed. 
              The ratio of the tmDigitizedAspectX and tmDigitizedAspectY members is 
              the aspect ratio of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.FirstChar">
            <summary>
              Specifies the value of the first character defined in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.LastChar">
            <summary>
              Specifies the value of the last character defined in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.DefaultChar">
            <summary>
              Specifies the value of the character to be substituted for 
              characters not in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.BreakChar">
            <summary>
              Specifies the value of the character that will be used to 
              define word breaks for text justification.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Italic">
            <summary>
              Specifies an italic font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.Underlined">
            <summary>
              Specifies an underlined font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.StruckOut">
            <summary>
              Specifies a strikeout font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.PitchAndFamily">
            <summary>
              Specifies information about the pitch, the technology, 
              and the family of a physical font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontMetric.CharSet">
            <summary>
              Specifies the character set of the font. The character set 
              can be one of the following values.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontBuilder">
            <summary>
              Represents a class that is used to builder some complex fonts.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._height">
            <summary>
              Saves the height of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._width">
            <summary>
              Saves the width of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._escapement">
            <summary>
              Saves the escapement of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._orientation">
            <summary>
              Saves the orientation of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._weight">
            <summary>
              Saves the weight of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._italic">
            <summary>
              Saves the italic of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._underline">
            <summary>
              Saves the underline of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._strikeOut">
            <summary>
              Saves the strike out of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._charSet">
            <summary>
              Saves the char set of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._outPrecision">
            <summary>
              Saves the output percision of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._clipPrecision">
            <summary>
              Saves clipping precision of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._quality">
            <summary>
              Saves the quality of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._pitch">
            <summary>
              Saves the pitch of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._family">
            <summary>
              Saves the family of font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontBuilder._faceName">
            <summary>
              Saves the face name of font.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(C1.Framework.Drawing.Gdi.Font)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> from a <see cref="T:C1.Framework.Drawing.Gdi.Font"/>
            </summary>
            <param name="font">
              A <see cref="T:C1.Framework.Drawing.Gdi.Font"/> indicate the template
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.Drawing.Font)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> from a <see cref="T:System.Drawing.Font"/>
            </summary>
            <param name="gdiplusFont">
              A <see cref="T:System.Drawing.Font"/> indicate the template
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Byte,C1.Framework.Drawing.Gdi.FontOutPrecision,C1.Framework.Drawing.Gdi.FontClipPrecision,C1.Framework.Drawing.Gdi.FontQuality,C1.Framework.Drawing.Gdi.FontPitch)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
            <param name="escapement">
              Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
              The escapement vector is parallel to the base line of a row of text.
            </param>
            <param name="width">
              Specifies the average width, in logical units, of characters in the font. If width is zero,
              the aspect ratio of the device is matched against the digitization aspect ratio of the available fonts
              to find the closest match, determined by the absolute value of the difference.
            </param>
            <param name="weight">
              Specifies the weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold.
              If this value is zero, a default weight is used. The following values are defined for convenience.
            </param>
            <param name="italic">
              Specifies an italic font if set to <b>true</b>.
            </param>
            <param name="underline">
              Specifies an underlined font if set to <b>true</b>.
            </param>
            <param name="strikeOut">
              Specifies a strikeout font if set to <b>true</b>.
            </param>
            <param name="orientation">
              Specifies the angle, in tenths of degrees, between each character's base line and the x-axis of the device.
            </param>
            <param name="charSet">
              Specifies the character set.
            </param>
            <param name="outPrecision">
              Specifies the output precision. The output precision defines how closely the output must match
              the requested font's height, width, character orientation, escapement, pitch, and font type.
            </param>
            <param name="clipPrecision">
              Specifies the clipping precision. The clipping precision defines how to clip characters
              that are partially outside the clipping region. It can be one or more of the following values.
            </param>
            <param name="quality">
              Specifies the output quality. The output quality defines how carefully the graphics device interface (GDI)
              must attempt to match the logical-font attributes to those of an actual physical font.
            </param>
            <param name="pitch">
              Specifies the pitch of the font
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,System.Int32)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c> and <c>height</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c>, <c>family</c> and <c>height</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32,System.Drawing.FontStyle)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c>, <c>family</c>, <c>height</c> and
              <c>fontStyle</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
            <param name="fontStyle">
              A <see cref="T:System.Drawing.FontStyle"/> indicate the font style.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32,System.Int32,System.Drawing.FontStyle)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c>, <c>family</c>, <c>height</c> and
              <c>fontStyle</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
            <param name="escapement">
              Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
              The escapement vector is parallel to the base line of a row of text.
            </param>
            <param name="fontStyle">
              A <see cref="T:System.Drawing.FontStyle"/> indicate the font style.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32,System.Drawing.FontStyle,System.Int32)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c>, <c>family</c>, <c>height</c> and
              <c>fontStyle</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
            <param name="fontStyle">
              A <see cref="T:System.Drawing.FontStyle"/> indicate the font style.
            </param>
            <param name="orientation">
              Specifies the angle, in tenths of degrees, between each character's base line and the x-axis of the device.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32,System.Int32,System.Drawing.FontStyle,System.Int32)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c>, <c>family</c>, <c>height</c> and
              <c>fontStyle</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
            <param name="escapement">
              Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
              The escapement vector is parallel to the base line of a row of text.
            </param>
            <param name="fontStyle">
              A <see cref="T:System.Drawing.FontStyle"/> indicate the font style.
            </param>
            <param name="orientation">
              Specifies the angle, in tenths of degrees, between each character's base line and the x-axis of the device.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.#ctor(System.String,C1.Framework.Drawing.Gdi.FontFamily,System.Int32,System.Int32,System.Drawing.FontStyle,System.Int32,C1.Framework.Drawing.Gdi.FontPitch)">
            <summary>
              Initialize a new <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> by special <c>faceName</c>, <c>family</c>, <c>height</c> and
              <c>fontStyle</c>
            </summary>
            <param name="faceName">
              A null-terminated string that specifies the typeface name of the font. 
              The length of this string must not exceed 32 characters, including the terminating null character.
              The <b>EnumFontFamiliesEx</b> function can be used to enumerate the typeface names of all currently available fonts.
              If <b>faceName</b> is an empty string, GDI uses the first font that matches the other specified attributes. 
            </param>
            <param name="family">
              Specifies the family of the font
            </param>
            <param name="height">
              Specifies the height, in logical units, of the font's character cell or character.
              The character height value (also known as the em height) is the character cell height value minus
              the internal-leading value.
            </param>
            <param name="escapement">
              Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
              The escapement vector is parallel to the base line of a row of text.
            </param>
            <param name="fontStyle">
              A <see cref="T:System.Drawing.FontStyle"/> indicate the font style.
            </param>
            <param name="orientation">
              Specifies the angle, in tenths of degrees, between each character's base line and the x-axis of the device.
            </param>
            <param name="pitch">
              Specifies the pitch of the font
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Height">
            <summary>
              Get or set the height, in logical units, of the font's character cell or character. The character height
              value (also known as the em height) is the character cell height value minus the internal-leading value. 
            </summary>
            <value>
              An <b>int</b> indicate the height
            <para>
              if <c>value</c> larger than zero, the font mapper transforms this value into device units and matches it
              against the cell height of the available fonts.
            </para>
            <para>
              if <c>value</c> equal zero, the font mapper uses a default height value when it searches for a match.
            </para>
            <para>
              if <c>value</c> less than zero, the font mapper transforms this value into device units and matches
              its absolute value against the character height of the available fonts.
            </para>
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Width">
            <summary>
              Get or set the average width, in logical units, of characters in the font. 
              If <c>value</c> is zero, the aspect ratio of the device is matched against the digitization aspect ratio of 
              the available fonts to find the closest match, determined by the absolute value of the difference. 
            </summary>
            <value>
              An <b>int</b> indicate the average width
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Escapement">
            <summary>
              Get or set the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
              The escapement vector is parallel to the base line of a row of text. 
            </summary>
            <value>
              An <b>int</b> indicate the escapement vector
            </value>
            <remarks>
            <para>
              <b>Windows NT/2000/XP</b>: When the graphics mode is set to <b>GM_ADVANCED</b>, you can specify the escapement angle
              of the string independently of the orientation angle of the string's characters.
            </para>
            <para>
              When the graphics mode is set to <b>GM_COMPATIBLE</b>, Escapement specifies both the escapement and orientation.
              You should set Escapement and Orientation to the same value. 
            </para>
            <para>
              <b>Windows 95/98/Me</b>: The Escapement member specifies both the escapement and orientation.
              You should set <c>Escapement</c> and <c>Orientation</c> to the same value. 
            </para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Orientation">
            <summary>
            Get or set the angle, in tenths of degrees, between each character's base line and the x-axis of the device. 
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Weight">
            <summary>
              Get or set the weight of the font. 
            </summary>
            <value>
              An <b>int</b> indicate the weight of font, which is in the range 0 through 1000.
              For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Italic">
            <summary>
              Get or set <b>bool</b> which indicate whether the font is italic
            </summary>
            <value>
              A <b>bool</b> which indicate whether the font is italic
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Underline">
            <summary>
              Get or set <b>bool</b> which indicate whether the font is underline
            </summary>
            <value>
              An <b>bool</b> which indicate whether the font is underline
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.StrikeOut">
            <summary>
              Get or set <b>bool</b> which indicate whether the font is strikeout
            </summary>
            <value>
              An <b>bool</b> which indicate whether the font is strikeout
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.CharSet">
            <summary>
              Get or set the CharSet of font
            </summary>
            <value>
              A <b>byte</b> indicate the charset of font
            </value>
            <remarks>
              Fonts with other character sets may exist in the operating system. If an application uses a font with
              an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font. 
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.OutPrecision">
            <summary>
              Get or set the output precision.
            </summary>
            <value>
              The <b>value</b> defines how closely the output must match the requested font's height, width,
              character orientation, escapement, pitch, and font type.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.ClipPrecision">
            <summary>
              Get or set the clipping precision.
            </summary>
            <value>
              The <b>value</b> defines how to clip characters that are partially outside the clipping region.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Quality">
            <summary>
              Get or set the output quality.
            </summary>
            <value>
              The <b>value</b> defines how carefully the graphics device interface (GDI) must attempt to match the logical-font
              attributes to those of an actual physical font. 
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Pitch">
            <summary>
              Get or set the pitch of the font.
            </summary>
            <value>
              The <b>value</b> describe the look of a font in general way with corporated with <c>Family</c>
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.Family">
            <summary>
              Get or set the font family
            </summary>
            <value>
              The <b>value</b> describe the look of a font in a general way. 
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.FontBuilder.FaceName">
            <summary>
              Get or set a null-terminated string that specifies the typeface name of the font. 
            </summary>
            <value>
              A <b>string</b> value specifies the typeface name of the font.
            </value>
            <remarks>
              The length of this string must not exceed 32 characters, including the terminating null character. 
              If <c>value</c> is an empty string, GDI uses the first font that matches the other specified attributes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.Clone">
            <summary>
              Creates an exact copy of this <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> object.
            </summary>
            <returns>
              The <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/> object that this method creates.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.Create">
            <summary>
              Create a new <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from current <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/>
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Font"/> istance which its properties provided by <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/>
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.CreateGdiplusFont">
            <summary>
              Create a new <see cref="T:System.Drawing.Font"/> istance which its properties provided by <see cref="T:C1.Framework.Drawing.Gdi.FontBuilder"/>
            </summary>
            <returns>
              A <see cref="T:System.Drawing.Font"/> instance would be create
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.Zoom(C1.Framework.Drawing.Gdi.Font,System.Single)">
            <summary>
              Zoom current <see cref="T:C1.Framework.Drawing.Gdi.Font"/> with zoom factor
            </summary>
            <param name="font">
              Indicate the <b>Font</b> you want to zoom
            </param>
            <param name="zoomFactor">
              Indicate the zoom factor
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Font"/> with special size
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.Bold(C1.Framework.Drawing.Gdi.Font)">
            <summary>
              Create a bold <see cref="T:C1.Framework.Drawing.Gdi.Font"/> from current font
            </summary>
            <param name="font">
              Indicate the <b>Font</b> you want to bold
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Font"/> with bold style
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.FromNative(C1.Framework.Platform.NativeMethods.LOGFONT)">
            <summary>
              Create a FontBuilder frome the native logical font. 
            </summary>
            <param name="logFont">
              A native logical font. 
            </param>
            <returns>
              The FontBuilder.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.FontBuilder.ToNative(C1.Framework.Drawing.Gdi.FontBuilder)">
            <summary>
              Create a native logical font frome the FontBuilder. 
            </summary>
            <param name="fontBuilder">
              A FontBuilder.
            </param>
            <returns>
              The native logical font.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontWeight">
            <summary>
              Represents the weight values of logical font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Default">
            <summary>
              Indicates the default font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Thin">
            <summary>
              Indicates the thin font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.ExtraLight">
            <summary>
              Indicates the extra light font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.UltraLight">
            <summary>
              Indicates the ultra light font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Light">
            <summary>
              Indicates the light font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Normal">
            <summary>
              Indicates the normal font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Regular">
            <summary>
              Indicates the regular font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Medium">
            <summary>
              Indicates the medium font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.SemiBold">
            <summary>
              Indicates the semi bold font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.DemiBold">
            <summary>
              Indicates the demi bold font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Bold">
            <summary>
              Indicates the bold font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.ExtraBold">
            <summary>
              Indicates the extra bold font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.UltraBold">
            <summary>
              Indicates the ultra bold font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Heavy">
            <summary>
              Indicates the heavy font weight.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontWeight.Black">
            <summary>
              Indicates the black font weight.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontOutPrecision">
            <summary>
              Represents the out precision of logical font.
            </summary>
            <remarks>
              The output precision defines how closely the output must match the requested font's height, 
              width, character orientation, escapement, pitch, and font type. 
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.Default">
            <summary>
              Specifies the default font mapper behavior.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.String">
            <summary>
              This value is not used by the font mapper, but it is returned when raster fonts are enumerated.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.Character">
            <summary>
              Not used.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.Stroke">
            <summary>
              This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, 
              and vector fonts are enumerated.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.TrueType">
            <summary>
              Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.  
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.Device">
            <summary>
              Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.Raster">
            <summary>
              Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.TrueTypeOnly">
            <summary>
              Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in
              the system, the font mapper returns to default behavior.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.OutLine">
            <summary>
              This value instructs the font mapper to choose from TrueType and other outline-based fonts.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.ScreenOutLine">
            <summary>
              [This is a no document value.]
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontOutPrecision.PostScriptOnly">
            <summary>
              Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in 
              the system, the font mapper returns to default behavior.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontClipPrecision">
            <summary>
              Represents the clip precision of font.
            </summary>
            <remarks>
              The clipping precision defines how to clip characters that are partially outside the clipping region. 
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.Default">
            <summary>
              Specifies default clipping behavior.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.Character">
            <summary>
              Not used.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.Stroke">
            <summary>
              Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.Mask">
            <summary>
              Not used.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.LeftHandAngles">
            <summary>
              <p>
                When this value is used, the rotation for all fonts depends on whether the orientation of the 
                coordinate system is left-handed or right-handed.
              </p>
              <p>
                If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent 
                on the orientation of the coordinate system.
              </p>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.TrueTypeAlways">
            <summary>
              Not used.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.DefaultDisable">
            <summary>
              Windows XP SP1: Turns off font association for the font. 
              Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.DefaultOverride">
            <summary>
              Windows 2000: Turns off font association for the font. This is identical to DefaultDisable, 
              but it can have problems in some situations; the recommended flag to use is DefaultDisable. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontClipPrecision.Embedded">
            <summary>
              You must specify this flag to use an embedded read-only font.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontQuality">
            <summary>
              Represents the quality of font.
            </summary>
            <remarks>
              The output quality defines how carefully the graphics device interface (GDI) must attempt to match 
              the logical-font attributes to those of an actual physical font. It can be one of the following values. 
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.Default">
            <summary>
              Appearance of the font does not matter.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.Draft">
            <summary>
              Appearance of the font is less important than when Draft is used. 
              For GDI raster fonts, scaling is enabled, which means that more font sizes are available, 
              but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized if necessary.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.Proof">
            <summary>
              Character quality of the font is more important than exact matching of the logical-font attributes. 
              For GDI raster fonts, scaling is disabled and the font closest in size is chosen. 
              Although the chosen font size may not be mapped exactly when Proof is used, the quality of the font 
              is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are 
              synthesized if necessary.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.Nonantialiased">
            <summary>
              Font is never antialiased.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.Antialiased">
            <summary>
              Font is always antialiased if the font supports it and the size of the font is not too small or too large.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.ClearType">
            <summary>
              If set, text is rendered (when possible) using ClearType antialiasing method.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontQuality.ClearTypeNatural">
            <summary>
              [No document]
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontPitch">
            <summary>
              Represents the pitch of font.
            </summary>
            <remarks>
              The two low-order bits specify the pitch of the font and can be one of the following values.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontPitch.Default">
            <summary>
              Indicates the default pitch.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontPitch.Fixed">
            <summary>
              Indicates the fixed pitch.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontPitch.Variable">
            <summary>
              Indicates the variable pitch.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.FontFamily">
            <summary>
              Represents the family of logical font
            </summary>
            <remarks>
              Describe the look of a font in a general way.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontFamily.Default">
            <summary>
              Use default font.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontFamily.Roman">
            <summary>
              Fonts with variable stroke width (proportional) and with serifs. MS Serif is an example.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontFamily.Swiss">
            <summary>
              Fonts with variable stroke width (proportional) and without serifs. MS Sans Serif is an example.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontFamily.Modern">
            <summary>
              Fonts with constant stroke width (monospace), with or without serifs. 
              Monospace fonts are usually modern. Pica, Elite, and CourierNew are examples.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontFamily.Script">
            <summary>
              Fonts designed to look like handwriting. Script and Cursive are examples.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.FontFamily.Decorative">
            <summary>
              Novelty fonts. Old English is an example.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.GdiObject">
            <summary>
              Represents the common base of the gid objects.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GdiObject._handle">
            <summary>
              Saves the handle of this gdi object.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GdiObject.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.GdiObject"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.GdiObject.Handle">
            <summary>
              Returns a handle to this <b>GdiObject</b> object.
            </summary>
            <value>
              A Windows handle to this <b>GdiObject</b> object.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GdiObject.Finalize">
            <summary>
              Deletes this <b>GdiObject</b>, and frees the memory allocated for it.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GdiObject.Dispose">
            <summary>
              Releases all resources used by this <b>GdiObject</b> object.
            </summary>
            <remarks>
              Calling <b>Dispose</b> allows the resources used by the 
              <b>GdiObject</b> object to be reallocated 
              for other purposes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GdiObject.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiObject</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.GdiObject.Clone">
            <summary>
              Creates an exact copy if this <b>GdiObject</b> object.
            </summary>
            <returns>
              The <b>GdiObject</b> object that this method creates.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.RawGdiObject">
            <summary>
              Represents a wrapper of the gid object handle. 
            </summary>
            <remarks>
              The handle will not be released when RawGdiObject is disposed.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.RawGdiObject.#ctor(System.IntPtr)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.RawGdiObject"/> class.
            </summary>
            <param name="handle">
              A <see cref="T:System.IntPtr"/> indicates the handle object gdi object.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.RawGdiObject.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <b>GdiObject</b>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.RawGdiObject.Clone">
            <summary>
              Creates an exact copy if this <b>GdiObject</b> object.
            </summary>
            <returns>
              The <b>GdiObject</b> object that this method creates.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Graphics">
            <summary>
              Represents the gdi graphics object that handles the gdi device context.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics.Default">
            <summary>
              A static <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> used to measure geometries.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._deviceContext">
            <summary>
              Saves the device context.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._deviceContextLock">
            <summary>
              Used to lock the device context.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._disposer">
            <summary>
              To to be runed in Dispose method.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.DeviceContext">
            <summary>
              Gets the <see cref="P:C1.Framework.Drawing.Gdi.Graphics.DeviceContext"/> of the <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/>.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.Graphics.DeviceContext"/> that indicates the device context of the <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/>.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.#ctor(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> class.
            </summary>
            <param name="deviceContext">
              An <b>DeviceContext</b> indicates the device context.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.Finalize">
            <summary>
              Deletes this <b>Graphics</b>, and frees the memory allocated for it.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.Dispose">
            <summary>
              Releases all resources used by this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </summary>
            <remarks>
              Calling <b>Dispose</b> allows the resources used by the <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> 
              object to be reallocated for other purposes.
            </remarks>
            <returns>
              This method does not return a value.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              <b>true</b> to release both managed and unmanaged resources; 
              <b>false</b> to release only unmanaged resources.
            </param>
            <returns>
              This method does not return a value.
            </returns>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.ClipBound">
            <summary>
              Gets the <see cref="T:System.Drawing.Rectangle"/> structure that bounds the clipping region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </summary>
            <value>
              This property indicates a <see cref="T:System.Drawing.Rectangle"/> structure that represents a bounding rectangle for the clipping 
              region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </value>
            <example>
               How to judge a Grphics's clip is empty?
               <code>
                 bool isClipEmpty = (graphics.ClipBound == Rectangle.Empty);
               </code>
            </example>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.GetClip">
            <summary>
              Gets the region of the current clipping region of graphics. 
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> that indicates the clipping region.
            </returns>
            <remarks>
              <para>
              Note: The getting region is a copy of the current region.
              </para>
              <para>
              The coordinate of region will not be effected by current origin of page space.
              </para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.IntersectClip(System.Drawing.Rectangle)">
            <summary>
              Updates the clip region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to the intersection of the current clip region and 
              the specified <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure to intersect with the current clip region. 
            </param>
            <remarks>
              This method assigns to the <b>Clip</b> property of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object the area represented by the 
              intersection of the current clip region and the rectangle specified by the <c>rectangle</c> parameter.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.IntersectClip(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates the clip region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to the intersection of the current clip region and 
              the specified <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="region">
              <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to intersect with the current region. 
            </param>
            <remarks>
              This method assigns to the <b>Clip</b> property of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object the area represented by the 
              intersection of the current clip region and the region specified by the <c>region</c> parameter.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.ExcludeClip(System.Drawing.Rectangle)">
            <summary>
              Updates the clip region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to exclude the area specified by a <see cref="T:System.Drawing.Rectangle"/>
              structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure that specifies the rectangle to exclude from the clip region. 
            </param>
            <remarks>
              This method excludes the area specified by the <c>rectangle</c> parameter from the current clip region and assigns
              the resulting area to the <b>Clip</b> property of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.ExcludeClip(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates the clip region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to exclude the area specified by a <see cref="T:C1.Framework.Drawing.Gdi.Region"/>
              object.
            </summary>
            <param name="region">
              <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object that specifies the region to exclude from the clipping region.
            </param>
            <remarks>
              This method excludes the area specified by the <c>region</c> parameter from the current clip region and assigns 
              the resulting area to the <b>Clip</b> property of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.SetClip(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Sets the clipping region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to the result of the Replace combining
              the current clip region and the specified <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="region">
              <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to combine.
            </param>
            <remarks>
              Only a copy of the setting region is used. The region itself can be seted 
              for any number of other device contexts or it can be deleted.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.SetClip(System.Drawing.Rectangle)">
            <summary>
              Sets the clipping region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object 
              to the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure that represents the new clip region. 
            </param>
            <remarks>
              Only a copy of the setting region is used. The region itself can be seted 
              for any number of other device contexts or it can be deleted.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Sets the clipping region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to the result of the specified operation combining
              the current clip region and the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure to combine.
            </param>
            <param name="combineMode">
              Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use. 
            </param>
            <remarks>
              Only a copy of the setting region is used. The region itself can be seted 
              for any number of other device contexts or it can be deleted.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.SetClip(C1.Framework.Drawing.Gdi.Region,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Sets the clipping region of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object to the result of the specified operation combining
              the current clip region and the specified <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="region">
              <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to combine.
            </param>
            <param name="combineMode">
              Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that specifies the combining operation to use. 
            </param>
            <remarks>
              Only a copy of the setting region is used. The region itself can be seted 
              for any number of other device contexts or it can be deleted.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.TranslateClip(System.Int32,System.Int32)">
            <summary>
              Translates the clipping region of this Graphics object by specified amounts in the horizontal and vertical directions.
            </summary>
            <param name="dx">
              An <b>int</b> indicates the x component of the translation.
            </param>
            <param name="dy">
              An <b>int</b> indicates the y component of the translation.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawLine(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draw the special line by using given pen
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the pen used to draw
            </param>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line start point
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawBezier(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws one Bezier curves on current <c>Graphics</c>.
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the pen used to draw
            </param>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the Bezier curves start point
            </param>
            <param name="controlPoint1">
              A <see cref="T:System.Drawing.Point"/> indicate the first control point of the Bezier curves
            </param>
            <param name="controlPoint2">
              A <see cref="T:System.Drawing.Point"/> indicate the second control point of the Bezier curves
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawRectangle(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Rectangle)">
            <summary>
              Draw the special rectangle by using the given pen
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the draw-style of rectangle
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to draw
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawEllipse(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Rectangle)">
            <summary>
              Draw the special ellipse by using the given pen
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the draw-style of ellipse
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawArc(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Draw the special arc by using the given pen
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the draw-style of arc
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <param name="startAngle">
              A <b>float</b> specifies the start angle, in degrees. 
            </param>
            <param name="sweepAngle">
              A <b>float</b> specifies the sweep angle, in degrees, relative to the starting angle.
            </param>
            <remarks>
              The arc is drawn by constructing an imaginary circle around the specified center point with the specified radius.
              The starting point of the arc is determined by measuring counterclockwise from the x-axis of the circle
              by the number of degrees in the start angle. The ending point is similarly located by measuring counterclockwise
              from the starting point by the number of degrees in the sweep angle.
              If the sweep angle is greater than 360 degrees,the arc is swept multiple times.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawLines(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Point[])">
            <summary>
              Draw the special lines on current <c>Graphics</c> by using the special pen. 
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the draw-style of lines
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> array indicate the line segments.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawBeziers(C1.Framework.Drawing.Gdi.Pen,System.Drawing.Point[])">
            <summary>
              Draw the special Bezier curve on current <c>Graphics</c> by using the special pen. 
            </summary>
            <param name="pen">
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> indicate the draw-style of Bezier curve
            </param>
            <param name="points">
              An array of <see cref="T:System.Drawing.Point"/>structures that contain the endpoints and control points of the curve(s).
              This value must be one more than three times the number of curves to be drawn,
              because each Bzier curve requires two control points and an endpoint,
              and the initial curve requires an additional starting point. 
            </param>
            <remarks>
            <para>
              DrawBeziers draws cubic Bzier curves by using the endpoints and control points specified by the <c>points</c> parameter.
              The first curve is drawn from the first point to the fourth point by using the second and third points
              as control points. Each subsequent curve in the sequence needs exactly three more points: the ending point of
              the previous curve is used as the starting point, the next two points in the sequence are control points,
              and the third is the ending point.
            </para>
            <para>
              Any extra points are ignored. To draw a line with more points, divide the data into groups
              that have less than the maximum number of points and call the function for each group of points.
              Remember to connect the line segments.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FillRectangle(C1.Framework.Drawing.Gdi.Brush,System.Drawing.Rectangle)">
            <summary>
              Fill the specified rectangle by using the given brush.
            </summary>
            <param name="brush">
              A <see cref="T:C1.Framework.Drawing.Gdi.Brush"/> object used to fill the rectangle.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the rectangle to be filled.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FillEllipse(C1.Framework.Drawing.Gdi.Brush,System.Drawing.Rectangle)">
            <summary>
              Fill the special ellipse on current <c>Grapchis</c> by using special <c>brush</c>
            </summary>
            <param name="brush">
              A <see cref="T:C1.Framework.Drawing.Gdi.Brush"/> object used to fill the ellipse.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FillPie(C1.Framework.Drawing.Gdi.Brush,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Fill the special pie on current <c>Grapchis</c> by using special <c>brush</c>
            </summary>
            <param name="brush">
              A <see cref="T:C1.Framework.Drawing.Gdi.Brush"/> object used to fill the pie.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
            <remarks>
              The curve begins at the point where the ellipse intersects the first radial and extends counterclockwise to
              the point where the ellipse intersects the second radial. 
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FillPolygon(C1.Framework.Drawing.Gdi.Brush,System.Drawing.Point[])">
            <summary>
              Fill the special polygon on current <c>Grapchis</c> by using special <c>brush</c>
            </summary>
            <param name="brush">
              A <see cref="T:C1.Framework.Drawing.Gdi.Brush"/> object used to fill the polygon.
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> structures that specify the vertices of the polygon.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FillRegion(C1.Framework.Drawing.Gdi.Brush,C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Fill the special <c>region</c> on current <c>Grapchis</c> by using special <c>brush</c>
            </summary>
            <param name="brush">
              A <see cref="T:C1.Framework.Drawing.Gdi.Brush"/> object used to fill the region.
            </param>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicate the region which be filled
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.Copy(C1.Framework.Drawing.Gdi.Graphics,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
              Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from 
              the specified source <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object into a destination <b>Graphics</b> object.
            </summary>
            <param name="graphics">
              A <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> indicate the source <b>Graphics</b> object
            </param>
            <param name="destRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the destination rectangle.
            </param>
            <param name="srcPoint">
              A <see cref="T:System.Drawing.Point"/> indicates the upper-left corner of source rectangle. 
              The width and height of source rectangle are same as the destination rectangle.
            </param>
            <remarks>
            <para>
              Copy only does clipping on the destination DC.
            </para>
            <para>
              If a rotation or shear transformation is in effect in the source device context, Copy will throw
              a <see cref="T:C1.Framework.SystemErrorException"/>. If other transformations exist in the source device context (and a matching
              transformation is not in effect in the destination device context), the rectangle in the destination device context
              is stretched, compressed, or rotated, as necessary. 
            </para>
            <para>
              If the color formats of the source and destination device contexts do not match, the Copy function converts
              the source color format to match the destination format. 
            </para>
            <para>
              When an enhanced metafile is being recorded, an error occurs if the source device context identifies
              an enhanced-metafile device context. it means a <see cref="T:C1.Framework.SystemErrorException"/> would be throw out.
            </para>
            <para>
              Not all devices support the Copy function. For more information, see the <b>RC_BITBLT</b> raster capability entry
              in the <b>GetDeviceCaps</b> function as well as the following: <B>MaskBlt</B>, <b>PlgBlt</b>, and <b>StretchBlt</b>.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.Copy(C1.Framework.Drawing.Gdi.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
              Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from 
              the specified source <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object into a destination <b>Graphics</b> object.
            </summary>
            <param name="graphics">
              The source <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </param>
            <param name="srcRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the source rectangle.
            </param>
            <param name="destRectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the destination rectangle.
            </param>
            <remarks>
            <para>
              Copy only does clipping on the destination DC.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.ToGdiplusGraphics(C1.Framework.Drawing.Gdi.Graphics)">
            <summary>
              Creates a new gdi+ graphics from a gdi graphics.
            </summary>
            <param name="graphics">
              A <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> indicates the gdi graphics.
            </param>
            <returns>
              Returns a <see cref="T:System.Drawing.Graphics"/> that indicates the gdi+ graphics.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FromGdiplusGraphics(System.Drawing.Graphics)">
            <summary>
              Creates a new gdi graphics from a gdi+ graphics.
            </summary>
            <param name="gdiplusGraphics">
              A <see cref="T:System.Drawing.Graphics"/> indicates the gdi+ graphics.
            </param>
            <returns>
              Returns a <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> that indicates the gdi graphics.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.FromGdiplusGraphics(System.Drawing.Graphics,System.Boolean)">
            <summary>
              Creates a new gdi graphics from a gdi+ graphics. 
              This method kept the clip region, but remains low performance, when <paramref name="keptClipRegion"/> is set to true.
            </summary>
            <param name="gdiplusGraphics">
              A <see cref="T:System.Drawing.Graphics"/> indicates the gdi+ graphics.
            </param>
            <param name="keptClipRegion">
              A <b>bool</b> indicate whether kept original clip region of gdip graphics
            </param>
            <returns>
              Returns a <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> that indicates the gdi graphics.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.Scroll(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
              Moves the specified rectangle by offfset values.
            </summary>
            <param name="dx">
              An <b>int</b> indicates the x offset.
            </param>
            <param name="dy">
              An <b>int</b> indicates the y offset.
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that indicates the rectangle to be moved.
            </param>
            <remarks>
              <red>[The current implementation is a time consumer, to be re-write.]</red>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.TranslateTransform(System.Int32,System.Int32)">
            <summary>
              Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </summary>
            <param name="dx">
              x component of the translation. 
            </param>
            <param name="dy">
              y component of the translation. 
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.Transform">
            <summary>
              Gets or sets the world transformation for this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </summary>
            <value>
              This property specifies a <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> object that represents the world transformation 
              for this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </value>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._pageUnit">
            <summary>
              A <see cref="T:C1.Framework.Drawing.Gdi.GraphicsUnit"/> indicate the page unit of current <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._pageScale">
            <summary>
              A <b>float</b>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._windowExtent">
            <summary>
              A <see cref="T:System.Drawing.Size"/> indicate the window extent
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._viewportExtent">
            <summary>
              A <see cref="T:System.Drawing.Size"/> indicate the viewport extent
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Graphics._mappingMode">
            <summary>
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.MappingMode"/> indicate the mapping mode of current graphics
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.GraphicsUnitSentinel">
            <summary>
              A sentinel for current graphics unit
            </summary>
            <returns>
              if the device context has changed the WindowExtent, WindowOrigin, ViewportExtent, return false;
              otherwise return true, as there is no changed.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.SyncToDeviceContext">
            <summary>
              Sync the cache with its device context
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.PageUnit">
            <summary>
              Gets or sets the unit of measure used for page coordinates in this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </summary>
            <value>
              One of the <see cref="T:C1.Framework.Drawing.Gdi.GraphicsUnit"/> values.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.PageScale">
            <summary>
              Gets or sets the scaling between world units and page units for this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </summary>
            <value>
              This property specifies a value for the scaling between world units and page units for
              this <see cref="T:C1.Framework.Drawing.Gdi.Graphics"/> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.DpiX">
            <summary>
              Gets the horizontal resolution of this Graphics object.
            </summary>
            <value>
              This property indicates a value, in dots per inch, for the horizontal resolution supported by this Graphics object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Graphics.DpiY">
            <summary>
              Gets the vertical resolution of this Graphics object.
            </summary>
            <value>
              This property indicates a value, in dots per inch, for the vertical resolution supported by this Graphics object.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawString(System.String,C1.Framework.Drawing.Gdi.Font,C1.Framework.Drawing.Gdi.Brush,System.Drawing.Point,C1.Framework.Drawing.Gdi.StringFormat)">
            <summary>
              Draws the specified text string at the specified location with the specified 
              Brush and Font objects using the formatting attributes of the specified StringFormat object.
            </summary>
            <param name="s">
              String to draw.
            </param>
            <param name="font">
              Font object that defines the text format of the string.
            </param>
            <param name="brush">
              Brush object that determines the color and texture of the drawn text.
            </param>
            <param name="point">
              Point structure that specifies the upper-left corner of the drawn text. 
            </param>
            <param name="format">
              StringFormat object that specifies formatting attributes, such as line spacing and alignment, 
              that are applied to the drawn text. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.DrawString(System.String,C1.Framework.Drawing.Gdi.Font,C1.Framework.Drawing.Gdi.Brush,System.Drawing.Rectangle,C1.Framework.Drawing.Gdi.StringFormat)">
            <summary>
              Draws the specified text string in the specified rectangle with the specified 
              Brush and Font objects using the formatting attributes of the specified StringFormat object.
            </summary>
            <param name="s">
              String to draw.
            </param>
            <param name="font">
              Font object that defines the text format of the string.
            </param>
            <param name="brush">
              Brush object that determines the color and texture of the drawn text.
            </param>
            <param name="layoutRectangle">
              Rectangle structure that specifies the location of the drawn text.
            </param>
            <param name="format">
              StringFormat object that specifies formatting attributes, such as line spacing and alignment, 
              that are applied to the drawn text. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.MeasureString(System.String,C1.Framework.Drawing.Gdi.Font,System.Drawing.Size,C1.Framework.Drawing.Gdi.StringFormat)">
            <summary>
              Measures the specified string when drawn with the specified Font object and formatted with the specified StringFormat object.
            </summary>
            <param name="s">
              String to measure.
            </param>
            <param name="font">
              Font object defines the text format of the string.
            </param>
            <param name="layoutArea">
              Size structure that specifies the maximum layout area for the text.
            </param>
            <param name="format">
              StringFormat object that represents formatting information, such as line spacing, for the string.
            </param>
            <returns>
              The MeasureString method is designed for use with individual strings and includes a small amount 
              of extra space before and after the string to allow for overhanging glyphs. Also, the DrawString 
              method adjusts glyph points to optimize display quality and might display a string narrower than 
              reported by MeasureString.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Graphics.GetTextFormatFromStringFormat(C1.Framework.Drawing.Gdi.StringFormat)">
            <summary>
              A helper methods used to get the coordinate TextFormat of the StringFormat
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.GraphicsUnit">
            <summary>
              Specifies the unit of measure for the given data.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Complex">
            <summary>
              Specifies the complex unit as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.World">
            <summary>
              Specifies the world coordinate system unit as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Display">
            <summary>
              Specifies the unit of measure of the display device.
              Typically pixels for video displays, and 1/100 inch for printers.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Pixel">
            <summary>
              Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Point">
            <summary>
              Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Inch">
            <summary>
              Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Document">
            <summary>
              Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.GraphicsUnit.Millimeter">
            <summary>
              Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Pen">
            <summary>
              Represents the base class of all kinds of pen
            </summary>
            <remarks>
              This is an abstract class, which is just details that it's ranged to Pen.
              To use a <see cref="T:C1.Framework.Drawing.Gdi.Pen"/>, you should create an instance from its inherited class.
              Refer to <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/>, <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawLine(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws the special line on <c>deviceContext</c> by using the current pen 
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line start point
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawBezier(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws one Bezier curves on <c>deviceContext</c>.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the Bezier curves start point
            </param>
            <param name="controlPoint1">
              A <see cref="T:System.Drawing.Point"/> indicate the first control point of the Bezier curves
            </param>
            <param name="controlPoint2">
              A <see cref="T:System.Drawing.Point"/> indicate the second control point of the Bezier curves
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Draw the special rectangle on <c>deviceContext</c> by using the current pen.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to draw.
            </param>
            <remarks>
              The rectangle that is drawn excludes the bottom and right edges.
              That means the dimensions of the rectangle are 1 pixel less in height and 1 pixel less in width.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Draw the special ellipse on <c>deviceContext</c> by using the current pen.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawArc(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Draw the special arc on <c>deviceContext</c> by using the current pen.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <param name="startAngle">
              A <b>float</b> specifies the start angle, in degrees. 
            </param>
            <param name="sweepAngle">
              A <b>float</b> specifies the sweep angle, in degrees, relative to the starting angle.
            </param>
            <remarks>
              The arc is drawn by constructing an imaginary circle around the specified center point with the specified radius.
              The starting point of the arc is determined by measuring counterclockwise from the x-axis of the circle
              by the number of degrees in the start angle. The ending point is similarly located by measuring counterclockwise
              from the starting point by the number of degrees in the sweep angle.
              If the sweep angle is greater than 360 degrees,the arc is swept multiple times.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawLines(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Draw the special lines on <c>deviceContext</c> by using the current pen. 
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> array indicate the line segments.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Pen.DrawBeziers(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Draws one or more Bezier curves.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              An array of <see cref="T:System.Drawing.Point"/>structures that contain the endpoints and control points of the curve(s).
              This value must be one more than three times the number of curves to be drawn,
              because each Bzier curve requires two control points and an endpoint,
              and the initial curve requires an additional starting point. 
            </param>
            <remarks>
            <para>
              DrawBeziers draws cubic Bzier curves by using the endpoints and control points specified by the <c>points</c> parameter.
              The first curve is drawn from the first point to the fourth point by using the second and third points
              as control points. Each subsequent curve in the sequence needs exactly three more points: the ending point of
              the previous curve is used as the starting point, the next two points in the sequence are control points,
              and the third is the ending point.
            </para>
            <para>
              Any extra points are ignored. To draw a line with more points, divide the data into groups
              that have less than the maximum number of points and call the function for each group of points.
              Remember to connect the line segments.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DashCap">
            <summary>
              Represents the dash style of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashCap.Round">
            <summary>
              End caps are round.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashCap.Flat">
            <summary>
              End caps are flat.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashCap.Square">
            <summary>
              End caps are square.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.LineJoin">
            <summary>
              Represents the join style of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.LineJoin.Bevel">
            <summary>
              Joins are beveled.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.LineJoin.Miter">
            <summary>
              Joins are mitered when they are within the current limit set by the SetMiterLimit function. 
              If it exceeds this limit, the join is beveled.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.LineJoin.Round">
            <summary>
              Joins are round.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DashStyle">
            <summary>
              Represents the line style of the standard pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashStyle.Dash">
            <summary>
              Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashStyle.Dot">
            <summary>
              Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashStyle.DashDot">
            <summary>
              Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashStyle.DashDotDot">
            <summary>
              The pen has alternating dashes and double dots. This style is 
              valid only when the pen width is one or less in device units.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.SolidPen">
            <summary>
              Represents the pen which always draw with solid line.
            </summary>
            <remarks>
              Inherited from <see cref="T:C1.Framework.Drawing.Gdi.Pen"/>.
              An <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/> would always draw with Solid line
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.SolidPen._color">
            <summary>
              Saves the color of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.SolidPen._width">
            <summary>
              Saves the width of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.SolidPen._cap">
            <summary>
              Saves the cap style of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.SolidPen._join">
            <summary>
              Saves the join style of the pen
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidPen.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidPen.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> class.
            </summary>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.SolidPen.Color"/> indicates the color of the pen.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidPen.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> class.
            </summary>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.SolidPen.Color"/> indicates the color of the pen.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the pen. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidPen.#ctor(System.Drawing.Color,System.Int32,C1.Framework.Drawing.Gdi.DashCap,C1.Framework.Drawing.Gdi.LineJoin)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/> class.
            </summary>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.SolidPen.Color"/> indicates the color of the pen.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the pen. 
            </param>
            <param name="cap">
              A <see cref="T:C1.Framework.Drawing.Gdi.DashCap"/> indicates the cap style of the pen.
            </param>
            <param name="join">
              A <see cref="T:C1.Framework.Drawing.Gdi.LineJoin"/> indicates the join style of the pen.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SolidPen.Color">
            <summary>
              Gets or sets the color of the pen.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.SolidPen.Color"/> indicates the color of the pen.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SolidPen.Width">
            <summary>
              Gets or sets the width of the pen.
            </summary>
            <value>
              An <b>int</b> indicates the width of the pen. 
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SolidPen.Cap">
            <summary>
              Gets or sets the end caps style of the pen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SolidPen.Join">
            <summary>
              Gets or sets the join style of the pen.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidPen.CreateHandle">
            <summary>
              Create the pen by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the pen.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.SolidPen.Clone">
            <summary>
              Create a pen that has the same style as this pen.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> that has the same style as this pen.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.DashPen">
            <summary>
              Reprents the custom pen that has the styles defined by user.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashPen._color">
            <summary>
              Saves the color of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashPen._width">
            <summary>
              Saves the width of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashPen._cap">
            <summary>
              Saves the cap style of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashPen._join">
            <summary>
              Saves the join style of the pen
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.DashPen._dashStyle">
            <summary>
              Saves the style of the line which is painted
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DashPen.#ctor(C1.Framework.Drawing.Gdi.DashStyle,System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> class.
            </summary>
            <param name="dashStyle">
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.DashStyle"/> indicate the style of lines be drawed
            </param>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.Color"/> indicates the color of the pen.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DashPen.#ctor(C1.Framework.Drawing.Gdi.DashStyle,System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> class.
            </summary>
            <param name="dashStyle">
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.DashStyle"/> indicate the style of lines be drawed
            </param>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.Color"/> indicates the color of the pen.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the pen. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DashPen.#ctor(C1.Framework.Drawing.Gdi.DashStyle,System.Drawing.Color,System.Int32,C1.Framework.Drawing.Gdi.DashCap,C1.Framework.Drawing.Gdi.LineJoin)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> class.
            </summary>
            <param name="dashStyle">
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.DashStyle"/> indicate the style of lines be drawed
            </param>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.Color"/> indicates the color of the pen.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the pen. 
            </param>
            <param name="cap">
              A <see cref="T:C1.Framework.Drawing.Gdi.DashCap"/> indicates the cap style of the pen.
            </param>
            <param name="join">
              A <see cref="T:C1.Framework.Drawing.Gdi.LineJoin"/> indicates the join style of the pen.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DashPen.Color">
            <summary>
              Gets or sets the color of the pen.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.Color"/> indicates the color of the pen.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DashPen.Width">
            <summary>
              Gets or sets the width of the pen.
            </summary>
            <value>
              An <b>int</b> indicates the width of the pen. 
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DashPen.Cap">
            <summary>
              Gets or sets the end caps style of the pen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DashPen.Join">
            <summary>
              Gets or sets the join style of the pen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.DashPen.DashStyle">
            <summary>
              Gets or sets the style of the pen.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.DashPen.DashStyle"/> indicates the line style of the pen.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DashPen.CreateHandle">
            <summary>
              Create the pen by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the pen.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.DashPen.Clone">
            <summary>
              Create a pen that has the same style as this pen.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> that has the same style as this pen.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.PatternPen">
            <summary>
              Reprents the custom pen that has custom style which is defined by a pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.SolidPattern">
            <summary>
              Get a <b>int[]</b> indicate the pattern of <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/>
            </summary>
            <remarks>
            <para>
              The <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> create by this pattern is not same as <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/>. 
              the <b>PatternPen</b> would always draw solid one pixel and zero pixel space.
            </para>
            <para>
              Using this style to paint a rectangle, polygon, polyline, it will be lost some pixels at each the corner.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashPattern">
            <summary>
              Get a <b>int[]</b> indicate the pattern of <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.Dash"/>
            </summary>
            <remarks>
            <para>
              The <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> create by this pattern is not same as <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> which <see cref="T:C1.Framework.Drawing.Gdi.DashStyle"/>
              is <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.Dash"/>. the <b>PatternPen</b> would always draw solid three pixel and one pixel space.
            </para>
            <para>
              Using this style to paint a rectangle, polygon, polyline, it will be lost some pixels at each the corner.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DotPattern">
            <summary>
              Get a <b>int[]</b> indicate the pattern of <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.Dot"/>
            </summary>
            <remarks>
            <para>
              The <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> create by this pattern is not same as <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> which <see cref="T:C1.Framework.Drawing.Gdi.DashStyle"/>
              is <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.Dot"/>. the <b>PatternPen</b> would always draw solid one pixel and one pixel space.
            </para>
            <para>
              Using this style to paint a rectangle, polygon, polyline, it will be lost some pixels at each the corner.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashDotPattern">
            <summary>
              Get a <b>int[]</b> indicate the pattern of <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.DashDot"/>
            </summary>
            <remarks>
            <para>
              The <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> create by this pattern is not same as <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> which <see cref="T:C1.Framework.Drawing.Gdi.DashStyle"/>
              is <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.DashDot"/>. the <b>PatternPen</b> would always draw solid three pixel,
              and one pixel space, then one pixel solid, one pixel space.
            </para>
            <para>
              Using this style to paint a rectangle, polygon, polyline, it will be lost some pixels at each the corner.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashDotDotPattern">
            <summary>
              Get a <b>int[]</b> indicate the pattern of <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.DashDotDot"/>
            </summary>
            <remarks>
            <para>
              The <see cref="T:C1.Framework.Drawing.Gdi.Pen"/> create by this pattern is not same as <see cref="T:C1.Framework.Drawing.Gdi.DashPen"/> which <see cref="T:C1.Framework.Drawing.Gdi.DashStyle"/>
              is <see cref="F:C1.Framework.Drawing.Gdi.DashStyle.DashDotDot"/>. the <b>PatternPen</b> would always draw solid three pixel,
              and one pixel space, then one pixel solid, one pixel space, one pixel solid, one pixel space.
            </para>
            <para>
              Using this style to paint a rectangle, polygon, polyline, it will be lost some pixels at each the corner.
            </para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashD9S3Pattern">
            <summary>
              A <b>int[]</b> indiacte a 9_3 pattern ('111111111000') for <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Pattern"/>
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashD3S1Pattern">
            <summary>
              A <b>int[]</b> indiacte a 3_1 pattern ('1110''1110') for <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Pattern"/>
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashD9S3D3S3Pattern">
            <summary>
              A <b>int[]</b> indiacte a 9_3_3_3 pattern. ('111111111000111000') for <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Pattern"/>
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.DashD3S3D3S3D9S3Pattern">
            <summary>
              A <b>int[]</b> indiacte a 3_3_3_3_9_3 pattern. ('111000111000111111111000') for <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Pattern"/>
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternPen._color">
            <summary>
              Saves the color of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternPen._width">
            <summary>
              Saves the width of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternPen._cap">
            <summary>
              Saves the cap style of the pen.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternPen._join">
            <summary>
              Saves the join style of the pen
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.PatternPen._pattern">
            <summary>
              Saves the pattern of the pen.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternPen.#ctor(System.Int32[],System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.PatternPen"/> class.
            </summary>
            <param name="pattern">
              A <b>int</b> array indicate the pattern of current pen
            </param>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Color"/> indicates the color of the pen.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternPen.#ctor(System.Int32[],System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.PatternPen"/> class.
            </summary>
            <param name="pattern">
              A <see cref="T:System.Int32"/> array indicates the pattern of the pen.
            </param>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Color"/> indicates the color of the pen.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the pen. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternPen.#ctor(System.Int32[],System.Drawing.Color,System.Int32,C1.Framework.Drawing.Gdi.DashCap,C1.Framework.Drawing.Gdi.LineJoin)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.PatternPen"/> class.
            </summary>
            <param name="pattern">
              A <see cref="T:System.Int32"/> array indicates the pattern of the pen.
            </param>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Color"/> indicates the color of the pen.
            </param>
            <param name="width">
              An <b>int</b> indicates the width of the pen. 
            </param>
            <param name="cap">
              A <see cref="T:C1.Framework.Drawing.Gdi.DashCap"/> indicates the cap style of the pen.
            </param>
            <param name="join">
              A <see cref="T:C1.Framework.Drawing.Gdi.LineJoin"/> indicates the join style of the pen.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.Color">
            <summary>
              Gets or sets the color of the pen.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.PatternPen.Color"/> indicates the color of the pen.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.Width">
            <summary>
              Gets or sets the width of the pen.
            </summary>
            <value>
              An <b>int</b> indicates the width of the pen. 
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.Cap">
            <summary>
              Gets or sets the end caps style of the pen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.Join">
            <summary>
              Gets or sets the join style of the pen.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.PatternPen.Pattern">
            <summary>
              Gets or sets the pattern of the pen.
            </summary>
            <value>
              An <see cref="T:System.Int32"/> array indicates the pattern of the pen.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternPen.CreateHandle">
            <summary>
              Create the pen by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the pen.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.PatternPen.Clone">
            <summary>
              Create a pen that has the same style as this pen.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.PatternPen"/> that has the same style as this pen.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.HollowPen">
            <summary>
              Reprents the hollow pen that would draw nothing.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HollowPen.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.HollowPen"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HollowPen.CreateHandle">
            <summary>
              Create the pen by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the pen.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.HollowPen.Clone">
            <summary>
              Create a pen that has the same style as this pen.
            </summary>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.HollowPen"/> that has the same style as this pen.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.ColorPen">
            <summary>
              Defines a brush that has a solid color.
            </summary>
            <remarks>
              This pen has the same funtion as <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/> in painting. The width of <see cref="T:C1.Framework.Drawing.Gdi.SolidPen"/> is always 1.
              This pen will not consume gdi handle. In other word, the Handle property is always IntPtr.Zero. So it 
              can not be used to <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/>.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.ColorPen._color">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.ColorBrush.Color"/> property.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> class.
            </summary>
            <param name="color">
              A <see cref="P:C1.Framework.Drawing.Gdi.ColorPen.Color"/> indicates the color of the pen. 
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.ColorPen.Color">
            <summary>
              Gets or sets the color of the pen.
            </summary>
            <value>
              A <see cref="P:C1.Framework.Drawing.Gdi.ColorPen.Color"/> indicates the color of the pen.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.CreateHandle">
            <summary>
              Create the pen by specified styles.
            </summary>
            <returns>
              An <see cref="T:System.IntPtr"/> is the handle of the pen.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.Clone">
            <summary>
              Creates an exact copy if this <b>ColorPen</b> object.
            </summary>
            <returns>
              The <b>ColorPen</b> object that this method creates.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawLine(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws the special line on <c>deviceContext</c> by using the current pen 
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line start point
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawBezier(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
              Draws one Bezier curves on <c>deviceContext</c>.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="startPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the Bezier curves start point
            </param>
            <param name="controlPoint1">
              A <see cref="T:System.Drawing.Point"/> indicate the first control point of the Bezier curves
            </param>
            <param name="controlPoint2">
              A <see cref="T:System.Drawing.Point"/> indicate the second control point of the Bezier curves
            </param>
            <param name="endPoint">
              A <see cref="T:System.Drawing.Point"/> indicate the line end point
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawRectangle(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Draw the special rectangle on <c>deviceContext</c> by using the current pen.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicate the rectangle to draw.
            </param>
            <remarks>
              The rectangle that is drawn excludes the bottom and right edges.
              That means the dimensions of the rectangle are 1 pixel less in height and 1 pixel less in width.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawEllipse(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle)">
            <summary>
              Draw the special ellipse on <c>deviceContext</c> by using the current pen.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <remarks>
              <b>Windows 95/98/Me</b>: The sum of the coordinates of the bounding rectangle cannot exceed 32,767. 
              The width of <c>rectangle</c> or the height of <c>rectangle</c> cannot exceed 32,767.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawArc(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Draw the special arc on <c>deviceContext</c> by using the current pen.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounding rectangle which center is the center of ellipse
            </param>
            <param name="startAngle">
              A <b>float</b> specifies the start angle, in degrees. 
            </param>
            <param name="sweepAngle">
              A <b>float</b> specifies the sweep angle, in degrees, relative to the starting angle.
            </param>
            <remarks>
              The arc is drawn by constructing an imaginary circle around the specified center point with the specified radius.
              The starting point of the arc is determined by measuring counterclockwise from the x-axis of the circle
              by the number of degrees in the start angle. The ending point is similarly located by measuring counterclockwise
              from the starting point by the number of degrees in the sweep angle.
              If the sweep angle is greater than 360 degrees,the arc is swept multiple times.
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawLines(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Draw the special lines on <c>deviceContext</c> by using the current pen. 
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              A <see cref="T:System.Drawing.Point"/> array indicate the line segments.
            </param>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.ColorPen.DrawBeziers(C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext,System.Drawing.Point[])">
            <summary>
              Draws one or more Bezier curves.
            </summary>
            <param name="deviceContext">
              A <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.DeviceContext"/> indicate the drawing target
            </param>
            <param name="points">
              An array of <see cref="T:System.Drawing.Point"/>structures that contain the endpoints and control points of the curve(s).
              This value must be one more than three times the number of curves to be drawn,
              because each Bzier curve requires two control points and an endpoint,
              and the initial curve requires an additional starting point. 
            </param>
            <remarks>
            <para>
              DrawBeziers draws cubic Bzier curves by using the endpoints and control points specified by the <c>points</c> parameter.
              The first curve is drawn from the first point to the fourth point by using the second and third points
              as control points. Each subsequent curve in the sequence needs exactly three more points: the ending point of
              the previous curve is used as the starting point, the next two points in the sequence are control points,
              and the third is the ending point.
            </para>
            <para>
              Any extra points are ignored. To draw a line with more points, divide the data into groups
              that have less than the maximum number of points and call the function for each group of points.
              Remember to connect the line segments.
            </para>
            </remarks>
            <exception cref="T:C1.Framework.SystemErrorException"/>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Pens">
            <summary>
              Pens for all the standard colors.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Transparent">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.AliceBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.AntiqueWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Aqua">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Aquamarine">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Azure">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Beige">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Bisque">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Black">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.BlanchedAlmond">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Blue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.BlueViolet">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Brown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.BurlyWood">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.CadetBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Chartreuse">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Chocolate">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Coral">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.CornflowerBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Cornsilk">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Crimson">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Cyan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkCyan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkGoldenrod">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkKhaki">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkMagenta">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkOliveGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkOrange">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkOrchid">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkSalmon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkSeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkSlateBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkSlateGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkTurquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DarkViolet">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DeepPink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DeepSkyBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DimGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.DodgerBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Firebrick">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.FloralWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.ForestGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Fuchsia">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Gainsboro">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.GhostWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Gold">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Goldenrod">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Gray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Green">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.GreenYellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Honeydew">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.HotPink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.IndianRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Indigo">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Ivory">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Khaki">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Lavender">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LavenderBlush">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LawnGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LemonChiffon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightCoral">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightCyan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightGoldenrodYellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightPink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightSalmon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightSeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightSkyBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightSlateGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightSteelBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LightYellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Lime">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.LimeGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Linen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Magenta">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Maroon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumAquamarine">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumOrchid">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumPurple">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumSeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumSlateBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumSpringGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumTurquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MediumVioletRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MidnightBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MintCream">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.MistyRose">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Moccasin">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.NavajoWhite">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Navy">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.OldLace">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Olive">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.OliveDrab">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Orange">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.OrangeRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Orchid">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PaleGoldenrod">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PaleGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PaleTurquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PaleVioletRed">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PapayaWhip">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PeachPuff">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Peru">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Pink">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Plum">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.PowderBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Purple">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Red">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.RosyBrown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.RoyalBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SaddleBrown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Salmon">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SandyBrown">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SeaGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SeaShell">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Sienna">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Silver">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SkyBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SlateBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SlateGray">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Snow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SpringGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.SteelBlue">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Tan">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Teal">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Thistle">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Tomato">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Turquoise">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Violet">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Wheat">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.White">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.WhiteSmoke">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.Yellow">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Pens.YellowGreen">
            <summary>
              A system-defined <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object with a width of 1.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object set to a system-defined color.
            </value>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.SystemPens">
            <summary>
              Each property of the SystemPens class is a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of 
              a Windows display element and that is a width of 1.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ActiveBorder">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the active window's border.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the active window's border.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ActiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the active window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the active window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ActiveCaptionText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text in the active window's
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text in the active window's
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.AppWorkspace">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the application workspace.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the application workspace.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ButtonFace">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the face color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the face color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ButtonHighlight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the highlight color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the highlight color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ButtonShadow">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the shadow color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the shadow color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.Control">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the face color of a 3-D element
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the face color of a 3-D element
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ControlDark">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the shadow color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the shadow color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ControlDarkDark">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the dark shadow color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the dark shadow color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ControlLight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the light color of a 3-D element.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the light color of a 3-D element.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ControlLightLight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the highlight color of a 3-D
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the highlight color of a 3-D
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ControlText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of text in a 3-D
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of text in a 3-D
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.Desktop">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the desktop.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the desktop.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.GradientActiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the lightest color
              in the color gradient of an active window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the lightest color in the color gradient of an active window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.GradientInactiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the lightest color in the color
              gradient of an inactive window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the lightest color in the color gradient of an inactive window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.GrayText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of dimmed text.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of dimmed text.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.Highlight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of selected items.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of selected items.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.HighlightText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text of selected items.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text of selected items.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.HotTrack">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color used to designate a hot-tracked item.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color used to designate a hot-tracked item.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.InactiveBorder">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of an inactive window's border.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of an inactive window's border.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.InactiveCaption">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of an inactive window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of an inactive window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.InactiveCaptionText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text in an inactive window's title bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text in an inactive window's title bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.Info">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of a ToolTip.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of a ToolTip.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.InfoText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text of a ToolTip.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text of a ToolTip.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.Menu">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of a menu's background.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of a menu's background.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.MenuBar">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of a menu bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of a menu bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.MenuHighlight">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color used to highlight menu items
              when the menu appears as a flat menu.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color used to highlight menu items when the menu appears as a flat menu.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.MenuText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of a menu's text.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of a menu's text.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.ScrollBar">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of a scroll bar.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background of a scroll bar.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.Window">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background in the client area of a window.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the background in the client area of a window.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.WindowFrame">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of a window frame.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of a window frame.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.SystemPens.WindowText">
            <summary>
              Gets a <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text in the client area of a window.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Drawing.Gdi.ColorPen"/> object that is the color of the text in the client area of a window.
            </value>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.RegionData">
            <summary>
              A data package save the data of a <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.RegionData._buffer">
            <summary>
              Saves the region data.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.RegionData.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.RegionData"/> class.
            </summary>
            <param name="buffer">
              An array of the <b>byte</b> value that saves raw data of the <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.RegionData.Buffer">
            <summary>
              Gets the region data.
            </summary>
            <value>
              An array of the <b>byte</b> value that saves raw data of the <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </value>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Region">
            <summary>
              Represent the interior of a graphics shape composed of rectangles.
            </summary>
            <remarks>
              <newpara>
                A region is scalable because its coordinates are specified in world coordinates. On a drawing surface, however,
                its interior is dependent on the size and shape of the pixels representing it. An application can use regions
                to clamp the output of drawing operations. The window manager uses regions to define the drawing area of these
                regions are called clipping regions. An application can also use regions in hit-testing operations,
                such as checking whether a point or a rectangle intersects a region. An application can fill a region by 
                using a <see cref="T:C1.Framework.Drawing.Gdi.Brush"/> object.
              </newpara>
              <newpara>
                <note type="cnotes">
                  This class uses the Win32 GDI API's for handling regions. The GDI+ version <see cref="T:System.Drawing.Region"/>
                  class just seems to be buggy and too slow.
                </note>
              </newpara>
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.#ctor">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <remarks>
              This constructor initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object with infinite interior.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.#ctor(System.Drawing.Rectangle)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object from the specified <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the interior of the new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object. 
            </param>
            <remarks>
              This method creates a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object with a rectangular interior.
              The interior is defined by the <c>rectangle</c> parameter.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.#ctor(C1.Framework.Drawing.Gdi.RegionData)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object from the <see cref="T:C1.Framework.Drawing.Gdi.RegionData"/> object.
            </summary>
            <param name="data">
              A data package save the data of a <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </param>
            <returns>
              A newly created Windows region handle.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.#ctor(System.IntPtr)">
            <summary>
              Create a new region from existed region handle
            </summary>
            <param name="regionHandle">
              A <see cref="T:System.IntPtr"/> that indicats the handle of the gdi region.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreateHandle(System.Drawing.Rectangle)">
            <summary>
              Creates a Windows region handle using the specified <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure.
            </param>
            <returns>
              A newly created Windows region handle.
            </returns>
            <internalonly/>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.GetData">
            <summary>
              Retieves the rectangle information that makes up this instance
              of the <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <returns>
              A byte array holding the region information.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.GetBounds">
            <summary>
              Gets a <see cref="T:System.Drawing.Rectangle"/> structure that represents a rectangle 
              that bounds this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <returns>
              A <see cref="T:System.Drawing.Rectangle"/> structure that represents the bounding rectangle
              for this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CombineRegion(System.Drawing.Rectangle,System.Int32)">
            <summary>
              Updates the specified rectangle with the region in this 
              <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object using the specified mode.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to process.
            </param>
            <param name="mode">
              A region operation. (RGN_XOR, RGN_AND, RGN_DIFF, RGN_COPY, RGN_NOT)
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CombineRegion(System.IntPtr,System.Int32)">
            <summary>
              Updates the specified region with the region in this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object using the specified mode.
            </summary>
            <param name="srcRegionHandle">
              A Windows region handle to process.
            </param>
            <param name="mode">
              A region operation. (RGN_XOR, RGN_AND, RGN_DIFF, RGN_COPY, RGN_NOT)
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Complement(System.Drawing.Rectangle)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to contain the portion of the specified
              <see cref="T:System.Drawing.Rectangle"/> structure that does not intersect with this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to complement this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Complement(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to contain the portion of the specified <b>Region</b> object
              that does not intersect with this <b>Region</b> object.
            </summary>
            <param name="region">
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to complement this <b>Region</b> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Intersect(System.Drawing.Rectangle)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the intersection of itself 
              with the specified <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to intersect with this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Intersect(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the intersection of itself with the specified <b>Region</b> object.
            </summary>
            <param name="region">
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to intersect with this <b>Region</b> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Exclude(System.Drawing.Rectangle)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the portion of its interior 
              that does not intersect with the specified <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to exclude from this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Exclude(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the portion of its interior 
              that does not intersect with the specified <b>Region</b> object.
            </summary>
            <param name="region">
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to exclude from this <b>Region</b> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Union(System.Drawing.Rectangle)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the union of itself and the 
              specified <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to unite with this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> 
              object.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Union(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the union of itself and the specified <b>Region</b> object.
            </summary>
            <param name="region">
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to unite with this <b>Region</b> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Xor(System.Drawing.Rectangle)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the union minus the intersection of itself with 
              the specified <see cref="T:System.Drawing.Rectangle"/> strcuture.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to <b>XOR</b> with this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Xor(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Updates this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to the union minus the intersection of itself with
              the specified <b>Region</b> object.
            </summary>
            <param name="region">
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to <b>XOR</b> with this <b>Region</b> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.IsVisible(System.Drawing.Point)">
            <summary>
              Tests whether the specified <see cref="T:System.Drawing.Point"/> structure is contained 
              within this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="point">
              The <see cref="T:System.Drawing.Point"/> structure to test.
            </param>
            <returns>
              This method returns <b>true</b> when <c>point</c> is contained within this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object;
              otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.IsVisible(System.Drawing.Rectangle)">
            <summary>
              Tests whether any portion of the specified <see cref="T:System.Drawing.Rectangle"/> structure 
              is contained within this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="rectangle">
              The <see cref="T:System.Drawing.Rectangle"/> structure to test.
            </param>
            <returns>
              This method returns <b>true</b> when any portion of <c>rectangle</c> is contained 
              within this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.IsEmpty">
            <summary>
              Tests whether this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object has an empty interior.
            </summary>
            <returns>
             This method returns <b>true</b> if the interior of this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object is empty; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.MakeEmpty">
            <summary>
              Initializes this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to an empty interior.
            </summary>
            <returns>
              This method does not return a value.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Translate(System.Int32,System.Int32)">
            <summary>
              Offsets the coordinates of this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object by 
              the specified amount.
            </summary>
            <param name="dx">
              The amount to offset this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object horizontally.
            </param>
            <param name="dy">
              The amount to offset this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object vertically.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Equals(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Tests whether the specified <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object is identical to this <b>Region</b> object.
            </summary>
            <param name="region">
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to test.
            </param>
            <returns>
              This method returns <b>true</b> if the interior of region <c>region</c>
              is identical to the interior of this region; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Clone">
            <summary>
              Creates an exact copy if this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <returns>
              The <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object that this method creates.
            </returns>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.Region._matrix">
            <summary>
              A <see cref="P:C1.Framework.Drawing.Gdi.Region.TransformMatrix"/> indicate the matrix for transforming this region
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Region.TransformMatrix">
            <summary>
              Get or set the transform matrix
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Region.Handle">
            <summary>
              Get a handle which is being transformed to this <b>Region</b> object.
            </summary>
            <value>
              A Windows handle to this <b>Region</b> object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Region.InternalHandle">
            <summary>
              Get a handle to this <b>Region</b> object
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.Scan(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Returns an array of <see cref="T:System.Drawing.Rectangle"/> structures that
              approximate this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object to be scaned.
            </param>
            <returns>
              An array of <see cref="T:System.Drawing.Rectangle"/> structures that approximate this <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.FromGdiplusRegion(System.Drawing.Region)">
            <summary>
              Create a new gdi region that is same as the gdi+ region.
            </summary>
            <param name="gdiplusRegion">
              A <see cref="T:System.Drawing.Region"/> object that indicates the gdi+ region.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object that indicates the new gdi region.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.ToGdiplusRegion(C1.Framework.Drawing.Gdi.Region)">
            <summary>
              Creates a new gdi+ <see cref="T:System.Drawing.Region"/> object from the gdi <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </summary>
            <param name="region">
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object that indicates the new gdi region.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Region"/> object that indicates the gdi+ region.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreateRoundedRectangleRegion(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
              Creates a rectangular <see cref="T:C1.Framework.Drawing.Gdi.Region"/> with rounded corners.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the interior of the new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object.
            </param>
            <param name="ellipseWidth">
              Specifies the width of the ellipse used to create the rounded corners in logical units.
            </param>
            <param name="ellipseHeight">
              Specifies the height of the ellipse used to create the rounded corners in logical units.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicates the <b>region</b> with rounded corners.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreateEllipseRegion(System.Drawing.Rectangle)">
            <summary>
              Create a ellipse region.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> that just contains the ellipse.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicates the ellipse region
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreatePieRegion(System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Create a pie region.
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> structure that defines the boundaries of the pie.
            </param>
            <param name="startAngle">
              A <b>float</b> value that defines the start angle of the pie.
            </param>
            <param name="sweepAngle">
              A <b>float</b> value that defines the sweep angle of the pie.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicates the pie region.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreateChordOrPieRegion(System.Drawing.Rectangle,System.Single,System.Single,System.Boolean)">
            <summary>
              Implementation.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.GetPart(System.Drawing.Rectangle,System.Single)">
            <summary>
                          
                         6
                    5---------7
                    |    |    |
                  4 | ---|--- | 0 
                    |    |    |
                    3---------1 
                         2                      
            
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreateChordRegion(System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
              Creates a chord region (a region bounded by the intersection of an ellipse and a line segment, called a secant). 
            </summary>
            <param name="rectangle">
              A <see cref="T:System.Drawing.Rectangle"/> indicates the bounds of the ellipse.
            </param>
            <param name="startAngle">
              A <b>float</b> specifies the start angle, in degrees. 
            </param>
            <param name="sweepAngle">
              A <b>float</b> specifies the sweep angle, in degrees, relative to the starting angle.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Region"/> indicates the chord region.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreatePolygonRegion(System.Drawing.Point[])">
            <summary>
              Create a polygons region from the point array which defines the vertices of the polygon.
            </summary>
            <param name="polygonPoints">
              A <see cref="T:System.Drawing.Point"/> array that defines the vertices of the polygon. 
            </param>
            <remarks>
              This method creates a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object with a polygon interior interior.
              The interior is defined by the <c>polygonPoints</c> parameter.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreatePolygonRegion(System.Drawing.Point[],C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode)">
            <summary>
              Create a polygons region from the point array which defines the vertices of the polygon.
            </summary>
            <param name="polygonPoints">
              A <see cref="T:System.Drawing.Point"/> array that defines the vertices of the polygon. 
            </param>
            <param name="polyFillMode">
              <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode"/> Indicates the poly fill mode is "alternate" or "winding"
            </param>
            <remarks>
              This method creates a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object with a polygon interior interior.
              The interior is defined by the <c>polygonPoints</c> parameter.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Region.CreatePolygonRegionHandle(System.Drawing.Point[],C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode)">
            <summary>
              Create a polygons region handle from the point array which defines the vertices of the polygon.
            </summary>
            <param name="polygonPoints">
              A <see cref="T:System.Drawing.Point"/> array that defines the vertices of the polygon. 
            </param>
            <param name="polyFillMode">
              <see cref="T:C1.Framework.Drawing.Gdi.DeviceContexts.PolyFillMode"/> Indicates the poly fill mode is "alternate" or "winding"
            </param>
            <remarks>
              This method creates a new <see cref="T:C1.Framework.Drawing.Gdi.Region"/> object with a polygon interior interior.
              The interior is defined by the <c>polygonPoints</c> parameter.
            </remarks>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.StringFormatFlags">
            <summary>
              Specifies the display and layout information for text strings.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.Nothing">
            <summary>
              No any flags.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.LineLimit">
            <summary>
              Only entire lines are laid out in the formatting rectangle. 
              By default layout continues until the end of the text, 
              or until no more lines are visible as a result of clipping, 
              whichever comes first. 
              Note that the default settings allow the last line to be partially 
              obscured by a formatting rectangle that is not a whole multiple 
              of the line height. To ensure that only whole lines are seen, 
              specify this value and be careful to provide a formatting rectangle 
              at least as tall as the height of one line.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.MultiLine">
            <summary>
              Shows string on one or more lines.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.NoWrap">
            <summary>
              Disables wrapping of text between lines when formatting within a rectangle. 
              This flag is implied when a point is passed instead of a rectangle, 
              or when the specified rectangle has a zero line length.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.WordWrap">
            <summary>
              Breaks words. Lines are automatically broken between words if a word would extend past the edge of the 
              pecified rectangle. A carriage return-line feed sequence also breaks the line. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.RightToLeft">
            <summary>
              Specifies that text is right to left.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.Vertical">
            <summary>
              Specifies that text is vertical.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.NoClip">
            <summary>
              Overhanging parts of glyphs, and unwrapped text reaching outside 
              the formatting rectangle are allowed to show. 
              By default all text and glyph parts reaching outside the formatting 
              rectangle are clipped.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormatFlags.ExpandTabs">
            <summary>
              Expands tab characters. The default number of characters per tab is eight.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.StringAlignment">
            <summary>
              Specifies the alignment of a text string relative to its layout rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringAlignment.Center">
            <summary>
              Specifies that text is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringAlignment.Far">
            <summary>
              Specifies that text is aligned far from the origin position of the layout rectangle. 
              In a left-to-right layout, the far position is right. 
              In a right-to-left layout, the far position is left.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringAlignment.Near">
            <summary>
              Specifies the text be aligned near the layout. 
              In a left-to-right layout, the near position is left. 
              In a right-to-left layout, the near position is right. 
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.HotkeyPrefix">
            <summary>
              Specifies the type of display for hot-key prefixes that relate to text.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HotkeyPrefix.None">
            <summary>
              No hot-key prefix. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HotkeyPrefix.Show">
            <summary>
              Display the hot-key prefix. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.HotkeyPrefix.Hide">
            <summary>
              Do not display the hot-key prefix. 
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.StringTrimming">
            <summary>
              Specifies how to trim characters from a string that does not completely fit into a layout shape.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringTrimming.None">
            <summary>
              Specifies no trimming.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringTrimming.Character">
            <summary>
              Specifies that the text is trimmed to the nearest character.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringTrimming.Word">
            <summary>
              Specifies that text is trimmed to the nearest word.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringTrimming.EllipsisCharacter">
            <summary>
              Specifies that the text is trimmed to the nearest character, 
              and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringTrimming.EllipsisWord">
            <summary>
              Specifies that text is trimmed to the nearest word, and an ellipsis is 
              inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringTrimming.EllipsisPath">
            <summary>
              The center is removed from trimmed lines and replaced by an ellipsis. 
              The algorithm keeps as much of the last slash-delimited segment of the line as possible.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.TabUnit">
            <summary>
              Specifies the unit of the tab stops or offset.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TabUnit.Pixel">
            <summary>
              The unit of the tab stops or offset is base on logical point of the display surface.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TabUnit.Character">
            <summary>
              The unit of the tab stops or offset are base on the character number.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.StringFormat">
            <summary>
              Encapsulates text layout information (such as alignment and line spacing), 
              display manipulations (such as ellipsis insertion and national digit substitution) 
              and OpenType features.
            </summary>
            <remarks>
              Many common formats are provided through the <see cref="T:C1.Framework.Drawing.Gdi.StringFormatFlags"/> enumeration.
              <b>StringFormat</b> objects can be changed.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._alignment">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.StringFormat.Alignment"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._lineAlignment">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.StringFormat.LineAlignment"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._formatFlags">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.StringFormat.FormatFlags"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._hotkeyPrefix">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.StringFormat.HotkeyPrefix"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._trimming">
            <summary>
              Saves the data of the <see cref="P:C1.Framework.Drawing.Gdi.StringFormat.Trimming"/> property.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._firstTabOffset">
            <summary>
              Saves the data of the tab info.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._tabStops">
            <summary>
              Saves the data of the tab info.
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.StringFormat._tabUnit">
            <summary>
              Saves the data of the tab info.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.#ctor">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.#ctor(C1.Framework.Drawing.Gdi.StringFormatFlags)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object with the specified 
              <see cref="T:C1.Framework.Drawing.Gdi.StringFormatFlags"/> enumeration.
            </summary>
            <param name="formatFlags">
              The <see cref="T:C1.Framework.Drawing.Gdi.StringFormatFlags"/> enumeration for the new 
              <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.#ctor(C1.Framework.Drawing.Gdi.StringAlignment,C1.Framework.Drawing.Gdi.StringAlignment,C1.Framework.Drawing.Gdi.StringFormatFlags)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object with the specified
              <see cref="T:C1.Framework.Drawing.Gdi.StringAlignment"/> and <see cref="T:C1.Framework.Drawing.Gdi.StringFormatFlags"/> enumeration.
            </summary>
            <param name="alignment">
              A <see cref="T:C1.Framework.Drawing.Gdi.StringAlignment"/> that represents the horizontal alignment.
            </param>
            <param name="lineAlignment">
              A <see cref="T:C1.Framework.Drawing.Gdi.StringAlignment"/> that represents the vertical alignment.
            </param>
            <param name="formatFlags">
              The <see cref="T:C1.Framework.Drawing.Gdi.StringFormatFlags"/> enumeration for the new 
              <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.#ctor(C1.Framework.Drawing.Gdi.StringFormat)">
            <summary>
              Initializes a new <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object from the specified 
              existing <b>StringFormat</b> object.
            </summary>
            <param name="stringFormat">
              The <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object from which to initialize the new 
              <b>StringFormat</b> object. 
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.StringFormat.Alignment">
            <summary>
              Gets or sets text alignment information.
            </summary>
            <value>
              A StringAlignment enumeration that specifies text alignment information.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.StringFormat.LineAlignment">
            <summary>
              Gets or sets the line alignment.
            </summary>
            <value>
              A StringAlignment enumeration that represents the line alignment.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.StringFormat.FormatFlags">
            <summary>
              Gets or sets a StringFormatFlags enumeration that contains formatting information.
            </summary>
            <value>
              A StringFormatFlags enumeration that contains formatting information.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.StringFormat.HotkeyPrefix">
            <summary>
              Gets or sets the HotkeyPrefix object for this StringFormat object.
            </summary>
            <value>
              The HotkeyPrefix object for this StringFormat object.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.StringFormat.Trimming">
            <summary>
              Gets or sets the StringTrimming enumeration for this StringFormat object.
            </summary>
            <value>
              A StringTrimming enumeration that indicates how text drawn with 
              this StringFormat object is trimmed when it exceeds the edges of the layout rectangle.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.GetTabStops(System.Int32@,C1.Framework.Drawing.Gdi.TabUnit@)">
            <summary>
              Gets the tab stops for this StringFormat object.
            </summary>
            <param name="firstTabOffset">
              The number of spaces between the beginning of a text line and the first tab stop. 
            </param>
            <param name="tabUnit">
              The unit of the tab stops and offset.
            </param>
            <returns>
              An array of distances (in number of spaces) between tab stops.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.SetTabStops(System.Int32,System.Int32[],C1.Framework.Drawing.Gdi.TabUnit)">
            <summary>
              Sets tab stops for this StringFormat object.
            </summary>
            <param name="firstTabOffset">
              The number of spaces between the beginning of a line of text and the first tab stop.
            </param>
            <param name="tabStops">
              An array of distances (in number of spaces) between tab stops.
            </param>
            <param name="tabUnit">
              The unit of the tab stops and offset.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.StringFormat.Clone">
            <summary>
              Creates a copy of the <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object.
            </summary>
            <returns>
              Returns a copy of the <see cref="T:C1.Framework.Drawing.Gdi.StringFormat"/> object.
            </returns>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.TransformOrder">
            <summary>
              Specifies the order for matrix transform operations.
            </summary>
            <remarks>
              Matrix transform operations are not necessarily commutative. 
              The order in which they are applied is important.
            </remarks>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TransformOrder.Append">
            <summary>
              The new operation is applied after the old operation. 
            </summary>
        </member>
        <member name="F:C1.Framework.Drawing.Gdi.TransformOrder.Prepend">
            <summary>
              The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.TransformMatrix">
            <summary>
              The TransformMatrix class contains the transform info for transforming 
              between world-space and page-space in GDI.
            </summary>
            <value>
              TransformMatrix is a 3x3 matrix, but we only use M11, M12, M21, M22, Dx and Dy. 
              | M11,  M12,  0 |
              | M21,  M22,  0 |
              | Dx,   Dy,   1 |
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.#ctor(System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.M11">
            <summary>
              Gets or sets the value of M11.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.M12">
            <summary>
              Gets or sets the value of M12.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.M21">
            <summary>
              Gets or sets the value of M21.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.M22">
            <summary>
              Gets or sets the value of M22.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.Dx">
            <summary>
              Gets or sets the value of Dx.
            </summary>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.Dy">
            <summary>
              Gets or sets the value of Dy.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Rotate(System.Single)">
            <summary>
              Applies a clockwise rotation of the specified angle about the origin to this Matrix object.
            </summary>
            <param name="angle">
              A <b>float</b> indicates the clockwise angle.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Translate(System.Single,System.Single)">
            <summary>
              Applies the specified translation vector (offsetX and offsetY) to this Matrix object 
              by prepending the translation vector.
            </summary>
            <param name="offsetX">
              The x value by which to translate this Matrix.
            </param>
            <param name="offsetY">
              The y value by which to translate this Matrix.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Scale(System.Single,System.Single)">
            <summary>
              Applies the specified scale vector to this Matrix object by prepending the scale vector.
            </summary>
            <param name="scaleX">
              The value by which to scale this Matrix in the x-axis direction.
            </param>
            <param name="scaleY">
              The value by which to scale this Matrix in the y-axis direction.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Shear(System.Single,System.Single)">
            <summary>
              Applies the specified shear vector to this Matrix object by prepending the shear transform.
            </summary>
            <param name="shearX">
              The horizontal shear factor. 
            </param>
            <param name="shearY">
              The vertical shear factor.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.XAxisReflect">
            <summary>
              Applies the x-axis reflecting to this Matrix object.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.YAxisReflect">
            <summary>
              Applies the y-axis reflecting to this Matrix object.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.SlashReflect">
            <summary>
              Applies the slash reflecting to this Matrix object.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.BackslashReflect">
            <summary>
              Applies the backslash reflecting to this Matrix object.
            </summary>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Rotate(System.Single,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies a clockwise rotation of the specified angle about the origin to this Matrix object.
            </summary>
            <param name="angle">
              A <b>float</b> indicates the clockwise angle.
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the rotation is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Translate(System.Single,System.Single,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the specified translation vector (offsetX and offsetY) to this Matrix object 
              by prepending the translation vector.
            </summary>
            <param name="offsetX">
              The x value by which to translate this Matrix.
            </param>
            <param name="offsetY">
              The y value by which to translate this Matrix.
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the translation is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Scale(System.Single,System.Single,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the specified scale vector to this Matrix object by prepending the scale vector.
            </summary>
            <param name="scaleX">
              The value by which to scale this Matrix in the x-axis direction.
            </param>
            <param name="scaleY">
              The value by which to scale this Matrix in the y-axis direction.
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the scaling is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Shear(System.Single,System.Single,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the specified shear vector to this Matrix object by prepending the shear transform.
            </summary>
            <param name="shearX">
              The horizontal shear factor. 
            </param>
            <param name="shearY">
              The vertical shear factor.
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the shearing is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.XAxisReflect(C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the x-axis reflecting to this Matrix object.
            </summary>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the reflection is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.YAxisReflect(C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the y-axis reflecting to this Matrix object.
            </summary>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the reflection is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.SlashReflect(C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the slash reflecting to this Matrix object.
            </summary>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the reflection is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.BackslashReflect(C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the backslash reflecting to this Matrix object.
            </summary>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the reflection is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.Transform(C1.Framework.Drawing.Gdi.Coordinate)">
            <summary>
              Transform a <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object to a new <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicats the old value.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicats the new value.
            </returns>
            <remarks>
              x' = x * M11 + y * M21 + Dx
              y' = x * M12 + y * M22 + Dy
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.InverseTransform(C1.Framework.Drawing.Gdi.Coordinate)">
            <summary>
              Inverse transform a <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object to a new <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicats the old value.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicats the new value.
            </returns>
            <remarks>
              x = ((x' - Dx) * M22 - (y' - Dy) * M21) / (M11 * M22 - M12 * M21)
              y = ((y' - Dy) * M11 - (x' - Dx) * M12) / (M11 * M22 - M12 * M21)
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.RotateAt(C1.Framework.Drawing.Gdi.Coordinate,System.Single)">
            <summary>
              Applies a clockwise rotation to this Matrix object around the point 
              specified in the point parameter, and by prepending the rotation
            </summary>
            <param name="point">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> class that represents the center of the rotation. 
            </param>
            <param name="angle">
              The angle (extent) of the rotation. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.ReflectAt(C1.Framework.Drawing.Gdi.Coordinate,C1.Framework.Drawing.Gdi.Coordinate)">
            <summary>
              Applies the reflecting by speical line to this Matrix object.
            </summary>
            <param name="startPoint">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicate the start point of the line.
            </param>
            <param name="endPoint">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicate the end point of the line.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.ScaleAt(C1.Framework.Drawing.Gdi.Coordinate,System.Single,System.Single)">
            <summary>
              Applies the specified scale vector to this Matrix object by prepending the scale vector at speical point.
            </summary>
            <param name="point">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> class that represents the center of the scale. 
            </param>
            <param name="scaleX">
              The value by which to scale this Matrix in the x-axis direction.
            </param>
            <param name="scaleY">
              The value by which to scale this Matrix in the y-axis direction.
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.RotateAt(C1.Framework.Drawing.Gdi.Coordinate,System.Single,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies a clockwise rotation to this Matrix object around the point 
              specified in the point parameter, and by prepending the rotation
            </summary>
            <param name="point">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> class that represents the center of the rotation. 
            </param>
            <param name="angle">
              The angle (extent) of the rotation. 
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the rotation is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.ReflectAt(C1.Framework.Drawing.Gdi.Coordinate,C1.Framework.Drawing.Gdi.Coordinate,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the reflecting by speical line to this Matrix object.
            </summary>
            <param name="startPoint">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicate the start point of the line.
            </param>
            <param name="endPoint">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicate the end point of the line.
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the reflection is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.ScaleAt(C1.Framework.Drawing.Gdi.Coordinate,System.Single,System.Single,C1.Framework.Drawing.Gdi.TransformOrder)">
            <summary>
              Applies the specified scale vector to this Matrix object by prepending the scale vector at speical point.
            </summary>
            <param name="point">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> class that represents the center of the scale. 
            </param>
            <param name="scaleX">
              The value by which to scale this Matrix in the x-axis direction.
            </param>
            <param name="scaleY">
              The value by which to scale this Matrix in the y-axis direction.
            </param>
            <param name="order">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformOrder"/> enumeration that specifies the order (append or prepend) in 
              which the scaling is applied to this Matrix object. 
            </param>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.op_Explicit(C1.Framework.Drawing.Gdi.TransformMatrix)~System.Drawing.Drawing2D.Matrix">
            <summary>
              Explicit convert a TransformMatrix object to a System.Drawing.Drawing2D.Matrix object.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> value that will be convert to a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object indicates the converted object.
            </returns>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.TransformMatrix.op_Explicit(System.Drawing.Drawing2D.Matrix)~C1.Framework.Drawing.Gdi.TransformMatrix">
            <summary>
              Explicit convert a System.Drawing.Drawing2D.Matrix object to a TransformMatrix object.
            </summary>
            <param name="value">
              A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that will be convert to a <see cref="T:C1.Framework.Drawing.Gdi.TransformMatrix"/> object.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Drawing2D.Matrix"/> value indicates the converted object.
            </returns>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.TransformMatrix.Unit">
            <summary>
              Gets the unit matrix.
            </summary>
        </member>
        <member name="T:C1.Framework.Drawing.Gdi.Coordinate">
            <summary>
              Defines a class the represents the coordinate concept in mathematics.
            </summary>
            <value>
              Coordinate: Any of a set of two or more numbers used to determine the position 
              of a point, line, curve, or plane in a space of a given dimension with respect 
              to a system of lines or other fixed reference.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Coordinate.#ctor(System.Single,System.Single)">
            <summary>
              Indicates a new instance of the <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> class.
            </summary>
            <param name="x">
              A <b>float</b> value indicate the value of x-coordinate
            </param>
            <param name="y">
              A <b>float</b> value indicate the value of x-coordinate
            </param>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Coordinate.X">
            <summary>
              Gets or sets the value of x-coordinate.
            </summary>
            <value>
              A <b>float</b> value indicates the x-coordinate.
            </value>
        </member>
        <member name="P:C1.Framework.Drawing.Gdi.Coordinate.Y">
            <summary>
              Gets or sets the value of y-coordinate.
            </summary>
            <value>
              A <b>float</b> value indicates the y-coordinate.
            </value>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Coordinate.op_Implicit(System.Drawing.Point)~C1.Framework.Drawing.Gdi.Coordinate">
            <summary>
              Implicit convert a Point value to a Coordinate object.
            </summary>
            <param name="value">
              A <see cref="T:System.Drawing.Point"/> value that will be convert to a <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object indicates the converted object.
            </returns>
            <remarks>
              The reason of providing implict converting is that Point and Coordinate is same conception in drawing.
            </remarks>
        </member>
        <member name="M:C1.Framework.Drawing.Gdi.Coordinate.op_Implicit(C1.Framework.Drawing.Gdi.Coordinate)~System.Drawing.Point">
            <summary>
              Implicit convert a Coordinate value to a Point object.
            </summary>
            <param name="value">
              A <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object that will be convert to a <see cref="T:C1.Framework.Drawing.Gdi.Coordinate"/> object.
            </param>
            <returns>
              A <see cref="T:System.Drawing.Point"/> value indicates the converted object.
            </returns>
        </member>
        <member name="T:C1.Framework.Forms.SubclassNativeWindow">
            <summary>
              Represents a subclass window wrapper class.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._defWindowProc">
            <summary>
              Indicates the window proc ptr of the attached window.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._handle">
            <summary>
              Indicates the handle of the window.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._suppressedGC">
            <summary>
              A <b>bool</b> value indicates whether or not re-register GC for finialize.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._userDefWindowProc">
            <summary>
              Indicates the default window proc ptr of a window.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._windowProcPtr">
            <summary>
              Catches the window proc ptr for current window proc.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._windowProc">
            <summary>
              Delegate to current window proc.
            </summary>
        </member>
        <member name="F:C1.Framework.Forms.SubclassNativeWindow._weakReferenceThis">
            <summary>
              Used to keep current object alive.
            </summary>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:C1.Framework.Forms.SubclassNativeWindow"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.AssignHandle(System.IntPtr)">
            <summary>
              Attaches handle to target window.
            </summary>
            <param name="handle">
              The handle of target window.
            </param>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.ReleaseHandle">
            <summary>
              Releases the handle.
            </summary>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.OnHandleChange">
            <summary>
              Notifies that the handle is changed.
            </summary>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.OnThreadException(System.Exception)">
            <summary>
              Notifies inner exception occurs when processing window message.
            </summary>
            <param name="e">
              A <see cref="T:System.Exception"/> object indicates the inner exception.
            </param>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
              Invokes the window procedure associated with this window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/>. that is associated with the current Windows message.
            </param>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
              Invokes the default window procedure associated with this window.
            </summary>
            <param name="m">
              A <see cref="T:System.Windows.Forms.Message"/>. that is associated with the current Windows message.
            </param>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.ReleaseHandle(System.Boolean)">
            <summary>
              Release the window handle.
            </summary>
            <param name="unSubclass">
              <see langword="true"/> if obviously performs unsubclass operation; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.UnSubclass">
            <summary>
              Remove attached subclass.
            </summary>
        </member>
        <member name="M:C1.Framework.Forms.SubclassNativeWindow.Callback(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
              WndProc callback that attached to the target window to performs subclass.
            </summary>
            <param name="hWnd">
              An <see cref="T:System.IntPtr"/> value indicates the handle of the target window.
            </param>
            <param name="msg">
              An <see cref="T:System.Int32"/> value indicates the message ID.
            </param>
            <param name="wparam">
              An <see cref="T:System.IntPtr"/> value indicates the wParam for the windows message.
            </param>
            <param name="lparam">
              An <see cref="T:System.IntPtr"/> value indicates the lParam for the windows message.
            </param>
            <returns>
              An <see cref="T:System.IntPtr"/> value indicates the return value of processing the message.
            </returns>
        </member>
        <member name="P:C1.Framework.Forms.SubclassNativeWindow.Handle">
            <summary>
              Gets the handle to the window represented by the <see cref="T:C1.Framework.Forms.SubclassNativeWindow"/>.
            </summary>
            <value>
              A handle to the window represented by the <see cref="T:C1.Framework.Forms.SubclassNativeWindow"/>.
            </value>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods">
            <summary>
              Defines the native methods base on Gdi32 SDK.
            </summary>
            <remarks>
              The NativeMethods class defines some basic data structures and constants, which
              is given in Gdi32 SDK.
            </remarks>
            <summary>
              Defines the native methods base on Win32 SDK.
            </summary>
            <remarks>
              The NativeMethods class defines some basic data structures and constants, which
              is given in Win32 SDK.
            </remarks>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.RECT">
            <summary>
              The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECT.Left">
            <summary>
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECT.Top">
            <summary>
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECT.Right">
            <summary>
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECT.Bottom">
            <summary>
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs the RECT structure.
            </summary>
            <param name="left">
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="top">
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="right">
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </param>
            <param name="bottom">
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </param>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructs the RECT structure.
            </summary>
            <param name="rectangle">
              Specifies the rectangle
            </param>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.RECT.Offset(System.Int32,System.Int32)">
            <summary>
              Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">
              The horizontal offset.
            </param>
            <param name="y">
              The vertical offset.
            </param>
        </member>
        <member name="P:C1.Framework.Platform.NativeMethods.RECT.Width">
            <summary>
              Gets the width.
            </summary>
        </member>
        <member name="P:C1.Framework.Platform.NativeMethods.RECT.Height">
            <summary>
              Gets the height.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.RECT.op_Explicit(C1.Framework.Platform.NativeMethods.RECT)~System.Drawing.Rectangle">
            <summary>
              Explicity convertes a <see cref="T:C1.Framework.Platform.NativeMethods.RECT"/> to <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rect">
              A <see cref="T:C1.Framework.Platform.NativeMethods.RECT"/> indicates the value of the <see cref="T:C1.Framework.Platform.NativeMethods.RECT"/>.
            </param>
            <returns>
              Returns a <see cref="T:System.Drawing.Rectangle"/> as the result of the converter.
            </returns>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.LOGBRUSH">
            <summary>
              The LOGBRUSH structure defines the style, color, and pattern of a physical brush. 
              It is used by the Windows CreateBrushIndirect and ExtCreatePen functions.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.LOGBRUSH.Style">
            <summary>
              Specifies the brush style.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.LOGBRUSH.Color">
            <summary>
              Specifies the color in which the brush is to be drawn.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.LOGBRUSH.Hatch">
            <summary>
              Specifies a hatch style. The meaning depends on the brush style defined by Style.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.XFORM">
            <summary>
              The XFORM structure contains information for a world-space to page-space transformation.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.XFORM.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              The constructor initializes a new instance of the <b>XFORM</b> structure.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.LOGFONT.Equals(C1.Framework.Platform.NativeMethods.LOGFONT)">
            <summary>
              Add this methods in order to recudce the warning count of Fon32 class.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.RGNDATA">
            <summary>
              The RGNDATA structure contains a header and an array of rectangles 
              that compose a region. The rectangles are sorted top to bottom, 
              left to right. They do not overlap.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATA.RegionHeader">
            <summary>
              The members of this structure specify the type of region 
              (whether it is rectangular or trapezoidal), the number of rectangles 
              that make up the region, the size of the buffer 
              that contains the rectangle structures, and so on.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATA.Buffer">
            <summary>
              Specifies an arbitrary-size buffer that contains the RECT structures 
              that make up the region.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.RGNDATAHEADER">
            <summary>
              The RGNDATAHEADER structure describes the data returned by the GetRegionData function.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATAHEADER.Size">
            <summary>
              Specifies the size, in bytes, of the header.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATAHEADER.Type">
            <summary>
              Specifies the type of region. This value must be RDH_RECTANGLES.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATAHEADER.Count">
            <summary>
              Specifies the number of rectangles that make up the region.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATAHEADER.RegionSize">
            <summary>
              Specifies the size of the buffer required to receive the RECT structure 
              that specifies the coordinates of the rectangles that make up the region. 
              If the size is not known, this member can be zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RGNDATAHEADER.Bounds">
            <summary>
              Specifies a bounding rectangle for the region in logical units.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.POINT">
            <summary>
              The POINT structure defines the x and y coordinates of a point.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.POINT.X">
            <summary>
              Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.POINT.Y">
            <summary>
              Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="x">
              Specifies the x-coordinate of the point.
            </param>
            <param name="y">
              Specifies the y-coordinate of the point.
            </param>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.POINT.#ctor(System.Drawing.Point)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="point">
              A point whith another type.
            </param>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.SIZE">
            <summary>
              The SIZE structure specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.SIZE.cx">
            <summary>
              Specifies the rectangle's width. The units depend on which function uses this.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.SIZE.cy">
            <summary>
              Specifies the rectangle's height. The units depend on which function uses this.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the SIZE structure.
            </summary>
            <param name="width">Specifies the size's width.</param>
            <param name="height">Specifies the size's height.</param>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.COMPOSITIONFORM">
            <summary>
              The COMPOSITIONFORM structure contains style and position information 
              for a composition window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.COMPOSITIONFORM.Style">
            <summary>
              Indicates position style.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.COMPOSITIONFORM.CurrentPosition">
            <summary>
              A POINT structure containing the coordinates of 
              the upper-left corner of the composition window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.COMPOSITIONFORM.Area">
            <summary>
              A RECT structure containing the coordinates of 
              the upper-left and lower-right corners of the composition window.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.COMPOSITIONFORM.#ctor(System.Int32,C1.Framework.Platform.NativeMethods.POINT,C1.Framework.Platform.NativeMethods.RECT)">
            <summary>
              Constructs the COMPOSITIONFORM structure.
            </summary>
            <param name="style">
              Specifies the position style.
            </param>
            <param name="currentPosition">
              Specifies the coordinates of the upper-left corner 
              of the composition window
            </param>
            <param name="area">
              Specifies the coordinates of the upper-left and 
              lower-right corners of the composition window.
            </param>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.CANDIDATEFORM">
            <summary>
              The CANDIDATEFORM structure contains style and position information 
              for a composition window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CANDIDATEFORM.Index">
            <summary>
              Indicaes the index of the candidate form.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CANDIDATEFORM.Style">
            <summary>
              Indicates position style.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CANDIDATEFORM.CurrentPosition">
            <summary>
              A POINT structure containing the coordinates of 
              the upper-left corner of the composition window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CANDIDATEFORM.Area">
            <summary>
              A RECT structure containing the coordinates of 
              the upper-left and lower-right corners of the composition window.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.CANDIDATEFORM.#ctor(System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.POINT,C1.Framework.Platform.NativeMethods.RECT)">
            <summary>
              Constructs the CANDIDATEFORM structure.
            </summary>
            <param name="index">
              Specifies the index of the candidate.
            </param>
            <param name="style">
              Specifies the position style.
            </param>
            <param name="currentPosition">
              Specifies the coordinates of the upper-left corner 
              of the composition window
            </param>
            <param name="area">
              Specifies the coordinates of the upper-left and 
              lower-right corners of the composition window.
            </param>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.MSG">
            <summary>
              The MSG structure contains message information from a thread's message queue.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.hWnd">
            <summary>
              Handle to the window whose window procedure receives the message.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.Message">
            <summary>
              Specifies the message identifier. Applications can only use the low word;
              the high word is reserved by the system.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.wParam">
            <summary>
              Specifies additional information about the message. The exact meaning
              depends on the value of the message member.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.lParam">
            <summary>
              Specifies additional information about the message. The exact meaning
              depends on the value of the message member.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.Time">
            <summary>
              Specifies the time at which the message was posted.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.Point_X">
            <summary>
              Specifies the cursor position, x direction in screen coordinates,
              when the message was posted.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.MSG.Point_Y">
            <summary>
              Specifies the cursor position, y direction in screen coordinates,
              when the message was posted.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.NCCALCSIZEPARAMS">
            <summary>
              The NCCALCSIZEPARAMS structure contains information that 
              an application can use while processing the WM_NCCALCSIZE message 
              to calculate the size, position, and valid contents of 
              the client area of a window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.NCCALCSIZEPARAMS.rect0">
            <summary>
              The rectangle contains the new coordinates of 
              a window that has been moved or resized.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.NCCALCSIZEPARAMS.rect1">
            <summary>
              The rectangle contains the coordinates of 
              the window before it was moved or resized.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.NCCALCSIZEPARAMS.rect2">
            <summary>
              The rectangle contains the coordinates of 
              the client area of a window before it was moved or resized.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.NCCALCSIZEPARAMS.lppos">
            <summary>
              Points to a WINDOWPOS structure that contains the size and 
              position values specified in the operation that caused 
              the window to be moved or resized.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.PAINTSTRUCT">
            <summary>
              The PAINTSTRUCT structure contains information for an application.
              This information can be used to paint the client area of a window
              owned by that application.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.hDC">
            <summary>
              Handle to the display DC to be used for painting.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Erase">
            <summary>
              Specifies whether the background must be erased.This value is
              nonzero if the application should erase the background. 
              The application is responsible for erasing the background 
              if a window class is created without a background brush.
              For more information, see the description of the hbrBackground member of
              the WNDCLASS structure.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Paint_Left">
            <summary>
              Specifies a left value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Paint_Top">
            <summary>
              Specifies a top value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Paint_Right">
            <summary>
              Specifies a right value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Paint_Bottom">
            <summary>
              Specifies a bottom value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Restore">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.IncUpdate">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Reserved1">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Reserved2">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Reserved3">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.PAINTSTRUCT.Reserved4">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.WINDOWPOS">
            <summary>
              The WINDOWPOS structure contains information about the size and position of a window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.hWnd">
            <summary>
              Handle to the window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.hWndInsertAfter">
            <summary>
              Specifies the position of the window in Z order (front-to-back position).
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.Left">
            <summary>
              Specifies the position of the left edge of the window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.Top">
            <summary>
              Specifies the position of the top edge of the window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.Width">
            <summary>
              Specifies the window width, in pixels
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.Height">
            <summary>
              Specifies the window height, in pixels.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WINDOWPOS.Flags">
            <summary>
              Specifies the window position.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.TEXTMETRIC">
            <summary>
              The TEXTMETRIC structure contains basic information about a physical font. 
              All sizes are specified in logical units; that is, they depend on 
              the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Height">
            <summary>
              Specifies the height (ascent + descent) of characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Ascent">
            <summary>
              Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Descent">
            <summary>
              Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.InternalLeading">
            <summary>
              Specifies the amount of leading (space) inside the bounds set by 
              the tmHeight member. Accent marks and other diacritical characters 
              may occur in this area. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.ExternalLeading">
            <summary>
              Specifies the amount of extra leading (space) that the application 
              adds between rows. Since this area is outside the font, it contains 
              no marks and is not altered by text output calls in either OPAQUE or 
              TRANSPARENT mode. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.AveCharWidth">
            <summary>
              Specifies the average width of characters in the font 
              (generally defined as the width of the letter x). This value 
              does not include the overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.MaxCharWidth">
            <summary>
              Specifies the width of the widest character in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Weight">
            <summary>
              Specifies the weight of the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Overhang">
            <summary>
              Specifies the extra width per string that may be added to 
              some synthesized fonts. When synthesizing some attributes, 
              such as bold or italic, graphics device interface (GDI) or 
              a device may have to add width to a string on both a 
              per-character and per-string basis.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.DigitizedAspectX">
            <summary>
              Specifies the horizontal aspect of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.DigitizedAspectY">
            <summary>
              Specifies the vertical aspect of the device for which the font was designed. 
              The ratio of the tmDigitizedAspectX and tmDigitizedAspectY members is 
              the aspect ratio of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.FirstChar">
            <summary>
              Specifies the value of the first character defined in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.LastChar">
            <summary>
              Specifies the value of the last character defined in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.DefaultChar">
            <summary>
              Specifies the value of the character to be substituted for 
              characters not in the font.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.BreakChar">
            <summary>
              Specifies the value of the character that will be used to 
              define word breaks for text justification.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Italic">
            <summary>
              Specifies an italic font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.Underlined">
            <summary>
              Specifies an underlined font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.StruckOut">
            <summary>
              Specifies a strikeout font if it is nonzero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.PitchAndFamily">
            <summary>
              Specifies information about the pitch, the technology, 
              and the family of a physical font.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TEXTMETRIC.CharSet">
            <summary>
              Specifies the character set of the font. The character set 
              can be one of the following values.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT">
            <summary>
              The TRACKMOUSEEVENT structure contains information for TraceMouseEvent function.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT.Size">
            <summary>
              Specifies the structure size, in bytes.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT.Flags">
            <summary>
              Specifies the services requested.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT.hWndTrack">
            <summary>
              Specifies a handle to the window to track.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT.HoverTime">
            <summary>
              Specifies the hover time-out (if TME_HOVER was specified in dwFlags), in milliseconds.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT.#ctor(System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
              The constructor initializes a new instance of the <b>DRAWTEXTPARAMS</b> structure.
            </summary>
            <param name="flags">Specifies the services requested.</param>
            <param name="hWndTrack">Specifies a handle to the window to track.</param>
            <param name="hoverTime">Specifies the hover time-out, in milliseconds.</param>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.RECONVERTSTRING">
            <summary>
              The RECONVERTSTRING structure defines the strings for 
              IME reconversion. It is the first item in a memory 
              block that contains the strings for reconversion.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwSize">
            <summary>
              Specifies the size of this structure and the memory block it heads.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwVersion">
            <summary>
              Specifies the version number. Must be zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwStrLen">
            <summary>
              Specifies the length of the string that contains the composition string.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwStrOffset">
            <summary>
              Specifies the offset from the start position of this structure.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwCompStrLen">
            <summary>
              Specifies the length of the string that will be the composition string.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwCompStrOffset">
            <summary>
              Specifies the offset of the string that will be the composition string.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwTargetStrLen">
            <summary>
              Specifies the length of the string that is related to the target clause 
              in the composition string.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.RECONVERTSTRING.dwTargetStrOffset">
            <summary>
              Specifies the offset of the target string.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.BP_ANIMATIONPARAMS">
            <summary>
              Defines animation parameters for the BP_PAINTPARAMS structure used by BeginBufferedPaint
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONPARAMS.CBSize">
            <summary>
              The size, in bytes, of this structure.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONPARAMS.DWFlags">
            <summary>
              Flag that describes the characteristics of the animation. 
              The following value is the only one currently defined.
              BPAF_NONCLIENT Indicates that the device context (DC) is a window DC instead of a client DC, 
              so that painting is allowed in the non-client area of the window.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONPARAMS.Style">
            <summary>
              A member of the BP_ANIMATIONSTYLE enumeration that states animation options.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONPARAMS.DWDuration">
            <summary>
              Length of the animation, in milliseconds.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.BP_PAINTPARAMS">
            <summary>
              Defines paint operation parameters BeginBufferedPaint function.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_PAINTPARAMS.cbSize">
            <summary>
              The size, in bytes, of this structure.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_PAINTPARAMS.dwFlags">
            <summary>
             One or more of the following values.
             BPPF_ERASE: Initialize the buffer to ARGB = {0, 0, 0, 0} during BeginBufferedPaint.
             BPPF_NOCLIP: Do not apply the clip region of the target device context (DC) to the double buffer. 
             If this flag is not set and if the target DC is a window DC, then clipping due to 
             overlapping windows is applied to the double buffer. 
             BPPF_NONCLIENT: A non-client DC is being used.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_PAINTPARAMS.prcExclude">
            <summary>
              Pointer to exclusion RECT structure. 
              This rectangle is excluded from the clipping region. May be NULL for no exclusion rectangle. 
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_PAINTPARAMS.pBlendFunction">
            <summary>
              Pointer to BLENDFUNCTION structure, which controls blending by specifying the blending functions
              for source and destination bitmaps. If NULL, the source buffer is copied to the destination with 
              no blending.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.BP_BUFFERFORMAT">
            <summary>
              Define the buffer format.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_BUFFERFORMAT.BPBF_COMPATIBLEBITMAP">
            <summary>
              Compatible bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_BUFFERFORMAT.BPBF_DIB">
            <summary>
              Device-independent bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_BUFFERFORMAT.BPBF_TOPDOWNDIB">
            <summary>
              Top-down device-independent bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_BUFFERFORMAT.BPBF_TOPDOWNMONODIB">
            <summary>
              Top-down monochrome device-independent bitmap.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.BP_ANIMATIONSTYLE">
            <summary>
              Define the animation style.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONSTYLE.BPAS_NONE">
            <summary>
              No animation
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONSTYLE.BPAS_LINEAR">
            <summary>
              Linear fade animation
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONSTYLE.BPAS_CUBIC">
            <summary>
              Cubic fade animation
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.BP_ANIMATIONSTYLE.BPAS_SINE">
            <summary>
              Sinusoid fade animation
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_TEXT">
            <summary>
              A NULL-terminated ANSI character-set character string containing 
              a carriage return and a linefeed character at the end of each line.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_BITMAP">
            <summary>
              A device-dependent bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_METAFILEPICT">
            <summary>
              A "metafile picture" based on the old metafile support of Windows.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_SYLK">
            <summary>
              A memory block containing data in the Microsoft "Symbolic Link" format.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_DIF">
            <summary>
              A memory block containing data in the Data Interchange Format (DIF).
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_TIFF">
            <summary>
              A memory block containing data in the Tag Image File Format (TIFF).
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_OEMTEXT">
            <summary>
              A memory block containing text data (similar to CF_TEXT) but using 
              the OEM character set.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_DIB">
            <summary>
              A memory block defining a device-independent bitmap.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_PALETTE">
            <summary>
              A handle to a color palette.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_PENDATA">
            <summary>
              Used in conjunction with the pen extensions to Windows.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_RIFF">
            <summary>
              Multimedia data in the Resource Interchange File Format.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_WAVE">
            <summary>
              A sound (waveform) file.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_UNICODETEXT">
            <summary>
              A memory block containing Unicode text.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CF_ENHMETAFILE">
            <summary>
              A handle to an enhanced metafile supported under the 32-bit versions of Windows.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.GMEM_FIXED">
            <summary>
              Allocates fixed memory. The return value is a pointer.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.GMEM_MOVEABLE">
            <summary>
              Allocates movable memory. Memory blocks are never moved in physical 
              memory, but they can be moved within the default heap.
            </summary>
            <remarks>
              The return value is a handle to the memory object. To translate the 
              handle into a pointer, use the <b>GlobalLock</b> function.
              This value cannot be combined with GMEM_FIXED.
            </remarks>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.GMEM_ZEROINIT">
            <summary>
              Initializes memory contents to zero.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.GHND">
            <summary>
              Combines GMEM_MOVEABLE and GMEM_ZEROINIT.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.GPTR">
            <summary>
              Combines GMEM_FIXED and GMEM_ZEROINIT.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.WndProc">
            <summary>
              The WindowProc function is an application-defined function that processes messages sent to a window. 
              The WNDPROC type defines a pointer to this callback function. WindowProc is a placeholder for the 
              application-defined function name.
            </summary>
            <param name="hWnd">
               Handle to the window. 
            </param>
            <param name="msg">
              Specifies the message.
            </param>
            <param name="wParam">
               Specifies additional message information. The contents of this parameter depend on the value 
               of the <paramref name="msg"/> parameter.
            </param>
            <param name="lParam">
               Specifies additional message information. The contents of this parameter depend on the value 
               of the <paramref name="msg"/> parameter.
            </param>
            <returns></returns>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.CS_DROPSHADOW">
            <summary>
              Windows Class styles.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WM_NULL">
            <summary>
             Windows Message.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.wmMouseEnterMessage">
            <summary>
              Saves the value of WM_MOUSEENTER.
            </summary>
        </member>
        <member name="P:C1.Framework.Platform.NativeMethods.WM_MOUSEENTER">
            <summary>
              The WM_MOUSEENTER messsage registered by .NET framework.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WM_PREVENTFOCUSMESSAGE">
            <summary>
              Register a window message for notify the control not lost focus.
              <para>Set the LParam of this message to <b>Not zero</b> to notify window to prevent all focus message (WM_SETFOCUS, WM_KILLFOCUS)</para>
              <para>Set the LParam of this message to <b>zero</b> to notify window to process all focus message.</para>
            </summary>
            <remarks>
              This message is registered for prevent the focus message when SizeGrip is mouse dragged to resize frame size.
            </remarks>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.WM_PREVENTDEACTIVATEMESSAGE">
            <summary>
              Windows message is registered for notifing the control prevent process deactivate message.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS">
            <summary>
              The DRAWTEXTPARAMS structure contains extended formatting options for the DrawTextEx method.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS.Size">
            <summary>
              Specifies the structure size, in bytes.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS.TabLength">
            <summary>
              Specifies the size of each tab stop, in units equal to the average character width.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS.LeftMargin">
            <summary>
              Specifies the left margin, in units equal to the average character width.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS.RightMargin">
            <summary>
              Specifies the right margin, in units equal to the average character width.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS.LengthDrawn">
            <summary>
              Receives the number of characters processed by DrawTextEx, including 
              white-space characters. The number can be the length of the string or
              the index of the first line that falls below the drawing area. 
              Note that DrawTextEx always processes the entire string if the DT_NOCLIP 
              formatting flag is specified.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              The constructor initializes a new instance of the <b>DRAWTEXTPARAMS</b> structure.
            </summary>
            <param name="tabLength">
              Specifies the size of each tab stop.
            </param>
            <param name="leftMargin">
              Specifies the left margin.
            </param>
            <param name="rightMargin">
              Specifies the right margin.
            </param>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.wmMSIMEReconvert">
            <summary>
              Saves the value of WM_MSIME_RECONVERT.
            </summary>
        </member>
        <member name="P:C1.Framework.Platform.NativeMethods.WM_MSIME_RECONVERT">
            <summary>
              The WM_MSIME_RECONVERT messsage registered by .NET framework.
            </summary>
        </member>
        <member name="F:C1.Framework.Platform.NativeMethods.wmATOKReconvert">
            <summary>
              Saves the value of WM_MSIME_RECONVERT.
            </summary>
        </member>
        <member name="P:C1.Framework.Platform.NativeMethods.WM_ATOK_RECONVERT">
            <summary>
              The WM_ATOK_RECONVERT messsage registered by ATOK.
            </summary>
        </member>
        <member name="T:C1.Framework.Platform.UnsafeNativeMethods">
            <summary>
              Defines the unsafe native methods base on Gdi32 API library.
            </summary>
            <remarks>
              The UnsafeNativeMethods class defines functions, which is given in Gdi32 SDK.
            </remarks>
            <summary>
              Defines the unsafe native methods base on Win32 API library.
            </summary>
            <remarks>
              The UnsafeNativeMethods class defines functions, which is given in Win32 SDK.
            </remarks>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DeleteObject(System.IntPtr)">
            <summary>The DeleteObject Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.Ellipse(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The Ellipse Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.Pie(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The Pie Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetPixel(System.IntPtr,System.Int32,System.Int32)">
            <summary>The GetPixel Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetPixelV(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>The SetPixelV Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetGraphicsMode(System.IntPtr)">
            <summary>The GetGraphicsMode Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetGraphicsMode(System.IntPtr,System.Int32)">
            <summary>The SetGraphicsMode Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetWorldTransform(System.IntPtr,C1.Framework.Platform.NativeMethods.XFORM@)">
            <summary>The GetWorldTransform Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetWorldTransform(System.IntPtr,C1.Framework.Platform.NativeMethods.XFORM@)">
            <summary>The SetWorldTransform Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCharWidth32(System.IntPtr,System.Int32,System.Int32,System.Int32[])">
            <summary>The GetCharWidth32 Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTextMetrics(System.IntPtr,C1.Framework.Platform.NativeMethods.TEXTMETRIC@)">
            <summary>The GetTextMetrics Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetRegionData(System.IntPtr,System.Int32,System.Byte[])">
            <summary>The GetRegionData Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.FrameRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>The FrameRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>The SelectObject Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCurrentObject(System.IntPtr,System.UInt32)">
            <summary>The GetCurrentObject Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetBkMode(System.IntPtr,System.Int32)">
            <summary>The SetBKMode Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetBkColor(System.IntPtr,System.Int32)">
            <summary>The SetBkColor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetTextCharacterExtra(System.IntPtr,System.Int32)">
            <summary>The SetTextCharacterExtra Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.TextOut(System.IntPtr,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>The TextOut Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetBitmapBits(System.IntPtr,System.Int32,System.UInt16[])">
            <summary>The GetBitmapBits Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.TabbedTextOut(System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>The TabbedTextOut Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetROP2(System.IntPtr)">
            <summary>The GetROP2 Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetROP2(System.IntPtr,System.Int32)">
            <summary>The SetROP2 Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetDCOrgEx(System.IntPtr,C1.Framework.Platform.NativeMethods.POINT@)">
            <summary>The GetDCOrgEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SelectClipRgn(System.IntPtr,System.IntPtr)">
            <summary>The SelectClipRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetClipRgn(System.IntPtr,System.IntPtr)">
            <summary>The GetClipRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetTextColor(System.IntPtr,System.Int32)">
            <summary>The SetTextColor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTextColor(System.IntPtr)">
            <summary>The GetTextColor Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The Rectangle Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.FillRgn(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The FillRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>The StretchBlt Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ScaleViewportExtEx(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>The ScaleViewportExtEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.OffsetViewportOrgEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>The OffsetViewportOrgEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ScaleWindowExtEx(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>The ScaleWindowExtEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.OffsetWindowOrgEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>The OffsetWindowOrgEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.Arc(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The Arc Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.AngleArc(System.IntPtr,System.Int32,System.Int32,System.UInt32,System.Single,System.Single)">
            <summary>The AngleArc Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.Chord(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The Chord Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.PolyBezier(System.IntPtr,C1.Framework.Platform.NativeMethods.POINT[],System.Int32)">
            <summary>The PolyBezier Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.Polygon(System.IntPtr,C1.Framework.Platform.NativeMethods.POINT[],System.Int32)">
            <summary>The PolyBezier Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetArcDirection(System.IntPtr,System.Int32)">
            <summary>The SetArcDirection Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetArcDirection(System.IntPtr)">
            <summary>The GetArcDirection Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BeginPath(System.IntPtr)">
            <summary>The BeginPath Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>The BitBlt Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CloseFigure(System.IntPtr)">
            <summary>The CloseFigure Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CombineRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>The CombineRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>The CreateBitmap Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>The CreateBitmap Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16[])">
            <summary>The CreateBitmap Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>The CreateCompatibleBitmap Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateCompatibleDC(System.IntPtr)">
            <summary>The CreateCompatibleDC Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateDIBPatternBrushPt(System.IntPtr,System.Int32)">
            <summary>The CreateDIBPatternBrushPt Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateDIBSection(System.IntPtr,System.IntPtr,System.Int32,System.Byte[],System.IntPtr,System.Int32)">
            <summary>The CreateDIBSection Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateDIBSection(System.IntPtr,C1.Framework.Platform.NativeMethods.BITMAPINFO@,System.Int32,System.Byte[],System.IntPtr,System.Int32)">
            <summary>The CreateDIBSection Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateDIBitmap(System.IntPtr,C1.Framework.Platform.NativeMethods.BITMAPINFOHEADER@,System.Int32,System.UInt16[],System.IntPtr,System.Int32)">
            <summary>The CreateDIBitmap Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateFontIndirect(C1.Framework.Platform.NativeMethods.LOGFONT@)">
            <summary>The CreateFontIndirect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateHalftonePalette(System.IntPtr)">
            <summary>The CreateHalftonePalette Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreatePatternBrush(System.IntPtr)">
            <summary>The CreatePatternBrush Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreatePen(System.Int32,System.Int32,System.Int32)">
            <summary>The CreatePen Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The CreateRectRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateEllipticRgnIndirect(C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The CreateEllipticRgnIndirect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreatePolygonRgn(C1.Framework.Platform.NativeMethods.POINT[],System.Int32,System.Int32)">
            <summary>The CreatePolygonRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateRoundRectRgn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The CreateRoundRectRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateSolidBrush(System.Int32)">
            <summary>The CreateSolidBrush Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateHatchBrush(System.Int32,System.Int32)">
            <summary>The CreateHatchBrush Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateBrushIndirect(C1.Framework.Platform.NativeMethods.LOGBRUSH@)">
            <summary>The CreateBrushIndirect Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetBitmapBits(System.IntPtr,System.Int32,System.Byte[])">
            <summary>The GetBitmapBits Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.MoveToEx(System.IntPtr,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.POINT@)">
            <summary>The MoveToEx Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetBkColor(System.IntPtr)">
            <summary>The GetBkColor Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetBkMode(System.IntPtr)">
            <summary>The GetBkMode Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTextAlign(System.IntPtr)">
            <summary>The GetTextAlign Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetTextAlign(System.IntPtr,System.Int32)">
            <summary>The SetTextAlign Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetTextJustification(System.IntPtr,System.Int32,System.Int32)">
            <summary>The SetTextJustification Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ExtTextOut(System.IntPtr,System.Int32,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.RECT@,System.String,System.Int32,System.Int32[])">
            <summary>The ExtTextOut Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTextCharacterExtra(System.IntPtr)">
            <summary>The GetTextCharacterExtra Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.RegisterWindowMessage(System.String)">
            <summary>The RegisterWindowMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.AdjustWindowRectEx(C1.Framework.Platform.NativeMethods.RECT@,System.Int32,System.Boolean,System.Int32)">
            <summary>The AdjustWindowRectEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateWindowEx(System.UInt32,System.String,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>The CreateWindowEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>The SetWindowLong Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>The SetWindowPos Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>The SetWindowRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetWindowRgn(System.IntPtr,System.IntPtr)">
            <summary>The SetWindowRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsWindowEnabled(System.IntPtr)">
            <summary>The IsWindowEnabled Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsWindowVisible(System.IntPtr)">
            <summary>The IsWindowVisible Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.WindowFromPoint(C1.Framework.Platform.NativeMethods.POINT)">
            <summary>The WindowFromPoint Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ShowWindow(System.IntPtr,System.UInt32)">
            <summary>The ShowWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>The MoveWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.UpdateWindow(System.IntPtr)">
            <summary>The UpdateWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsWindow(System.IntPtr)">
            <summary>The IsWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetActiveWindow">
            <summary>The GetActiveWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetForegroundWindow">
            <summary>The GetForegroundWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>The EnableWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTopWindow(System.IntPtr)">
            <summary>The GetTopWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetWindowDC(System.IntPtr)">
            <summary>The GetWindowDC Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetDesktopWindow">
            <summary>The GetDesktopWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetActiveWindow(System.IntPtr)">
            <summary>The SetActiveWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetWindow(System.IntPtr,System.Int32)">
            <summary>The GetWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DestroyWindow(System.IntPtr)">
            <summary>The DestroyWindow Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ChangeClipboardChain(System.IntPtr,System.IntPtr)">
            <summary>The ChangeClipboardChain Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ClientToScreen(System.IntPtr,C1.Framework.Platform.NativeMethods.POINT@)">
            <summary>The ClientToScreen Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CreateCaret(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>The CreateCaret Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DestroyCaret">
            <summary>The DestroyCaret Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ShowCaret(System.IntPtr)">
            <summary>The ShowCaret Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.HideCaret(System.IntPtr)">
            <summary>The HideCaret Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCaretPos(C1.Framework.Platform.NativeMethods.POINT@)">
            <summary>The GetCaretPos Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetCaretPos(System.Int32,System.Int32)">
            <summary>The SetCaretPos Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCaretBlinkTime">
            <summary>The GetCaretBlinkTime Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetCaretBlinkTime(System.UInt32)">
            <summary>The SetCaretBlinkTime Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawFocusRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The DrawFocusRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawFrameControl(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@,System.Int32,System.Int32)">
            <summary>The DrawFrameControl Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawIcon(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>The DrawIcon Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawText(System.IntPtr,System.String,System.Int32,C1.Framework.Platform.NativeMethods.RECT@,System.Int32)">
            <summary>The DrawText Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawTextEx(System.IntPtr,System.String,System.Int32,C1.Framework.Platform.NativeMethods.RECT@,System.Int32,C1.Framework.Platform.NativeMethods.DRAWTEXTPARAMS@)">
            <summary>The DrawTextEx Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.MsgWaitForMultipleObjects(System.Int32,System.IntPtr,System.Boolean,System.Int32,System.Int32)">
            <summary>The MsgWaitForMultipleObjects Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetSysColor(System.Int32)">
            <summary>The GetSysColor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ScreenToClient(System.IntPtr,C1.Framework.Platform.NativeMethods.POINT@)">
            <summary>The ScreenToClient Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BeginPaint(System.IntPtr,C1.Framework.Platform.NativeMethods.PAINTSTRUCT@)">
            <summary>The BeginPaint Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.EndPaint(System.IntPtr,C1.Framework.Platform.NativeMethods.PAINTSTRUCT@)">
            <summary>The EndPaint Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCapture">
            <summary>The GetCapture Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetClientRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The GetClientRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCursorPos(C1.Framework.Platform.NativeMethods.POINT@)">
            <summary>The GetCursorPos Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetDC(System.IntPtr)">
            <summary>The GetDC Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetDoubleClickTime">
            <summary>The GetDoubleClickTime Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetFocus">
            <summary>The GetFocus Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetKeyState(System.Int32)">
            <summary>The GetKeyState Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTabbedTextExtent(System.IntPtr,System.String,System.Int32,System.Int32,System.Int32[])">
            <summary>The GetTabbedTextExtent Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetWindowRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The GetWindowRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.FillRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@,System.IntPtr)">
            <summary>The FillRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.InvertRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The InvertRect Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.InvalidateRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@,System.Boolean)">
            <summary>The InvalidateRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.InvalidateRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>The InvalidateRgn Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetUpdateRect(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@,System.Boolean)">
            <summary>The GetUpdateRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.LoadCursor(System.IntPtr,System.String)">
            <summary>The LoadCursor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.LoadCursor(System.IntPtr,System.Int32)">
            <summary>The LoadCursor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.MapWindowPoints(System.IntPtr,System.IntPtr,C1.Framework.Platform.NativeMethods.POINT@,System.Int32)">
            <summary>The MapWindowPoints Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.PeekMessage(C1.Framework.Platform.NativeMethods.MSG@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>The PeekMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ReleaseCapture">
            <summary>The ReleaseCapture Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>The ReleaseDC Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>The SendMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>The SendMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>The PostMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>The PostMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SystemParametersInfo(System.UInt32,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>The SystemParametersInfo Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.TranslateMessage(C1.Framework.Platform.NativeMethods.MSG@)">
            <summary>The TranslateMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetCapture(System.IntPtr)">
            <summary>The SetCapture Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetCursor(System.IntPtr)">
            <summary>The SetCursor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetFocus(System.IntPtr)">
            <summary>The SetFocus Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.TrackMouseEvent(C1.Framework.Platform.NativeMethods.TRACKMOUSEEVENT@)">
            <summary>The TrackMouseEvent Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SendMessageTimeout(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Object@)">
            <summary>The SendMessageTimeOut Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SendMessageTimeout(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Object@)">
            <summary>The SendMessageTimeOut Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.keybd_event(System.Byte,System.Byte,System.UInt32,System.IntPtr)">
            <summary> The keybd_event function synthesizes a keystroke. </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>The SetParent Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.ChildWindowFromPoint(System.IntPtr,C1.Framework.Platform.NativeMethods.POINT)">
            <summary>The ChildWindowFromPoint Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetIconInfo(System.IntPtr,C1.Framework.Platform.NativeMethods.ICONINFO@)">
            <summary>The GetIconInfo Function</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.OpenClipboard(System.IntPtr)">
            <summary>
              The OpenClipboard function opens the clipboard for examination and prevents 
              other applications from modifying the clipboard content.
            </summary>
            <param name="hWndNewOwner">
              Handle to the window to be associated with the open clipboard. If this 
              parameter is NULL, the open clipboard is associated with the current task.
            </param>
            <returns>
              If the function succeeds, the return value is nonzero. If the function 
              fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CloseClipboard">
            <summary>
              The CloseClipboard function closes the clipboard.
            </summary>
            <returns>
              If the function succeeds, the return value is nonzero.
              If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.EmptyClipboard">
            <summary>
              The EmptyClipboard function empties the clipboard and frees handles to data 
              in the clipboard. The function then assigns ownership of the clipboard to 
              the window that currently has the clipboard open.
            </summary>
            <returns>
              If the function succeeds, the return value is nonzero. 
              If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetClipboardData(System.UInt32,System.IntPtr)">
            <summary>
              The SetClipboardData function places data on the clipboard 
              in a specified clipboard format.
            </summary>
            <param name="uFormat">
              Specifies a clipboard format. This parameter can be a registered format 
              or any of the standard clipboard formats.
            </param>
            <param name="hMem">
              Handle to the data in the specified format. This parameter can be NULL, 
              indicating that the window provides data in the specified clipboard 
              format (renders the format) upon request. If a window delays rendering, 
              it must process the WM_RENDERFORMAT and WM_RENDERALLFORMATS messages.
            </param>
            <returns>
              If the function succeeds, the return value is the handle to the data.
              If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsClipboardFormatAvailable(System.UInt32)">
            <summary>
              The IsClipboardFormatAvailable function determines whether the clipboard 
              contains data in the specified format.
            </summary>
            <param name="format">
              Specifies a standard or registered clipboard format.
            </param>
            <returns>
              If the clipboard format is available, the return value is nonzero.
              If the clipboard format is not available, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetClipboardData(System.UInt32)">
            <summary>
              The GetClipboardData function retrieves data from the clipboard in a 
              specified format. The clipboard must have been opened previously.
            </summary>
            <param name="uFormat">
              Specifies a clipboard format.
            </param>
            <returns>
              If the function succeeds, the return value is the handle to a clipboard object 
              in the specified format. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.SetClipboardViewer(System.IntPtr)">
            <summary>
              The SetClipboardViewer function adds the specified window to the chain 
              of clipboard viewers. Clipboard viewer windows receive a WM_DRAWCLIPBOARD 
              message whenever the content of the clipboard changes.
            </summary>
            <param name="hWndNewViewer">
              Handle to the window to be added to the clipboard chain.
            </param>
            <returns>
              If the function succeeds, the return value identifies the next window in 
              the clipboard viewer chain. If an error occurs or there are no other 
              windows in the clipboard viewer chain, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetTickCount">
            <summary>The GetTickCount Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsDBCSLeadByte(System.Byte)">
            <summary>The IsDBCSLeadByte Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.FormatMessage(System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr@,System.Int32,System.IntPtr)">
            <summary>The FormatMessage Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.LocalFree(System.IntPtr)">
            <summary>The LocalFree Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCurrentThreadId">
            <summary>
              Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>
              The return value is the thread identifier of the calling thread.
            </returns>
            <remarks>
              Until the thread terminates, the thread identifier uniquely identifies 
              the thread throughout the system.
            </remarks>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.MultiByteToWideChar(System.Int32,System.Int32,System.Byte[],System.Int32,System.Char[],System.Int32)">
            <summary>
              Maps a character string to a wide-character (Unicode) string. 
              The character string mapped by this function is not necessarily from a multibyte character set. 
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.WideCharToMultiByte(System.Int32,System.Int32,System.String,System.Int32,System.Byte[],System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
              maps a wide-character string to a new character string. The new character string is not necessarily from a multibyte character set.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GlobalAlloc(System.UInt32,System.Int32)">
            <summary>
              The GlobalAlloc function allocates the specified number of bytes from the heap.
            </summary>
            <param name="uFlags">
              Memory allocation attributes.
            </param>
            <param name="dwBytes">
              Number of bytes to allocate.
            </param>
            <returns>
              If the function succeeds, the return value is a handle to the newly allocated 
              memory object. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GlobalFree(System.IntPtr)">
            <summary>
              The GlobalFree function frees the specified global memory object and 
              invalidates its handle.
            </summary>
            <param name="hMem">
              Handle to the global memory object.
            </param>
            <returns>
              If the function succeeds, the return value is NULL. If the function fails, 
              the return value is equal to a handle to the global memory object.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GlobalLock(System.IntPtr)">
            <summary>
              The GlobalLock function locks a global memory object and returns a pointer 
              to the first byte of the object's memory block.
            </summary>
            <param name="hMem">
              Handle to the global memory object.
            </param>
            <returns>
              If the function succeeds, the return value is a pointer to the first byte 
              of the memory block. If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GlobalUnlock(System.IntPtr)">
            <summary>
              The GlobalUnlock function decrements the lock count associated with a memory 
              object that was allocated with GMEM_MOVEABLE. This function has no effect on 
              memory objects allocated with GMEM_FIXED.
            </summary>
            <param name="hMem">
              Handle to the global memory object.
            </param>
            <returns>
              If the memory object is still locked after decrementing the lock count, the return 
              value is a nonzero value. If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GlobalSize(System.IntPtr)">
            <summary>
              The GlobalSize function retrieves the current size of the specified 
              global memory object, in bytes.
            </summary>
            <param name="hMem">
              Handle to the global memory object.
            </param>
            <returns>
              If the function succeeds, the return value is the size of the specified 
              global memory object, in bytes. If the specified handle is not valid or 
              if the object has been discarded, the return value is zero.
            </returns>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.OpenThemeData(System.IntPtr,System.String)">
            <summary>The OpenThemeData Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.CloseThemeData(System.IntPtr)">
            <summary>The CloseThemeData Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsThemeActive">
            <summary>The IsThemeActive Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsAppThemed">
            <summary>The IsAppThemed Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsThemePartDefined(System.IntPtr,System.Int32,System.Int32)">
            <summary>The IsThemePartDefined Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.IsThemeBackgroundPartiallyTransparent(System.IntPtr,System.Int32,System.Int32)">
            <summary>The IsThemeBackgroundPartiallyTransparent Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.RECT@,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The DrawThemeBackground Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.DrawThemeParentBackground(System.IntPtr,System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The DrawThemeParentBackground Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetThemeFilename(System.IntPtr,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>The GetThemeFilename Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetCurrentThemeName(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>The GetCurrentThemeName Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetThemeColor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>The GetThemeColor Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetThemeBackgroundContentRect(System.IntPtr,System.IntPtr,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.RECT@,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The GetThemeBackgroundContentRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetThemeRect(System.IntPtr,System.Int32,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.RECT@)">
            <summary>The GetThemeRect Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetThemePartSize(System.IntPtr,System.IntPtr,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.RECT@,C1.Framework.Platform.NativeMethods.THEMESIZE,C1.Framework.Platform.NativeMethods.SIZE@)">
            <summary>The GetThemePartSize Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BeginBufferedAnimation(System.IntPtr,System.IntPtr,C1.Framework.Platform.NativeMethods.RECT@,C1.Framework.Platform.NativeMethods.BP_BUFFERFORMAT,System.IntPtr,C1.Framework.Platform.NativeMethods.BP_ANIMATIONPARAMS@,System.IntPtr@,System.IntPtr@)">
            <summary>
              The BeginBufferedAnimation Function.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GetThemeTransitionDuration(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
              Gets the duration for the specified transition.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BufferedPaintRenderAnimation(System.IntPtr,System.IntPtr)">
            <summary>
              The BufferedPaintRenderAnimation Function.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.EndBufferedAnimation(System.IntPtr,System.Boolean)">
            <summary>
              Renders the first frame of a buffered animation operation and starts the animation timer.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BufferedPaintInit">
            <summary>
              Initialize the buffered paint API for the current thread.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BufferedPaintUnInit">
            <summary>
              Uninitialize the buffered paint API for the current thread.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BufferedPaintStopAllAnimations(System.IntPtr)">
            <summary>
              Stops all buffered animations for the given window.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.BufferedPaintClear(System.IntPtr,C1.Framework.Platform.NativeMethods.RECT)">
            <summary>
              Clears a specified rectangle in the buffer to ARGB = {0,0,0,0}.
            </summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.AlphaBlend(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,C1.Framework.Platform.NativeMethods.BLENDFUNCTION)">
            <summary>The AlphaBlend Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GradientFill(System.IntPtr,C1.Framework.Platform.NativeMethods.TRIVERTEX[],System.Int32,C1.Framework.Platform.NativeMethods.GRADIENT_RECT[],System.Int32,System.Int32)">
            <summary>The GradientFill Function.</summary>
        </member>
        <member name="M:C1.Framework.Platform.UnsafeNativeMethods.GradientFill(System.IntPtr,C1.Framework.Platform.NativeMethods.TRIVERTEX[],System.Int32,C1.Framework.Platform.NativeMethods.GRADIENT_TRIANGLE[],System.Int32,System.Int32)">
            <summary>The GradientFill Function.</summary>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.RelationDirections">
            <summary>
              Define the relation direction.
            </summary>
            <remarks>
              A relation is a line link two terminal points: start point and end point.So the line has three directions:
            	1. from start to end; 
            	2. from end to start;
            	3. from start to end or from end to start.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.RelationDirections.Normal">
            <summary>
              The direction is form start to end.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.RelationDirections.Reverse">
            <summary>
              The direction is form end to start.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.RelationDirections.Bidirectional">
            <summary>
              The direction is bidirectional.
            </summary>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.IRelation">
            <summary>
              Abstract a general relation.
            </summary>
            <remarks>
              A realtion contains tow terminal points and direction
            </remarks>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.IRelation.Start">
            <summary>
              Gets the start point.
            </summary>
            <value>
              A <b>object</b> indicates the start point.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.IRelation.End">
            <summary>
              Gets the end point.
            </summary>
            <value>
              A <b>object</b> indicates the end point.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.IRelation.Direction">
            <summary>
              Gets the relation direction.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Text.Lexicons.RelationDirections"/> indicates the direction.
            </value>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.RelationSet">
            <summary>
              Define a relation collection.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.RelationSet._relations">
            <summary>
              Indicates the constraints.
            </summary>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.RelationSet.Relations">
            <summary>
              Gets the constraints;
            </summary>
            <value>
              A <see cref="T:System.Collections.IList"/> used to save the relations.
            </value>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.RelationSet.Add(C1.Framework.Text.Lexicons.IRelation)">
            <summary>
              Add a relation to the collection.
            </summary>
            <param name="relation">
              The relation to be added.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.RelationSet.Remove(C1.Framework.Text.Lexicons.IRelation)">
            <summary>
              Remove the relation form the collection.
            </summary>
            <param name="relation">
              The relation to be removed.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.RelationSet.To(System.Object[])">
            <summary>
              Form the start set to end set.
            </summary>
            <param name="starts">
              The start points set.
            </param>
            <returns>
              return the end points set.
            </returns>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.RelationSet.Form(System.Object[])">
            <summary>
              Form the end set to the start set.
            </summary>
            <param name="ends">
              The end points set.
            </param>
            <returns>
              return the start points set.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.Relation">
            <summary>
              A general implementation for the <see cref="T:C1.Framework.Text.Lexicons.IRelation"/> interface.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Relation._start">
            <summary>
              Indicates the start point.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Relation._end">
            <summary>
              Indicates the end point.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Relation._direction">
            <summary>
              Indicates the direction.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Relation.#ctor(System.Object,System.Object)">
            <summary>
              Constructor.
            </summary>
            <param name="start">
              A <b>object</b> indicates the start point.
            </param>
            <param name="end">
              A <b>object</b> indicates the end point.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Relation.#ctor(System.Object,System.Object,C1.Framework.Text.Lexicons.RelationDirections)">
            <summary>
             Constructor.
            </summary>
            <param name="start">
              A <b>object</b> indicates the start point.
            </param>
            <param name="end">
              A <b>object</b> indicates the end point.
            </param> 
            <param name="direction">
              A <b>RelationDirections</b> indicates the direction.
            </param>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Relation.Start">
            <summary>
              Gets the start.
            </summary>
            <value>
              A <b>object</b> indicates the start point.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Relation.End">
            <summary>
              Gets the end.
            </summary>
            <value>
              A <b>object</b> indicates the end point.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Relation.Direction">
            <summary>
              Gets the direction.
            </summary>
            <value>
              A <b>RelationDirections</b> indicates the direction.
            </value>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.IPattern">
            <summary>
             Defines the IPattern interface.
            </summary>
            <remarks>
              Pattern can match a word in the text.
            </remarks>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.IPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.ITextFilter">
            <summary>
              Defines the ITextFilter interface. 
            </summary>
            <remarks>
              A text filter used to convert special text to other text.
            </remarks>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.ITextFilter.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filter.
            </param>
            <returns>
              The text after filter.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.StringPattern">
            <summary>
              Defines the StringPattern class.
            </summary>
            <remarks>
              <see cref="T:C1.Framework.Text.Lexicons.StringPattern"/> used to match a pecial string in the text.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.StringPattern._text">
            <summary>
              Indicates the text.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.StringPattern.#ctor(System.String)">
            <summary>
              Constructor.
            </summary>
            <param name="text">
              The text.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.StringPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text form start index.
            </summary>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.StringQuantityPattern">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.StringQuantityPattern"/> class.
            </summary>
            <remarks>
              <see cref="T:C1.Framework.Text.Lexicons.StringQuantityPattern"/>, used to match a repeated string in the text. 
              <b>minimum</b> indicates the mininum repeated times.
              <b>maximum</b> indicates the maxinum repeated times.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.StringQuantityPattern._text">
            <summary>
              Indicates the repeated text.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.StringQuantityPattern._minimum">
            <summary>
              Indicates the minimum repeated times.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.StringQuantityPattern._maximum">
            <summary>
              Indicates the maximum repeated times.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.StringQuantityPattern.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
              Constructor.
            </summary>
            <param name="text">
              The repeated text.
            </param>
            <param name="minimum">
              The minimum repeated times.
            </param>
            <param name="maximum">
              The maximum repeated times.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.StringQuantityPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text form start index.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.CharacterQuotationPattern">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.CharacterQuotationPattern"/> class.
            </summary>
            <remarks>
              <see cref="T:C1.Framework.Text.Lexicons.CharacterQuotationPattern"/>, used to match the quatation bracket witch a pair of character.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.CharacterQuotationPattern._escape">
            <summary>
              Indicates the escape;
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.CharacterQuotationPattern._leftSymbol">
            <summary>
              Indicates the leftSymbol.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.CharacterQuotationPattern._rightSymbol">
            <summary>
              Indicates the leftSymbol.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.CharacterQuotationPattern._includeSymbol">
            <summary>
              Indicates the leftSymbol
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.CharacterQuotationPattern._includeEscape">
            <summary>
              Indicates if the text include the escape.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.CharacterQuotationPattern.#ctor(System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
              Constructor.
            </summary>
            <param name="escape">
              The escape.
            </param>
            <param name="leftSymbol">
              The left symbol.
            </param>
            <param name="rightSymbol">
              The right symbol.
            </param>
            <param name="includeSymbol">
              The text include symbol.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.CharacterQuotationPattern.#ctor(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
              Constructor.
            </summary>
            <param name="escape">
              The escape.
            </param>
            <param name="leftSymbol">
              The left symbol.
            </param>
            <param name="rightSymbol">
              The right symbol.
            </param>
            <param name="includeSymbol">
              The text include symbol.
            </param>
            <param name="includeEscape">
              The text include escape.
            </param>
            <summary>
              Indicates if the text include the escape.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.CharacterQuotationPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text form start index.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.CharacterQuotationPattern.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filtering.
            </param>
            <returns>
              Returns the text after filtering.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.CharacterQuotationPattern"/> class.
            </summary>
            <remarks>
              <see cref="T:C1.Framework.Text.Lexicons.CharacterQuotationPattern"/>, used to match key work with a sub lexicon.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern._escape">
            <summary>
              Indicates the escape;
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern._leftSymbol">
            <summary>
              Indicates the leftSymbol.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern._rightSymbol">
            <summary>
              Indicates the leftSymbol.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern._content">
            <summary>
              Indicates the content.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern.#ctor(System.Char,System.Char,System.Char,C1.Framework.Text.Lexicons.Lexicon)">
            <summary>
              Constructor.
            </summary>
            <param name="escape">
              The escape.
            </param>
            <param name="leftSymbol">
              The left symbol.
            </param>
            <param name="rightSymbol">
              The right symbol.
            </param>
            <param name="content">
              The content.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern.Match(System.String,System.Int32)">
            <summary>
            Match the text form start index.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.LexiconCharacterQuotationPattern.Filter(System.String)">
            <summary>
              Filter the text.
            </summary>
            <param name="text">
              The text before filtering.
            </param>
            <returns>
              Returns the text after filtering.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.ExcludeStringsPattern">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.ExcludeStringsPattern"/> class.
            </summary>
            <remarks>
              <see cref="T:C1.Framework.Text.Lexicons.ExcludeStringsPattern"/>, used to exclude special string form the text. 
              As soon as it find the special string, it will throw a exception.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.ExcludeStringsPattern._textList">
            <summary>
              Indicates the text.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.ExcludeStringsPattern._message">
            <summary>
              Indicates the message.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.ExcludeStringsPattern.#ctor(System.String[],System.String)">
            <summary>
              Constructor.
            </summary>
            <param name="textList">
              The text item used to exclude during the matching.
            </param>
            <param name="message">
              The message if for throwing exception when find matched word in the text list.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.ExcludeStringsPattern.Match(System.String,System.Int32)">
            <summary>
              Match the text form start index.
            </summary>
            <param name="text">
              The text.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <returns>
              Return the matched length. Zero indicates no matched.
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.MatchingSwitches">
            <summary>
              Defines a serial of matched switches.
            </summary>
            <remarks>
              Use this enumeration can control the parse process.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.MatchingSwitches.None">
            <summary>
              Indicates no switch.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.MatchingSwitches.Priority">
            <summary>
              This pattern will be matched before other patterns and escape.
            </summary>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.LexiconItem">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.LexiconItem"/> class.
            </summary>
            <remarks>
              Attached a id with a pattern.
            </remarks>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.LexiconItem.#ctor(System.Object,C1.Framework.Text.Lexicons.IPattern)">
            <summary>
              Constructor.
            </summary>
            <param name="id">
              The id.
            </param>
            <param name="pattern">
              The pattern.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.LexiconItem.#ctor(System.Object,C1.Framework.Text.Lexicons.IPattern,C1.Framework.Text.Lexicons.MatchingSwitches)">
            <summary>
              Constructor.
            </summary>
            <param name="id">
              The id.
            </param>
            <param name="pattern">
              The pattern.
            </param>
            <param name="switches">
              The switches.
            </param>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconItem._id">
            <summary>
              Indicates the id.
            </summary>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.LexiconItem.ID">
            <summary>
              Gets the id.
            </summary>
            <value>
              A <b>object</b> used as id of the item.
            </value>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconItem._pattern">
            <summary>
              Indicates the pattern.
            </summary>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.LexiconItem.Pattern">
            <summary>
              Gets the pattern.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Text.Lexicons.IPattern"/> used to match.
            </value>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.LexiconItem._switches">
            <summary>
              A <see cref="T:C1.Framework.Text.Lexicons.MatchingSwitches"/> used to control the matching.
            </summary>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.LexiconItem.Switches">
            <summary>
              Gets the matching switches
            </summary>
            <value>
            </value>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.Lexicon">
            <summary>
              Defines the Lexicon class.
            </summary>
            <remarks>
              Provides a tool, that can parse the key word form the text.
              Each key word take effecting by a IPattern interface, lexicon will try to find it by the order.
              The find is described by <see cref="T:C1.Framework.Text.Lexicons.Lexicon.Match"/>.
              You also can set the two kinds of relation ship: Repellency and  Dependency.
            	Repellency, make a pattern not take effecting, when a pattern has been matched.
            	Dependency, make a pattern not take effecting, until a pattern has been matched.    
            </remarks>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.Lexicon.Match">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.Lexicon.Match"/> class.
            </summary>
            <remarks>
              A match indicates the finding of special pattern during the parse processing.
            </remarks>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch">
            <summary>
              Defines the <see cref="T:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch"/> class.
            </summary>
            <remarks>
              Indicates the literals between the two pattern finding.
            </remarks>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch._nextMatchedLength">
            <summary>
              Indicates the next matched length.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch._exitEscapes">
            <summary>
              Indicates whether exit literals.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch._version">
            <summary>
              Indicates the verion.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch.#ctor(C1.Framework.Text.Lexicons.Lexicon,System.String,System.Boolean,System.Int32)">
            <summary>
              Construtor.
            </summary>
            <param name="owner">
              The owner.
            </param>
            <param name="text">
              The orignal text.
            </param>
            <param name="exitEscapes">
              If exit escapes.
            </param>
            <param name="nexMatchedLength">
              Next matched length.
            </param>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch.Text">
            <summary>
              Gets the text.
            </summary>
            <value>
              A <b>string</b> indicates the matched text.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch.ID">
            <summary>
              Gets the ID.
            </summary>
            <value>
              A <b>object</b> indicates the matched id.
            </value>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Match.LiteralsMatch.NextMatch">
            <summary>
              Gets the next match.
            </summary>
            <returns>
              A next <see cref="T:C1.Framework.Text.Lexicons.Lexicon.Match"/>.
            </returns>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match._owner">
            <summary>
            Indicates the owner.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match._index">
            <summary>
            Indicates the start index.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match._length">
            <summary>
            Indicates the length.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match._item">
            <summary>
            Indicates the matched item.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match._previous">
            <summary>
            Indicates the previous match.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.Match._text">
            <summary>
            Indicates the text.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Match.#ctor(C1.Framework.Text.Lexicons.Lexicon,System.String)">
            <summary>
            Construtor.
            </summary>
            <param name="owner">
              The owner.
            </param>
            <param name="text">
              The orignal text.
            </param>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Match.Success">
            <summary>
              Gets a value indicates whether is a sucess match.
            </summary>
            <value>
              A <b>bool</b> indicates a sucess match.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Match.ID">
            <summary>
              Gets the id.
            </summary>
            <value>
              A <b>object</b> indicates the matched id.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Match.Text">
            <summary>
              Gets the mathed text.
            </summary>
            <value>
              A <b>string</b> indicates the matched text.
            </value>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Match.NextMatch">
            <summary>
             Gets the next match.
            </summary>
            <returns>
              A next <see cref="T:C1.Framework.Text.Lexicons.Lexicon.Match"/>.
            </returns>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Match.RelationCheck(System.Object)">
            <summary>
              Check the relation.
            </summary>
            <param name="id">
              The id need be checked.
            </param>
            <returns>
              Return <b>true</b>, if the id is allow by the relation, otherwise, return <b>false</b>
            </returns>
        </member>
        <member name="T:C1.Framework.Text.Lexicons.Lexicon.MatchCollection">
            <summary>
              Defines the match collection.
            </summary>
            <remarks>
              Used to saves and gets a serial matches.
            </remarks>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.MatchCollection.#ctor(System.Collections.ICollection)">
            <summary>
              Constructor.
            </summary>
            <param name="matches">
              The matches.
            </param>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.MatchCollection.Item(System.Int32)">
            <summary>
              Gets the match by special index.
            </summary>
            <value>
              The item at index.
            </value>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.LiteralsID">
            <summary>
              Indicates the id of the literals.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.AssertionID">
            <summary>
              Indicates the assertion id.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon.ESCAPE">
            <summary>
              Indicates the esacpe char.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.#ctor(System.Char,System.Object)">
            <summary>
             Constructor.
            </summary>
            <param name="escape">
              The escape.
            </param>
            <param name="literalsID">
              The literals id.
            </param>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon._escape">
            <summary>
              Indicates the escape.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon._version">
            <summary>
              Indicates the version.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon._innerList">
            <summary>
              Indicates the inner list.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon._literalsID">
            <summary>
              Indicates the literals id.
            </summary>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Item(System.Int32)">
            <summary>
              Gets or sets the item by speical index.
            </summary>
            <value>
              The <see cref="T:C1.Framework.Text.Lexicons.LexiconItem"/> at the index.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Count">
            <summary>
              Gets the item count.
            </summary>
            <value>
              A <b>int</b> value indicates the <see cref="T:C1.Framework.Text.Lexicons.LexiconItem"/> count in the collection.
            </value>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Add(C1.Framework.Text.Lexicons.LexiconItem)">
            <summary>
              Adds a item into the collection.
            </summary>
            <param name="item">
              The items.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.Remove(C1.Framework.Text.Lexicons.LexiconItem)">
            <summary>
              Remove a item form the collection.
            </summary>
            <param name="item">
              The item.
            </param>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.BuildMatch(System.String)">
            <summary>
              Creates the first match.
            </summary>
            <param name="text">
              The text to be parsed.
            </param>
            <returns>
              The first match.
            </returns>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon._repellency">
            <summary>
              Indicates the repellency item set.
            </summary>
        </member>
        <member name="F:C1.Framework.Text.Lexicons.Lexicon._dependency">
            <summary>
              Indicates the dependency item set.
            </summary>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Repellency">
            <summary>
              Gets the repellency set.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Text.Lexicons.RelationSet"/> used to save the repellency relations.
            </value>
        </member>
        <member name="P:C1.Framework.Text.Lexicons.Lexicon.Dependency">
            <summary>
              Gets the dependency set.
            </summary>
            <value>
              A <see cref="T:C1.Framework.Text.Lexicons.RelationSet"/> used to save the dependency relations.
            </value>
        </member>
        <member name="M:C1.Framework.Text.Lexicons.Lexicon.BuildMatches(System.String)">
            <summary>
              Gets the matches collection.
            </summary>
            <param name="text">
              The text to be parsed.
            </param>
            <returns>
              A <see cref="T:C1.Framework.Text.Lexicons.Lexicon.MatchCollection"/> contains the all matches.
            </returns>
        </member>
    </members>
</doc>
